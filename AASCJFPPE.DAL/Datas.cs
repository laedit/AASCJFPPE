
/*
	This code was generated by SQL Compact Code Generator version 1.2.0.3

	SQL Compact Code Generator was written by Christian Resma Helle (http://sqlcecodegen.codeplex.com)
	and is under the GNU General Public License version 2 (GPLv2)

	Generated: 10/23/2011 17:32:44
*/


namespace AASCJFPPE.DAL.Datas
{
	#region ApplicationException

	/// <summary>
	/// Represents the ApplicationException table
	/// </summary>
	public partial class ApplicationException
	{
		private System.Int64? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int64? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.String _Message;
		/// <summary>
		/// The Maximum Length the Message field allows
		/// </summary>
		public const int Message_Max_Length = 500;
		/// <summary>
		/// Gets or sets the value of Message
		/// </summary>
		public System.String Message
		{
			get { return _Message; }
			set
			{
				_Message = value;
				if (_Message != null && Message.Length > Message_Max_Length)
					throw new System.ArgumentException("Max length for Message is 500");
			}
		}
		private System.String _StackTrace;
		/// <summary>
		/// The Maximum Length the StackTrace field allows
		/// </summary>
		public const int StackTrace_Max_Length = 500;
		/// <summary>
		/// Gets or sets the value of StackTrace
		/// </summary>
		public System.String StackTrace
		{
			get { return _StackTrace; }
			set
			{
				_StackTrace = value;
				if (_StackTrace != null && StackTrace.Length > StackTrace_Max_Length)
					throw new System.ArgumentException("Max length for StackTrace is 500");
			}
		}
		private System.String _Method;
		/// <summary>
		/// The Maximum Length the Method field allows
		/// </summary>
		public const int Method_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Method
		/// </summary>
		public System.String Method
		{
			get { return _Method; }
			set
			{
				_Method = value;
				if (_Method != null && Method.Length > Method_Max_Length)
					throw new System.ArgumentException("Max length for Method is 100");
			}
		}
		private System.String _Parameters;
		/// <summary>
		/// The Maximum Length the Parameters field allows
		/// </summary>
		public const int Parameters_Max_Length = 500;
		/// <summary>
		/// Gets or sets the value of Parameters
		/// </summary>
		public System.String Parameters
		{
			get { return _Parameters; }
			set
			{
				_Parameters = value;
				if (_Parameters != null && Parameters.Length > Parameters_Max_Length)
					throw new System.ArgumentException("Max length for Parameters is 500");
			}
		}
	}

	#endregion

	#region CahierJournal

	/// <summary>
	/// Represents the CahierJournal table
	/// </summary>
	public partial class CahierJournal
	{
		private System.Int64? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int64? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.DateTime? _DateDebut;
		/// <summary>
		/// Gets or sets the value of DateDebut
		/// </summary>
		public System.DateTime? DateDebut
		{
			get { return _DateDebut; }
			set
			{
				_DateDebut = value;
			}
		}
		private System.DateTime? _DateFin;
		/// <summary>
		/// Gets or sets the value of DateFin
		/// </summary>
		public System.DateTime? DateFin
		{
			get { return _DateFin; }
			set
			{
				_DateFin = value;
			}
		}
		private System.DateTime? _DateJour;
		/// <summary>
		/// Gets or sets the value of DateJour
		/// </summary>
		public System.DateTime? DateJour
		{
			get { return _DateJour; }
			set
			{
				_DateJour = value;
			}
		}
		private System.String _TrancheHoraire;
		/// <summary>
		/// The Maximum Length the TrancheHoraire field allows
		/// </summary>
		public const int TrancheHoraire_Max_Length = 20;
		/// <summary>
		/// Gets or sets the value of TrancheHoraire
		/// </summary>
		public System.String TrancheHoraire
		{
			get { return _TrancheHoraire; }
			set
			{
				_TrancheHoraire = value;
				if (_TrancheHoraire != null && TrancheHoraire.Length > TrancheHoraire_Max_Length)
					throw new System.ArgumentException("Max length for TrancheHoraire is 20");
			}
		}
		private System.Int64? _Discipline;
		/// <summary>
		/// Gets or sets the value of Discipline
		/// </summary>
		public System.Int64? Discipline
		{
			get { return _Discipline; }
			set
			{
				_Discipline = value;
			}
		}
		private System.Int32? _NumeroSeance;
		/// <summary>
		/// Gets or sets the value of NumeroSeance
		/// </summary>
		public System.Int32? NumeroSeance
		{
			get { return _NumeroSeance; }
			set
			{
				_NumeroSeance = value;
			}
		}
		private System.String _Objectifs;
		/// <summary>
		/// The Maximum Length the Objectifs field allows
		/// </summary>
		public const int Objectifs_Max_Length = 500;
		/// <summary>
		/// Gets or sets the value of Objectifs
		/// </summary>
		public System.String Objectifs
		{
			get { return _Objectifs; }
			set
			{
				_Objectifs = value;
				if (_Objectifs != null && Objectifs.Length > Objectifs_Max_Length)
					throw new System.ArgumentException("Max length for Objectifs is 500");
			}
		}
		private System.Int64? _DomaineActivite;
		/// <summary>
		/// Gets or sets the value of DomaineActivite
		/// </summary>
		public System.Int64? DomaineActivite
		{
			get { return _DomaineActivite; }
			set
			{
				_DomaineActivite = value;
			}
		}
	}

	#endregion

	#region Conditions

	/// <summary>
	/// Represents the Conditions table
	/// </summary>
	public partial class Conditions
	{
		private System.Int64? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int64? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.String _Intitule;
		/// <summary>
		/// The Maximum Length the Intitule field allows
		/// </summary>
		public const int Intitule_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Intitule
		/// </summary>
		public System.String Intitule
		{
			get { return _Intitule; }
			set
			{
				_Intitule = value;
				if (_Intitule != null && Intitule.Length > Intitule_Max_Length)
					throw new System.ArgumentException("Max length for Intitule is 100");
			}
		}
	}

	#endregion

	#region DidactiqueCJ

	/// <summary>
	/// Represents the DidactiqueCJ table
	/// </summary>
	public partial class DidactiqueCJ
	{
		private System.Int64? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int64? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.Int64? _PhaseApprentissage;
		/// <summary>
		/// Gets or sets the value of PhaseApprentissage
		/// </summary>
		public System.Int64? PhaseApprentissage
		{
			get { return _PhaseApprentissage; }
			set
			{
				_PhaseApprentissage = value;
			}
		}
		private System.Boolean? _Realise;
		/// <summary>
		/// Gets or sets the value of Realise
		/// </summary>
		public System.Boolean? Realise
		{
			get { return _Realise; }
			set
			{
				_Realise = value;
			}
		}
		private System.Int32? _Ordre;
		/// <summary>
		/// Gets or sets the value of Ordre
		/// </summary>
		public System.Int32? Ordre
		{
			get { return _Ordre; }
			set
			{
				_Ordre = value;
			}
		}
		private System.String _Deroulement;
		/// <summary>
		/// The Maximum Length the Deroulement field allows
		/// </summary>
		public const int Deroulement_Max_Length = 500;
		/// <summary>
		/// Gets or sets the value of Deroulement
		/// </summary>
		public System.String Deroulement
		{
			get { return _Deroulement; }
			set
			{
				_Deroulement = value;
				if (_Deroulement != null && Deroulement.Length > Deroulement_Max_Length)
					throw new System.ArgumentException("Max length for Deroulement is 500");
			}
		}
		private System.Int64? _DispositifSocial;
		/// <summary>
		/// Gets or sets the value of DispositifSocial
		/// </summary>
		public System.Int64? DispositifSocial
		{
			get { return _DispositifSocial; }
			set
			{
				_DispositifSocial = value;
			}
		}
		private System.Int32? _Duree;
		/// <summary>
		/// Gets or sets the value of Duree
		/// </summary>
		public System.Int32? Duree
		{
			get { return _Duree; }
			set
			{
				_Duree = value;
			}
		}
		private System.String _LieuMateriel;
		/// <summary>
		/// The Maximum Length the LieuMateriel field allows
		/// </summary>
		public const int LieuMateriel_Max_Length = 500;
		/// <summary>
		/// Gets or sets the value of LieuMateriel
		/// </summary>
		public System.String LieuMateriel
		{
			get { return _LieuMateriel; }
			set
			{
				_LieuMateriel = value;
				if (_LieuMateriel != null && LieuMateriel.Length > LieuMateriel_Max_Length)
					throw new System.ArgumentException("Max length for LieuMateriel is 500");
			}
		}
	}

	#endregion

	#region DidactiqueFP

	/// <summary>
	/// Represents the DidactiqueFP table
	/// </summary>
	public partial class DidactiqueFP
	{
		private System.Int64? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int64? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.String _Performances;
		/// <summary>
		/// The Maximum Length the Performances field allows
		/// </summary>
		public const int Performances_Max_Length = 500;
		/// <summary>
		/// Gets or sets the value of Performances
		/// </summary>
		public System.String Performances
		{
			get { return _Performances; }
			set
			{
				_Performances = value;
				if (_Performances != null && Performances.Length > Performances_Max_Length)
					throw new System.ArgumentException("Max length for Performances is 500");
			}
		}
		private System.Int64? _DispositifSocial;
		/// <summary>
		/// Gets or sets the value of DispositifSocial
		/// </summary>
		public System.Int64? DispositifSocial
		{
			get { return _DispositifSocial; }
			set
			{
				_DispositifSocial = value;
			}
		}
		private System.Int32? _Duree;
		/// <summary>
		/// Gets or sets the value of Duree
		/// </summary>
		public System.Int32? Duree
		{
			get { return _Duree; }
			set
			{
				_Duree = value;
			}
		}
		private System.String _LieuMateriel;
		/// <summary>
		/// The Maximum Length the LieuMateriel field allows
		/// </summary>
		public const int LieuMateriel_Max_Length = 500;
		/// <summary>
		/// Gets or sets the value of LieuMateriel
		/// </summary>
		public System.String LieuMateriel
		{
			get { return _LieuMateriel; }
			set
			{
				_LieuMateriel = value;
				if (_LieuMateriel != null && LieuMateriel.Length > LieuMateriel_Max_Length)
					throw new System.ArgumentException("Max length for LieuMateriel is 500");
			}
		}
		private System.Int32? _Ordre;
		/// <summary>
		/// Gets or sets the value of Ordre
		/// </summary>
		public System.Int32? Ordre
		{
			get { return _Ordre; }
			set
			{
				_Ordre = value;
			}
		}
		private System.Int64? _Conditions;
		/// <summary>
		/// Gets or sets the value of Conditions
		/// </summary>
		public System.Int64? Conditions
		{
			get { return _Conditions; }
			set
			{
				_Conditions = value;
			}
		}
	}

	#endregion

	#region Discipline

	/// <summary>
	/// Represents the Discipline table
	/// </summary>
	public partial class Discipline
	{
		private System.Int64? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int64? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.String _Intitule;
		/// <summary>
		/// The Maximum Length the Intitule field allows
		/// </summary>
		public const int Intitule_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Intitule
		/// </summary>
		public System.String Intitule
		{
			get { return _Intitule; }
			set
			{
				_Intitule = value;
				if (_Intitule != null && Intitule.Length > Intitule_Max_Length)
					throw new System.ArgumentException("Max length for Intitule is 100");
			}
		}
	}

	#endregion

	#region DispositifSocial

	/// <summary>
	/// Represents the DispositifSocial table
	/// </summary>
	public partial class DispositifSocial
	{
		private System.Int64? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int64? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.String _Intitule;
		/// <summary>
		/// The Maximum Length the Intitule field allows
		/// </summary>
		public const int Intitule_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Intitule
		/// </summary>
		public System.String Intitule
		{
			get { return _Intitule; }
			set
			{
				_Intitule = value;
				if (_Intitule != null && Intitule.Length > Intitule_Max_Length)
					throw new System.ArgumentException("Max length for Intitule is 100");
			}
		}
	}

	#endregion

	#region DomaineActivite

	/// <summary>
	/// Represents the DomaineActivite table
	/// </summary>
	public partial class DomaineActivite
	{
		private System.Int64? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int64? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.Int64? _Discipline;
		/// <summary>
		/// Gets or sets the value of Discipline
		/// </summary>
		public System.Int64? Discipline
		{
			get { return _Discipline; }
			set
			{
				_Discipline = value;
			}
		}
		private System.String _Intitule;
		/// <summary>
		/// The Maximum Length the Intitule field allows
		/// </summary>
		public const int Intitule_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Intitule
		/// </summary>
		public System.String Intitule
		{
			get { return _Intitule; }
			set
			{
				_Intitule = value;
				if (_Intitule != null && Intitule.Length > Intitule_Max_Length)
					throw new System.ArgumentException("Max length for Intitule is 100");
			}
		}
	}

	#endregion

	#region Eleve

	/// <summary>
	/// Represents the Eleve table
	/// </summary>
	public partial class Eleve
	{
		private System.Int64? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int64? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.String _Nom;
		/// <summary>
		/// The Maximum Length the Nom field allows
		/// </summary>
		public const int Nom_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Nom
		/// </summary>
		public System.String Nom
		{
			get { return _Nom; }
			set
			{
				_Nom = value;
				if (_Nom != null && Nom.Length > Nom_Max_Length)
					throw new System.ArgumentException("Max length for Nom is 100");
			}
		}
		private System.String _Prenom;
		/// <summary>
		/// The Maximum Length the Prenom field allows
		/// </summary>
		public const int Prenom_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Prenom
		/// </summary>
		public System.String Prenom
		{
			get { return _Prenom; }
			set
			{
				_Prenom = value;
				if (_Prenom != null && Prenom.Length > Prenom_Max_Length)
					throw new System.ArgumentException("Max length for Prenom is 100");
			}
		}
		private System.Int64? _Niveau;
		/// <summary>
		/// Gets or sets the value of Niveau
		/// </summary>
		public System.Int64? Niveau
		{
			get { return _Niveau; }
			set
			{
				_Niveau = value;
			}
		}
		private System.String _Informations;
		/// <summary>
		/// The Maximum Length the Informations field allows
		/// </summary>
		public const int Informations_Max_Length = 4000;
		/// <summary>
		/// Gets or sets the value of Informations
		/// </summary>
		public System.String Informations
		{
			get { return _Informations; }
			set
			{
				_Informations = value;
				if (_Informations != null && Informations.Length > Informations_Max_Length)
					throw new System.ArgumentException("Max length for Informations is 4000");
			}
		}
	}

	#endregion

	#region EmploiTemps

	/// <summary>
	/// Represents the EmploiTemps table
	/// </summary>
	public partial class EmploiTemps
	{
		private System.Int64? _Niveau;
		/// <summary>
		/// Gets or sets the value of Niveau
		/// </summary>
		public System.Int64? Niveau
		{
			get { return _Niveau; }
			set
			{
				_Niveau = value;
			}
		}
		private System.Int64? _JourSemaine;
		/// <summary>
		/// Gets or sets the value of JourSemaine
		/// </summary>
		public System.Int64? JourSemaine
		{
			get { return _JourSemaine; }
			set
			{
				_JourSemaine = value;
			}
		}
		private System.Int64? _Seance;
		/// <summary>
		/// Gets or sets the value of Seance
		/// </summary>
		public System.Int64? Seance
		{
			get { return _Seance; }
			set
			{
				_Seance = value;
			}
		}
	}

	#endregion

	#region EmploiTempsSeance

	/// <summary>
	/// Represents the EmploiTempsSeance table
	/// </summary>
	public partial class EmploiTempsSeance
	{
		private System.Int64? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int64? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.String _HeureDebut;
		/// <summary>
		/// The Maximum Length the HeureDebut field allows
		/// </summary>
		public const int HeureDebut_Max_Length = 5;
		/// <summary>
		/// Gets or sets the value of HeureDebut
		/// </summary>
		public System.String HeureDebut
		{
			get { return _HeureDebut; }
			set
			{
				_HeureDebut = value;
				if (_HeureDebut != null && HeureDebut.Length > HeureDebut_Max_Length)
					throw new System.ArgumentException("Max length for HeureDebut is 5");
			}
		}
		private System.String _HeureFin;
		/// <summary>
		/// The Maximum Length the HeureFin field allows
		/// </summary>
		public const int HeureFin_Max_Length = 5;
		/// <summary>
		/// Gets or sets the value of HeureFin
		/// </summary>
		public System.String HeureFin
		{
			get { return _HeureFin; }
			set
			{
				_HeureFin = value;
				if (_HeureFin != null && HeureFin.Length > HeureFin_Max_Length)
					throw new System.ArgumentException("Max length for HeureFin is 5");
			}
		}
		private System.String _Intitule;
		/// <summary>
		/// The Maximum Length the Intitule field allows
		/// </summary>
		public const int Intitule_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Intitule
		/// </summary>
		public System.String Intitule
		{
			get { return _Intitule; }
			set
			{
				_Intitule = value;
				if (_Intitule != null && Intitule.Length > Intitule_Max_Length)
					throw new System.ArgumentException("Max length for Intitule is 100");
			}
		}
	}

	#endregion

	#region EvaluationEnvisagee

	/// <summary>
	/// Represents the EvaluationEnvisagee table
	/// </summary>
	public partial class EvaluationEnvisagee
	{
		private System.Int64? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int64? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.String _Intitule;
		/// <summary>
		/// The Maximum Length the Intitule field allows
		/// </summary>
		public const int Intitule_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Intitule
		/// </summary>
		public System.String Intitule
		{
			get { return _Intitule; }
			set
			{
				_Intitule = value;
				if (_Intitule != null && Intitule.Length > Intitule_Max_Length)
					throw new System.ArgumentException("Max length for Intitule is 100");
			}
		}
	}

	#endregion

	#region FichePreparatoire

	/// <summary>
	/// Represents the FichePreparatoire table
	/// </summary>
	public partial class FichePreparatoire
	{
		private System.Int64? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int64? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.Int64? _Discipline;
		/// <summary>
		/// Gets or sets the value of Discipline
		/// </summary>
		public System.Int64? Discipline
		{
			get { return _Discipline; }
			set
			{
				_Discipline = value;
			}
		}
		private System.Int64? _DomaineActivite;
		/// <summary>
		/// Gets or sets the value of DomaineActivite
		/// </summary>
		public System.Int64? DomaineActivite
		{
			get { return _DomaineActivite; }
			set
			{
				_DomaineActivite = value;
			}
		}
		private System.Int64? _Niveau;
		/// <summary>
		/// Gets or sets the value of Niveau
		/// </summary>
		public System.Int64? Niveau
		{
			get { return _Niveau; }
			set
			{
				_Niveau = value;
			}
		}
		private System.String _Sequence;
		/// <summary>
		/// The Maximum Length the Sequence field allows
		/// </summary>
		public const int Sequence_Max_Length = 500;
		/// <summary>
		/// Gets or sets the value of Sequence
		/// </summary>
		public System.String Sequence
		{
			get { return _Sequence; }
			set
			{
				_Sequence = value;
				if (_Sequence != null && Sequence.Length > Sequence_Max_Length)
					throw new System.ArgumentException("Max length for Sequence is 500");
			}
		}
		private System.Int32? _NumeroSeance;
		/// <summary>
		/// Gets or sets the value of NumeroSeance
		/// </summary>
		public System.Int32? NumeroSeance
		{
			get { return _NumeroSeance; }
			set
			{
				_NumeroSeance = value;
			}
		}
		private System.String _TitreSeance;
		/// <summary>
		/// The Maximum Length the TitreSeance field allows
		/// </summary>
		public const int TitreSeance_Max_Length = 500;
		/// <summary>
		/// Gets or sets the value of TitreSeance
		/// </summary>
		public System.String TitreSeance
		{
			get { return _TitreSeance; }
			set
			{
				_TitreSeance = value;
				if (_TitreSeance != null && TitreSeance.Length > TitreSeance_Max_Length)
					throw new System.ArgumentException("Max length for TitreSeance is 500");
			}
		}
		private System.DateTime? _Date;
		/// <summary>
		/// Gets or sets the value of Date
		/// </summary>
		public System.DateTime? Date
		{
			get { return _Date; }
			set
			{
				_Date = value;
			}
		}
		private System.String _CompetencesVisees;
		/// <summary>
		/// The Maximum Length the CompetencesVisees field allows
		/// </summary>
		public const int CompetencesVisees_Max_Length = 500;
		/// <summary>
		/// Gets or sets the value of CompetencesVisees
		/// </summary>
		public System.String CompetencesVisees
		{
			get { return _CompetencesVisees; }
			set
			{
				_CompetencesVisees = value;
				if (_CompetencesVisees != null && CompetencesVisees.Length > CompetencesVisees_Max_Length)
					throw new System.ArgumentException("Max length for CompetencesVisees is 500");
			}
		}
		private System.String _CompetencesRequises;
		/// <summary>
		/// The Maximum Length the CompetencesRequises field allows
		/// </summary>
		public const int CompetencesRequises_Max_Length = 500;
		/// <summary>
		/// Gets or sets the value of CompetencesRequises
		/// </summary>
		public System.String CompetencesRequises
		{
			get { return _CompetencesRequises; }
			set
			{
				_CompetencesRequises = value;
				if (_CompetencesRequises != null && CompetencesRequises.Length > CompetencesRequises_Max_Length)
					throw new System.ArgumentException("Max length for CompetencesRequises is 500");
			}
		}
		private System.String _Objectifs;
		/// <summary>
		/// The Maximum Length the Objectifs field allows
		/// </summary>
		public const int Objectifs_Max_Length = 500;
		/// <summary>
		/// Gets or sets the value of Objectifs
		/// </summary>
		public System.String Objectifs
		{
			get { return _Objectifs; }
			set
			{
				_Objectifs = value;
				if (_Objectifs != null && Objectifs.Length > Objectifs_Max_Length)
					throw new System.ArgumentException("Max length for Objectifs is 500");
			}
		}
		private System.Int64? _EvaluationEnvisagee;
		/// <summary>
		/// Gets or sets the value of EvaluationEnvisagee
		/// </summary>
		public System.Int64? EvaluationEnvisagee
		{
			get { return _EvaluationEnvisagee; }
			set
			{
				_EvaluationEnvisagee = value;
			}
		}
		private System.String _ComplementEvaluationEnvisagee;
		/// <summary>
		/// The Maximum Length the ComplementEvaluationEnvisagee field allows
		/// </summary>
		public const int ComplementEvaluationEnvisagee_Max_Length = 500;
		/// <summary>
		/// Gets or sets the value of ComplementEvaluationEnvisagee
		/// </summary>
		public System.String ComplementEvaluationEnvisagee
		{
			get { return _ComplementEvaluationEnvisagee; }
			set
			{
				_ComplementEvaluationEnvisagee = value;
				if (_ComplementEvaluationEnvisagee != null && ComplementEvaluationEnvisagee.Length > ComplementEvaluationEnvisagee_Max_Length)
					throw new System.ArgumentException("Max length for ComplementEvaluationEnvisagee is 500");
			}
		}
		private System.String _BilanPositif;
		/// <summary>
		/// The Maximum Length the BilanPositif field allows
		/// </summary>
		public const int BilanPositif_Max_Length = 4000;
		/// <summary>
		/// Gets or sets the value of BilanPositif
		/// </summary>
		public System.String BilanPositif
		{
			get { return _BilanPositif; }
			set
			{
				_BilanPositif = value;
				if (_BilanPositif != null && BilanPositif.Length > BilanPositif_Max_Length)
					throw new System.ArgumentException("Max length for BilanPositif is 4000");
			}
		}
		private System.String _BilanNegatif;
		/// <summary>
		/// The Maximum Length the BilanNegatif field allows
		/// </summary>
		public const int BilanNegatif_Max_Length = 4000;
		/// <summary>
		/// Gets or sets the value of BilanNegatif
		/// </summary>
		public System.String BilanNegatif
		{
			get { return _BilanNegatif; }
			set
			{
				_BilanNegatif = value;
				if (_BilanNegatif != null && BilanNegatif.Length > BilanNegatif_Max_Length)
					throw new System.ArgumentException("Max length for BilanNegatif is 4000");
			}
		}
	}

	#endregion

	#region InformationComplementaire

	/// <summary>
	/// Represents the InformationComplementaire table
	/// </summary>
	public partial class InformationComplementaire
	{
		private System.String _Critere;
		/// <summary>
		/// The Maximum Length the Critere field allows
		/// </summary>
		public const int Critere_Max_Length = 4000;
		/// <summary>
		/// Gets or sets the value of Critere
		/// </summary>
		public System.String Critere
		{
			get { return _Critere; }
			set
			{
				_Critere = value;
				if (_Critere != null && Critere.Length > Critere_Max_Length)
					throw new System.ArgumentException("Max length for Critere is 4000");
			}
		}
	}

	#endregion

	#region JourSemaine

	/// <summary>
	/// Represents the JourSemaine table
	/// </summary>
	public partial class JourSemaine
	{
		private System.Int64? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int64? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.String _Intitule;
		/// <summary>
		/// The Maximum Length the Intitule field allows
		/// </summary>
		public const int Intitule_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Intitule
		/// </summary>
		public System.String Intitule
		{
			get { return _Intitule; }
			set
			{
				_Intitule = value;
				if (_Intitule != null && Intitule.Length > Intitule_Max_Length)
					throw new System.ArgumentException("Max length for Intitule is 100");
			}
		}
	}

	#endregion

	#region Link_CJ_DidactiqueCJ

	/// <summary>
	/// Represents the Link_CJ_DidactiqueCJ table
	/// </summary>
	public partial class Link_CJ_DidactiqueCJ
	{
		private System.Int64? _CJ_Id;
		/// <summary>
		/// Gets or sets the value of CJ_Id
		/// </summary>
		public System.Int64? CJ_Id
		{
			get { return _CJ_Id; }
			set
			{
				_CJ_Id = value;
			}
		}
		private System.Int64? _DidactiqueCJ_Id;
		/// <summary>
		/// Gets or sets the value of DidactiqueCJ_Id
		/// </summary>
		public System.Int64? DidactiqueCJ_Id
		{
			get { return _DidactiqueCJ_Id; }
			set
			{
				_DidactiqueCJ_Id = value;
			}
		}
	}

	#endregion

	#region Link_FP_DidactiqueFP

	/// <summary>
	/// Represents the Link_FP_DidactiqueFP table
	/// </summary>
	public partial class Link_FP_DidactiqueFP
	{
		private System.Int64? _FP_id;
		/// <summary>
		/// Gets or sets the value of FP_id
		/// </summary>
		public System.Int64? FP_id
		{
			get { return _FP_id; }
			set
			{
				_FP_id = value;
			}
		}
		private System.Int64? _DidactiqueFP_Id;
		/// <summary>
		/// Gets or sets the value of DidactiqueFP_Id
		/// </summary>
		public System.Int64? DidactiqueFP_Id
		{
			get { return _DidactiqueFP_Id; }
			set
			{
				_DidactiqueFP_Id = value;
			}
		}
	}

	#endregion

	#region Niveau

	/// <summary>
	/// Represents the Niveau table
	/// </summary>
	public partial class Niveau
	{
		private System.Int64? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int64? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.String _Intitule;
		/// <summary>
		/// The Maximum Length the Intitule field allows
		/// </summary>
		public const int Intitule_Max_Length = 3;
		/// <summary>
		/// Gets or sets the value of Intitule
		/// </summary>
		public System.String Intitule
		{
			get { return _Intitule; }
			set
			{
				_Intitule = value;
				if (_Intitule != null && Intitule.Length > Intitule_Max_Length)
					throw new System.ArgumentException("Max length for Intitule is 3");
			}
		}
	}

	#endregion

	#region PhaseApprentissage

	/// <summary>
	/// Represents the PhaseApprentissage table
	/// </summary>
	public partial class PhaseApprentissage
	{
		private System.Int64? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int64? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.String _Intitule;
		/// <summary>
		/// The Maximum Length the Intitule field allows
		/// </summary>
		public const int Intitule_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Intitule
		/// </summary>
		public System.String Intitule
		{
			get { return _Intitule; }
			set
			{
				_Intitule = value;
				if (_Intitule != null && Intitule.Length > Intitule_Max_Length)
					throw new System.ArgumentException("Max length for Intitule is 100");
			}
		}
	}

	#endregion

	#region Version

	/// <summary>
	/// Represents the Version table
	/// </summary>
	public partial class Version
	{
		private System.DateTime? _Date;
		/// <summary>
		/// Gets or sets the value of Date
		/// </summary>
		public System.DateTime? Date
		{
			get { return _Date; }
			set
			{
				_Date = value;
			}
		}
		private System.String _Numero;
		/// <summary>
		/// The Maximum Length the Numero field allows
		/// </summary>
		public const int Numero_Max_Length = 5;
		/// <summary>
		/// Gets or sets the value of Numero
		/// </summary>
		public System.String Numero
		{
			get { return _Numero; }
			set
			{
				_Numero = value;
				if (_Numero != null && Numero.Length > Numero_Max_Length)
					throw new System.ArgumentException("Max length for Numero is 5");
			}
		}
		private System.String _Description;
		/// <summary>
		/// The Maximum Length the Description field allows
		/// </summary>
		public const int Description_Max_Length = 1000;
		/// <summary>
		/// Gets or sets the value of Description
		/// </summary>
		public System.String Description
		{
			get { return _Description; }
			set
			{
				_Description = value;
				if (_Description != null && Description.Length > Description_Max_Length)
					throw new System.ArgumentException("Max length for Description is 1000");
			}
		}
	}

	#endregion

}

namespace AASCJFPPE.DAL.Datas
{
	#region EntityBase

	/// <summary>
	/// Base class for all data access repositories
	/// </summary>
	public static class EntityBase
	{
		private static System.Data.SqlServerCe.SqlCeConnection connectionInstance = null;
		private static readonly object syncLock = new object();

		static EntityBase()
		{
			ConnectionString = "Data Source='Datas.sdf'";
		}

		/// <summary>
		/// Gets or sets the global SQL CE Connection String to be used
		/// </summary>
		public static System.String ConnectionString { get; set; }

		/// <summary>
		/// Gets or sets the global SQL CE Connection instance
		/// </summary>
		public static System.Data.SqlServerCe.SqlCeConnection Connection
		{
			get
			{
				lock (syncLock)
				{
					if (connectionInstance == null)
						connectionInstance = new System.Data.SqlServerCe.SqlCeConnection(ConnectionString);
					if (connectionInstance.State != System.Data.ConnectionState.Open)
						connectionInstance.Open();
					return connectionInstance;
				}
			}
			set
			{
				lock (syncLock)
					connectionInstance = value;
			}
		}

		/// <summary>
		/// Create a SqlCeCommand instance using the global SQL CE Conection instance
		/// </summary>
		public static System.Data.SqlServerCe.SqlCeCommand CreateCommand()
		{
			return CreateCommand(null);
		}

		/// <summary>
		/// Create a SqlCeCommand instance using the global SQL CE Conection instance and associate this with a transaction
		/// </summary>
		/// <param name="transaction">SqlCeTransaction to be used for the SqlCeCommand</param>
		public static System.Data.SqlServerCe.SqlCeCommand CreateCommand(System.Data.SqlServerCe.SqlCeTransaction transaction)
		{
			var command = Connection.CreateCommand();
			command.Transaction = transaction;
			return command;
		}

	}
	#endregion

	#region DatabaseFile

	/// <summary>
	/// Helper class for generating the database file in runtime
	/// </summary>
	public static class DatabaseFile
	{
		/// <summary>
		/// Creates the database
		/// </summary>
		public static int CreateDatabase()
		{
			int resultCount = 0;

			using (var engine = new System.Data.SqlServerCe.SqlCeEngine(EntityBase.ConnectionString))
				engine.CreateDatabase();

			using (var transaction = EntityBase.Connection.BeginTransaction())
			using (var command = EntityBase.CreateCommand(transaction))
			{
				command.CommandText = "CREATE TABLE [ApplicationException](Id BIGINT PRIMARY KEY NOT NULL, Message NVARCHAR(500), StackTrace NVARCHAR(500), Method NVARCHAR(100), Parameters NVARCHAR(500))";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [CahierJournal](Id BIGINT IDENTITY(1,1) PRIMARY KEY NOT NULL, DateDebut DATETIME, DateFin DATETIME, DateJour DATETIME, TrancheHoraire NVARCHAR(20), Discipline BIGINT, NumeroSeance INT, Objectifs NVARCHAR(500), DomaineActivite BIGINT)";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [Conditions](Id BIGINT IDENTITY(0,1) PRIMARY KEY NOT NULL, Intitule NVARCHAR(100) NOT NULL)";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [DidactiqueCJ](Id BIGINT IDENTITY(1,1) PRIMARY KEY NOT NULL, PhaseApprentissage BIGINT NOT NULL, Realise BIT NOT NULL, Ordre INT, Deroulement NVARCHAR(500), DispositifSocial BIGINT NOT NULL, Duree INT, LieuMateriel NVARCHAR(500))";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [DidactiqueFP](Id BIGINT IDENTITY(1,1) PRIMARY KEY NOT NULL, Performances NVARCHAR(500) NOT NULL, DispositifSocial BIGINT NOT NULL, Duree INT NOT NULL, LieuMateriel NVARCHAR(500) NOT NULL, Ordre INT, Conditions BIGINT)";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [Discipline](Id BIGINT IDENTITY(1,1) PRIMARY KEY NOT NULL, Intitule NVARCHAR(100) NOT NULL)";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [DispositifSocial](Id BIGINT IDENTITY(1,1) PRIMARY KEY NOT NULL, Intitule NVARCHAR(100) NOT NULL)";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [DomaineActivite](Id BIGINT IDENTITY(1,1) PRIMARY KEY NOT NULL, Discipline BIGINT NOT NULL, Intitule NVARCHAR(100) NOT NULL)";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [Eleve](Id BIGINT IDENTITY(1,1) PRIMARY KEY NOT NULL, Nom NVARCHAR(100), Prenom NVARCHAR(100), Niveau BIGINT, Informations NVARCHAR(4000))";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [EmploiTemps](Niveau BIGINT PRIMARY KEY NOT NULL, JourSemaine BIGINT NOT NULL, Seance BIGINT NOT NULL)";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [EmploiTempsSeance](Id BIGINT IDENTITY(1,1) PRIMARY KEY NOT NULL, HeureDebut NVARCHAR(5), HeureFin NVARCHAR(5), Intitule NVARCHAR(100))";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [EvaluationEnvisagee](Id BIGINT IDENTITY(1,1) PRIMARY KEY NOT NULL, Intitule NVARCHAR(100) NOT NULL)";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [FichePreparatoire](Id BIGINT IDENTITY(1,1) PRIMARY KEY NOT NULL, Discipline BIGINT, DomaineActivite BIGINT, Niveau BIGINT, Sequence NVARCHAR(500), NumeroSeance INT, TitreSeance NVARCHAR(500), Date DATETIME, CompetencesVisees NVARCHAR(500), CompetencesRequises NVARCHAR(500), Objectifs NVARCHAR(500), EvaluationEnvisagee BIGINT, ComplementEvaluationEnvisagee NVARCHAR(500), BilanPositif NVARCHAR(4000), BilanNegatif NVARCHAR(4000))";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [InformationComplementaire](Critere NVARCHAR(4000))";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [JourSemaine](Id BIGINT IDENTITY(1,1) PRIMARY KEY NOT NULL, Intitule NVARCHAR(100) NOT NULL)";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [Link_CJ_DidactiqueCJ](CJ_Id BIGINT PRIMARY KEY NOT NULL, DidactiqueCJ_Id BIGINT NOT NULL)";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [Link_FP_DidactiqueFP](FP_id BIGINT PRIMARY KEY NOT NULL, DidactiqueFP_Id BIGINT NOT NULL)";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [Niveau](Id BIGINT IDENTITY(1,1) PRIMARY KEY NOT NULL, Intitule NVARCHAR(3) NOT NULL)";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [PhaseApprentissage](Id BIGINT IDENTITY(1,1) PRIMARY KEY NOT NULL, Intitule NVARCHAR(100) NOT NULL)";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [Version](Date DATETIME NOT NULL, Numero NVARCHAR(5) PRIMARY KEY NOT NULL, Description NVARCHAR(1000))";
				resultCount += command.ExecuteNonQuery();
				transaction.Commit();
			}

			return resultCount;
		}
	}

	#endregion

	#region Repository Interface

	/// <summary>
	/// Base Repository interface defining the basic and commonly used data access methods
	/// </summary>
	public partial interface IRepository<T>
	{
		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		System.Collections.Generic.List<T> ToList();

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		System.Collections.Generic.List<T> ToList(int count);

		/// <summary>
		/// Retrieves all items as an array of T
		/// </summary>
		T[] ToArray();

		/// <summary>
		/// Retrieves the first set of items specific by count as an array of T
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		T[] ToArray(int count);

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to be inserted to the database</param>
		void Create(T item);

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		/// <param name="items">Items to be inserted to the database</param>
		void Create(System.Collections.Generic.IEnumerable<T> items);

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to be updated on the database</param>
		void Update(T item);

		/// <summary>
		/// Updates a collection items
		/// </summary>
		/// <param name="items">Items to be updated on the database</param>
		void Update(System.Collections.Generic.IEnumerable<T> items);

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to be deleted from the database</param>
		void Delete(T item);

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to be deleted from the database</param>
		void Delete(System.Collections.Generic.IEnumerable<T> items);

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		int Purge();

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		int Count();
	}
	#endregion

	#region IDataRepository

	/// <summary>
	/// Main Data Repository interface containing all table repositories
	/// </summary>
	public partial interface IDataRepository : System.IDisposable
	{
		/// <summary>
		/// Gets an instance of the IApplicationExceptionRepository
		/// </summary>
		IApplicationExceptionRepository ApplicationException { get; }

		/// <summary>
		/// Gets an instance of the ICahierJournalRepository
		/// </summary>
		ICahierJournalRepository CahierJournal { get; }

		/// <summary>
		/// Gets an instance of the IConditionsRepository
		/// </summary>
		IConditionsRepository Conditions { get; }

		/// <summary>
		/// Gets an instance of the IDidactiqueCJRepository
		/// </summary>
		IDidactiqueCJRepository DidactiqueCJ { get; }

		/// <summary>
		/// Gets an instance of the IDidactiqueFPRepository
		/// </summary>
		IDidactiqueFPRepository DidactiqueFP { get; }

		/// <summary>
		/// Gets an instance of the IDisciplineRepository
		/// </summary>
		IDisciplineRepository Discipline { get; }

		/// <summary>
		/// Gets an instance of the IDispositifSocialRepository
		/// </summary>
		IDispositifSocialRepository DispositifSocial { get; }

		/// <summary>
		/// Gets an instance of the IDomaineActiviteRepository
		/// </summary>
		IDomaineActiviteRepository DomaineActivite { get; }

		/// <summary>
		/// Gets an instance of the IEleveRepository
		/// </summary>
		IEleveRepository Eleve { get; }

		/// <summary>
		/// Gets an instance of the IEmploiTempsRepository
		/// </summary>
		IEmploiTempsRepository EmploiTemps { get; }

		/// <summary>
		/// Gets an instance of the IEmploiTempsSeanceRepository
		/// </summary>
		IEmploiTempsSeanceRepository EmploiTempsSeance { get; }

		/// <summary>
		/// Gets an instance of the IEvaluationEnvisageeRepository
		/// </summary>
		IEvaluationEnvisageeRepository EvaluationEnvisagee { get; }

		/// <summary>
		/// Gets an instance of the IFichePreparatoireRepository
		/// </summary>
		IFichePreparatoireRepository FichePreparatoire { get; }

		/// <summary>
		/// Gets an instance of the IInformationComplementaireRepository
		/// </summary>
		IInformationComplementaireRepository InformationComplementaire { get; }

		/// <summary>
		/// Gets an instance of the IJourSemaineRepository
		/// </summary>
		IJourSemaineRepository JourSemaine { get; }

		/// <summary>
		/// Gets an instance of the ILink_CJ_DidactiqueCJRepository
		/// </summary>
		ILink_CJ_DidactiqueCJRepository Link_CJ_DidactiqueCJ { get; }

		/// <summary>
		/// Gets an instance of the ILink_FP_DidactiqueFPRepository
		/// </summary>
		ILink_FP_DidactiqueFPRepository Link_FP_DidactiqueFP { get; }

		/// <summary>
		/// Gets an instance of the INiveauRepository
		/// </summary>
		INiveauRepository Niveau { get; }

		/// <summary>
		/// Gets an instance of the IPhaseApprentissageRepository
		/// </summary>
		IPhaseApprentissageRepository PhaseApprentissage { get; }

		/// <summary>
		/// Gets an instance of the IVersionRepository
		/// </summary>
		IVersionRepository Version { get; }

		/// <summary>
		/// Starts a SqlCeTransaction using the global SQL CE Conection instance
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction BeginTransaction();

		/// <summary>
		/// Commits the transaction
		/// </summary>
		void Commit();

		/// <summary>
		/// Rollbacks the transaction
		/// </summary>
		void Rollback();
	}
	#endregion

	#region DataRepository

	/// <summary>
	/// Main Data Repository implementation containing all default table repositories implementations
	/// </summary>
	public partial class DataRepository : IDataRepository
	{
		private System.Data.SqlServerCe.SqlCeTransaction transaction = null;

		/// <summary>
		/// Creates an instance of DataRepository
		/// </summary>
		public DataRepository()
		{
			ApplicationException = new ApplicationExceptionRepository();
			CahierJournal = new CahierJournalRepository();
			Conditions = new ConditionsRepository();
			DidactiqueCJ = new DidactiqueCJRepository();
			DidactiqueFP = new DidactiqueFPRepository();
			Discipline = new DisciplineRepository();
			DispositifSocial = new DispositifSocialRepository();
			DomaineActivite = new DomaineActiviteRepository();
			Eleve = new EleveRepository();
			EmploiTemps = new EmploiTempsRepository();
			EmploiTempsSeance = new EmploiTempsSeanceRepository();
			EvaluationEnvisagee = new EvaluationEnvisageeRepository();
			FichePreparatoire = new FichePreparatoireRepository();
			InformationComplementaire = new InformationComplementaireRepository();
			JourSemaine = new JourSemaineRepository();
			Link_CJ_DidactiqueCJ = new Link_CJ_DidactiqueCJRepository();
			Link_FP_DidactiqueFP = new Link_FP_DidactiqueFPRepository();
			Niveau = new NiveauRepository();
			PhaseApprentissage = new PhaseApprentissageRepository();
			Version = new VersionRepository();
		}

		/// <summary>
		/// Creates an instance of DataRepository
		/// </summary>
		/// <param name="connectionString">Connection string to use</param>
		public DataRepository(string connectionString) : this()
		{
			EntityBase.ConnectionString = connectionString;
		}

		/// <summary>
		/// Gets an instance of the IApplicationExceptionRepository
		/// </summary>
		public IApplicationExceptionRepository ApplicationException { get; private set; }

		/// <summary>
		/// Gets an instance of the ICahierJournalRepository
		/// </summary>
		public ICahierJournalRepository CahierJournal { get; private set; }

		/// <summary>
		/// Gets an instance of the IConditionsRepository
		/// </summary>
		public IConditionsRepository Conditions { get; private set; }

		/// <summary>
		/// Gets an instance of the IDidactiqueCJRepository
		/// </summary>
		public IDidactiqueCJRepository DidactiqueCJ { get; private set; }

		/// <summary>
		/// Gets an instance of the IDidactiqueFPRepository
		/// </summary>
		public IDidactiqueFPRepository DidactiqueFP { get; private set; }

		/// <summary>
		/// Gets an instance of the IDisciplineRepository
		/// </summary>
		public IDisciplineRepository Discipline { get; private set; }

		/// <summary>
		/// Gets an instance of the IDispositifSocialRepository
		/// </summary>
		public IDispositifSocialRepository DispositifSocial { get; private set; }

		/// <summary>
		/// Gets an instance of the IDomaineActiviteRepository
		/// </summary>
		public IDomaineActiviteRepository DomaineActivite { get; private set; }

		/// <summary>
		/// Gets an instance of the IEleveRepository
		/// </summary>
		public IEleveRepository Eleve { get; private set; }

		/// <summary>
		/// Gets an instance of the IEmploiTempsRepository
		/// </summary>
		public IEmploiTempsRepository EmploiTemps { get; private set; }

		/// <summary>
		/// Gets an instance of the IEmploiTempsSeanceRepository
		/// </summary>
		public IEmploiTempsSeanceRepository EmploiTempsSeance { get; private set; }

		/// <summary>
		/// Gets an instance of the IEvaluationEnvisageeRepository
		/// </summary>
		public IEvaluationEnvisageeRepository EvaluationEnvisagee { get; private set; }

		/// <summary>
		/// Gets an instance of the IFichePreparatoireRepository
		/// </summary>
		public IFichePreparatoireRepository FichePreparatoire { get; private set; }

		/// <summary>
		/// Gets an instance of the IInformationComplementaireRepository
		/// </summary>
		public IInformationComplementaireRepository InformationComplementaire { get; private set; }

		/// <summary>
		/// Gets an instance of the IJourSemaineRepository
		/// </summary>
		public IJourSemaineRepository JourSemaine { get; private set; }

		/// <summary>
		/// Gets an instance of the ILink_CJ_DidactiqueCJRepository
		/// </summary>
		public ILink_CJ_DidactiqueCJRepository Link_CJ_DidactiqueCJ { get; private set; }

		/// <summary>
		/// Gets an instance of the ILink_FP_DidactiqueFPRepository
		/// </summary>
		public ILink_FP_DidactiqueFPRepository Link_FP_DidactiqueFP { get; private set; }

		/// <summary>
		/// Gets an instance of the INiveauRepository
		/// </summary>
		public INiveauRepository Niveau { get; private set; }

		/// <summary>
		/// Gets an instance of the IPhaseApprentissageRepository
		/// </summary>
		public IPhaseApprentissageRepository PhaseApprentissage { get; private set; }

		/// <summary>
		/// Gets an instance of the IVersionRepository
		/// </summary>
		public IVersionRepository Version { get; private set; }

		/// <summary>
		/// Starts a SqlCeTransaction using the global SQL CE Conection instance
		/// </summary>
		public System.Data.SqlServerCe.SqlCeTransaction BeginTransaction()
		{
			if (transaction != null)
				throw new System.InvalidOperationException("A transaction has already been started. Only one transaction is allowed");
			transaction = EntityBase.Connection.BeginTransaction();
			ApplicationException.Transaction = transaction;
			CahierJournal.Transaction = transaction;
			Conditions.Transaction = transaction;
			DidactiqueCJ.Transaction = transaction;
			DidactiqueFP.Transaction = transaction;
			Discipline.Transaction = transaction;
			DispositifSocial.Transaction = transaction;
			DomaineActivite.Transaction = transaction;
			Eleve.Transaction = transaction;
			EmploiTemps.Transaction = transaction;
			EmploiTempsSeance.Transaction = transaction;
			EvaluationEnvisagee.Transaction = transaction;
			FichePreparatoire.Transaction = transaction;
			InformationComplementaire.Transaction = transaction;
			JourSemaine.Transaction = transaction;
			Link_CJ_DidactiqueCJ.Transaction = transaction;
			Link_FP_DidactiqueFP.Transaction = transaction;
			Niveau.Transaction = transaction;
			PhaseApprentissage.Transaction = transaction;
			Version.Transaction = transaction;
			return transaction;
		}

		/// <summary>
		/// Commits the transaction
		/// </summary>
		public void Commit()
		{
			if (transaction == null)
				throw new System.InvalidOperationException("No transaction has been started");
			transaction.Commit();
		}

		/// <summary>
		/// Rollbacks the transaction
		/// </summary>
		public void Rollback()
		{
			if (transaction == null)
				throw new System.InvalidOperationException("No transaction has been started");
			transaction.Rollback();
		}

		/// <summary>
		/// Releases the resources used. All uncommitted transactions are rolled back
		/// </summary>
		public void Dispose()
		{
			Dispose(true);
		}

		protected void Dispose(bool disposing)
		{
			if (disposed) return;
			if (disposing)
			{
				if (transaction != null)
				{
					transaction.Dispose();
					transaction = null;
				}
			}
			disposed = true;
		}

		private bool disposed = false;

		~DataRepository()
		{
			Dispose(false);
		}

	}

	#endregion

	#region IApplicationException Repository

	/// <summary>
	/// Represents the ApplicationException repository
	/// </summary>
	public partial interface IApplicationExceptionRepository : IRepository<ApplicationException>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<ApplicationException> SelectById(System.Int64? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<ApplicationException> SelectById(System.Int64? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by Message
		/// </summary>
		/// <param name="Message">Message value</param>
		System.Collections.Generic.List<ApplicationException> SelectByMessage(System.String Message);

		/// <summary>
		/// Retrieves the first set of items specified by count by Message
		/// </summary>
		/// <param name="Message">Message value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<ApplicationException> SelectByMessage(System.String Message, int count);

		/// <summary>
		/// Retrieves a collection of items by StackTrace
		/// </summary>
		/// <param name="StackTrace">StackTrace value</param>
		System.Collections.Generic.List<ApplicationException> SelectByStackTrace(System.String StackTrace);

		/// <summary>
		/// Retrieves the first set of items specified by count by StackTrace
		/// </summary>
		/// <param name="StackTrace">StackTrace value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<ApplicationException> SelectByStackTrace(System.String StackTrace, int count);

		/// <summary>
		/// Retrieves a collection of items by Method
		/// </summary>
		/// <param name="Method">Method value</param>
		System.Collections.Generic.List<ApplicationException> SelectByMethod(System.String Method);

		/// <summary>
		/// Retrieves the first set of items specified by count by Method
		/// </summary>
		/// <param name="Method">Method value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<ApplicationException> SelectByMethod(System.String Method, int count);

		/// <summary>
		/// Retrieves a collection of items by Parameters
		/// </summary>
		/// <param name="Parameters">Parameters value</param>
		System.Collections.Generic.List<ApplicationException> SelectByParameters(System.String Parameters);

		/// <summary>
		/// Retrieves the first set of items specified by count by Parameters
		/// </summary>
		/// <param name="Parameters">Parameters value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<ApplicationException> SelectByParameters(System.String Parameters, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int64? Id);

		/// <summary>
		/// Delete records by Message
		/// </summary>
		/// <param name="Message">Message value</param>
		int DeleteByMessage(System.String Message);

		/// <summary>
		/// Delete records by StackTrace
		/// </summary>
		/// <param name="StackTrace">StackTrace value</param>
		int DeleteByStackTrace(System.String StackTrace);

		/// <summary>
		/// Delete records by Method
		/// </summary>
		/// <param name="Method">Method value</param>
		int DeleteByMethod(System.String Method);

		/// <summary>
		/// Delete records by Parameters
		/// </summary>
		/// <param name="Parameters">Parameters value</param>
		int DeleteByParameters(System.String Parameters);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.String Message, System.String StackTrace, System.String Method, System.String Parameters);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Id, System.String Message, System.String StackTrace, System.String Method, System.String Parameters);
	}

	#endregion

	#region ApplicationException Repository

	/// <summary>
	/// Default IApplicationExceptionRepository implementation 
	/// </summary>
	public partial class ApplicationExceptionRepository : IApplicationExceptionRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<ApplicationException> ToList()
		{
			var list = new System.Collections.Generic.List<ApplicationException>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM ApplicationException";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new ApplicationException();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Message = (reader.IsDBNull(1) ? null : reader["Message"] as System.String);
						item.StackTrace = (reader.IsDBNull(2) ? null : reader["StackTrace"] as System.String);
						item.Method = (reader.IsDBNull(3) ? null : reader["Method"] as System.String);
						item.Parameters = (reader.IsDBNull(4) ? null : reader["Parameters"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public ApplicationException[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<ApplicationException> ToList(int count)
		{
			var list = new System.Collections.Generic.List<ApplicationException>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM ApplicationException", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new ApplicationException();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Message = (reader.IsDBNull(1) ? null : reader["Message"] as System.String);
						item.StackTrace = (reader.IsDBNull(2) ? null : reader["StackTrace"] as System.String);
						item.Method = (reader.IsDBNull(3) ? null : reader["Method"] as System.String);
						item.Parameters = (reader.IsDBNull(4) ? null : reader["Parameters"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public ApplicationException[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<ApplicationException> SelectById(System.Int64? Id)
		{
			var list = new System.Collections.Generic.List<ApplicationException>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM ApplicationException WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM ApplicationException WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new ApplicationException();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Message = (reader.IsDBNull(1) ? null : reader["Message"] as System.String);
						item.StackTrace = (reader.IsDBNull(2) ? null : reader["StackTrace"] as System.String);
						item.Method = (reader.IsDBNull(3) ? null : reader["Method"] as System.String);
						item.Parameters = (reader.IsDBNull(4) ? null : reader["Parameters"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Message=?

		/// <summary>
		/// Retrieves a collection of items by Message
		/// </summary>
		/// <param name="Message">Message value</param>
		public System.Collections.Generic.List<ApplicationException> SelectByMessage(System.String Message)
		{
			var list = new System.Collections.Generic.List<ApplicationException>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Message != null)
				{
					command.CommandText = "SELECT * FROM ApplicationException WHERE Message=@Message";
					command.Parameters.Add("@Message", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Message"].Value = Message != null ? (object)Message : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM ApplicationException WHERE Message IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new ApplicationException();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Message = (reader.IsDBNull(1) ? null : reader["Message"] as System.String);
						item.StackTrace = (reader.IsDBNull(2) ? null : reader["StackTrace"] as System.String);
						item.Method = (reader.IsDBNull(3) ? null : reader["Method"] as System.String);
						item.Parameters = (reader.IsDBNull(4) ? null : reader["Parameters"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE StackTrace=?

		/// <summary>
		/// Retrieves a collection of items by StackTrace
		/// </summary>
		/// <param name="StackTrace">StackTrace value</param>
		public System.Collections.Generic.List<ApplicationException> SelectByStackTrace(System.String StackTrace)
		{
			var list = new System.Collections.Generic.List<ApplicationException>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (StackTrace != null)
				{
					command.CommandText = "SELECT * FROM ApplicationException WHERE StackTrace=@StackTrace";
					command.Parameters.Add("@StackTrace", System.Data.SqlDbType.NVarChar);
					command.Parameters["@StackTrace"].Value = StackTrace != null ? (object)StackTrace : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM ApplicationException WHERE StackTrace IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new ApplicationException();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Message = (reader.IsDBNull(1) ? null : reader["Message"] as System.String);
						item.StackTrace = (reader.IsDBNull(2) ? null : reader["StackTrace"] as System.String);
						item.Method = (reader.IsDBNull(3) ? null : reader["Method"] as System.String);
						item.Parameters = (reader.IsDBNull(4) ? null : reader["Parameters"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Method=?

		/// <summary>
		/// Retrieves a collection of items by Method
		/// </summary>
		/// <param name="Method">Method value</param>
		public System.Collections.Generic.List<ApplicationException> SelectByMethod(System.String Method)
		{
			var list = new System.Collections.Generic.List<ApplicationException>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Method != null)
				{
					command.CommandText = "SELECT * FROM ApplicationException WHERE Method=@Method";
					command.Parameters.Add("@Method", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Method"].Value = Method != null ? (object)Method : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM ApplicationException WHERE Method IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new ApplicationException();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Message = (reader.IsDBNull(1) ? null : reader["Message"] as System.String);
						item.StackTrace = (reader.IsDBNull(2) ? null : reader["StackTrace"] as System.String);
						item.Method = (reader.IsDBNull(3) ? null : reader["Method"] as System.String);
						item.Parameters = (reader.IsDBNull(4) ? null : reader["Parameters"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Parameters=?

		/// <summary>
		/// Retrieves a collection of items by Parameters
		/// </summary>
		/// <param name="Parameters">Parameters value</param>
		public System.Collections.Generic.List<ApplicationException> SelectByParameters(System.String Parameters)
		{
			var list = new System.Collections.Generic.List<ApplicationException>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Parameters != null)
				{
					command.CommandText = "SELECT * FROM ApplicationException WHERE Parameters=@Parameters";
					command.Parameters.Add("@Parameters", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Parameters"].Value = Parameters != null ? (object)Parameters : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM ApplicationException WHERE Parameters IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new ApplicationException();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Message = (reader.IsDBNull(1) ? null : reader["Message"] as System.String);
						item.StackTrace = (reader.IsDBNull(2) ? null : reader["StackTrace"] as System.String);
						item.Method = (reader.IsDBNull(3) ? null : reader["Method"] as System.String);
						item.Parameters = (reader.IsDBNull(4) ? null : reader["Parameters"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<ApplicationException> SelectById(System.Int64? Id, int count)
		{
			var list = new System.Collections.Generic.List<ApplicationException>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM ApplicationException WHERE Id=@Id";					command.CommandText = "SELECT * FROM ApplicationException WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM ApplicationException WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new ApplicationException();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Message = (reader.IsDBNull(1) ? null : reader["Message"] as System.String);
						item.StackTrace = (reader.IsDBNull(2) ? null : reader["StackTrace"] as System.String);
						item.Method = (reader.IsDBNull(3) ? null : reader["Method"] as System.String);
						item.Parameters = (reader.IsDBNull(4) ? null : reader["Parameters"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Message=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Message
		/// </summary>
		/// <param name="Message">Message value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<ApplicationException> SelectByMessage(System.String Message, int count)
		{
			var list = new System.Collections.Generic.List<ApplicationException>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Message != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM ApplicationException WHERE Message=@Message";					command.CommandText = "SELECT * FROM ApplicationException WHERE Message=@Message";
				command.Parameters.Add("@Message", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Message"].Value = Message != null ? (object)Message : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM ApplicationException WHERE Message IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new ApplicationException();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Message = (reader.IsDBNull(1) ? null : reader["Message"] as System.String);
						item.StackTrace = (reader.IsDBNull(2) ? null : reader["StackTrace"] as System.String);
						item.Method = (reader.IsDBNull(3) ? null : reader["Method"] as System.String);
						item.Parameters = (reader.IsDBNull(4) ? null : reader["Parameters"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE StackTrace=?

		/// <summary>
		/// Retrieves the first set of items specified by count by StackTrace
		/// </summary>
		/// <param name="StackTrace">StackTrace value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<ApplicationException> SelectByStackTrace(System.String StackTrace, int count)
		{
			var list = new System.Collections.Generic.List<ApplicationException>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (StackTrace != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM ApplicationException WHERE StackTrace=@StackTrace";					command.CommandText = "SELECT * FROM ApplicationException WHERE StackTrace=@StackTrace";
				command.Parameters.Add("@StackTrace", System.Data.SqlDbType.NVarChar);
				command.Parameters["@StackTrace"].Value = StackTrace != null ? (object)StackTrace : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM ApplicationException WHERE StackTrace IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new ApplicationException();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Message = (reader.IsDBNull(1) ? null : reader["Message"] as System.String);
						item.StackTrace = (reader.IsDBNull(2) ? null : reader["StackTrace"] as System.String);
						item.Method = (reader.IsDBNull(3) ? null : reader["Method"] as System.String);
						item.Parameters = (reader.IsDBNull(4) ? null : reader["Parameters"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Method=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Method
		/// </summary>
		/// <param name="Method">Method value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<ApplicationException> SelectByMethod(System.String Method, int count)
		{
			var list = new System.Collections.Generic.List<ApplicationException>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Method != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM ApplicationException WHERE Method=@Method";					command.CommandText = "SELECT * FROM ApplicationException WHERE Method=@Method";
				command.Parameters.Add("@Method", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Method"].Value = Method != null ? (object)Method : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM ApplicationException WHERE Method IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new ApplicationException();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Message = (reader.IsDBNull(1) ? null : reader["Message"] as System.String);
						item.StackTrace = (reader.IsDBNull(2) ? null : reader["StackTrace"] as System.String);
						item.Method = (reader.IsDBNull(3) ? null : reader["Method"] as System.String);
						item.Parameters = (reader.IsDBNull(4) ? null : reader["Parameters"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Parameters=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Parameters
		/// </summary>
		/// <param name="Parameters">Parameters value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<ApplicationException> SelectByParameters(System.String Parameters, int count)
		{
			var list = new System.Collections.Generic.List<ApplicationException>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Parameters != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM ApplicationException WHERE Parameters=@Parameters";					command.CommandText = "SELECT * FROM ApplicationException WHERE Parameters=@Parameters";
				command.Parameters.Add("@Parameters", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Parameters"].Value = Parameters != null ? (object)Parameters : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM ApplicationException WHERE Parameters IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new ApplicationException();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Message = (reader.IsDBNull(1) ? null : reader["Message"] as System.String);
						item.StackTrace = (reader.IsDBNull(2) ? null : reader["StackTrace"] as System.String);
						item.Method = (reader.IsDBNull(3) ? null : reader["Method"] as System.String);
						item.Parameters = (reader.IsDBNull(4) ? null : reader["Parameters"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [ApplicationException]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(ApplicationException item)
		{
			Create(item.Id, item.Message, item.StackTrace, item.Method, item.Parameters);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="Message">Message value</param>
		/// <param name="StackTrace">StackTrace value</param>
		/// <param name="Method">Method value</param>
		/// <param name="Parameters">Parameters value</param>
		public void Create(System.String Message, System.String StackTrace, System.String Method, System.String Parameters)
		{
			if (Message != null && Message.Length > 500)
				throw new System.ArgumentException("Max length for Message is 500");
			if (StackTrace != null && StackTrace.Length > 500)
				throw new System.ArgumentException("Max length for StackTrace is 500");
			if (Method != null && Method.Length > 100)
				throw new System.ArgumentException("Max length for Method is 100");
			if (Parameters != null && Parameters.Length > 500)
				throw new System.ArgumentException("Max length for Parameters is 500");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [ApplicationException] (Message, StackTrace, Method, Parameters)  VALUES (@Message, @StackTrace, @Method, @Parameters)";

				command.Parameters.Add("@Message", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Message"].Value = Message != null ? (object)Message : System.DBNull.Value;
				command.Parameters.Add("@StackTrace", System.Data.SqlDbType.NVarChar);
				command.Parameters["@StackTrace"].Value = StackTrace != null ? (object)StackTrace : System.DBNull.Value;
				command.Parameters.Add("@Method", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Method"].Value = Method != null ? (object)Method : System.DBNull.Value;
				command.Parameters.Add("@Parameters", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Parameters"].Value = Parameters != null ? (object)Parameters : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [ApplicationException] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="Message">Message value</param>
		/// <param name="StackTrace">StackTrace value</param>
		/// <param name="Method">Method value</param>
		/// <param name="Parameters">Parameters value</param>
		public void Create(System.Int64? Id, System.String Message, System.String StackTrace, System.String Method, System.String Parameters)
		{
			if (Message != null && Message.Length > ApplicationException.Message_Max_Length)
				throw new System.ArgumentException("Max length for Message is 500");
			if (StackTrace != null && StackTrace.Length > ApplicationException.StackTrace_Max_Length)
				throw new System.ArgumentException("Max length for StackTrace is 500");
			if (Method != null && Method.Length > ApplicationException.Method_Max_Length)
				throw new System.ArgumentException("Max length for Method is 100");
			if (Parameters != null && Parameters.Length > ApplicationException.Parameters_Max_Length)
				throw new System.ArgumentException("Max length for Parameters is 500");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [ApplicationException] (Id, Message, StackTrace, Method, Parameters)  VALUES (@Id, @Message, @StackTrace, @Method, @Parameters)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@Message", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Message"].Value = Message != null ? (object)Message : System.DBNull.Value;
				command.Parameters.Add("@StackTrace", System.Data.SqlDbType.NVarChar);
				command.Parameters["@StackTrace"].Value = StackTrace != null ? (object)StackTrace : System.DBNull.Value;
				command.Parameters.Add("@Method", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Method"].Value = Method != null ? (object)Method : System.DBNull.Value;
				command.Parameters.Add("@Parameters", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Parameters"].Value = Parameters != null ? (object)Parameters : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<ApplicationException> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "ApplicationException";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(0, item.Id);
						record.SetValue(1, item.Message);
						record.SetValue(2, item.StackTrace);
						record.SetValue(3, item.Method);
						record.SetValue(4, item.Parameters);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(ApplicationException item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [ApplicationException] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<ApplicationException> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [ApplicationException] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int64? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [ApplicationException] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Message

		/// <summary>
		/// Delete records by Message
		/// </summary>
		/// <param name="Message">Message value</param>
		public int DeleteByMessage(System.String Message)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [ApplicationException] WHERE Message=@Message";
				command.Parameters.Add("@Message", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Message"].Value = Message != null ? (object)Message : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY StackTrace

		/// <summary>
		/// Delete records by StackTrace
		/// </summary>
		/// <param name="StackTrace">StackTrace value</param>
		public int DeleteByStackTrace(System.String StackTrace)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [ApplicationException] WHERE StackTrace=@StackTrace";
				command.Parameters.Add("@StackTrace", System.Data.SqlDbType.NVarChar);
				command.Parameters["@StackTrace"].Value = StackTrace != null ? (object)StackTrace : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Method

		/// <summary>
		/// Delete records by Method
		/// </summary>
		/// <param name="Method">Method value</param>
		public int DeleteByMethod(System.String Method)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [ApplicationException] WHERE Method=@Method";
				command.Parameters.Add("@Method", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Method"].Value = Method != null ? (object)Method : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Parameters

		/// <summary>
		/// Delete records by Parameters
		/// </summary>
		/// <param name="Parameters">Parameters value</param>
		public int DeleteByParameters(System.String Parameters)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [ApplicationException] WHERE Parameters=@Parameters";
				command.Parameters.Add("@Parameters", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Parameters"].Value = Parameters != null ? (object)Parameters : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [ApplicationException]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(ApplicationException item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [ApplicationException] SET Message = @Message, StackTrace = @StackTrace, Method = @Method, Parameters = @Parameters WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@Message", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Message"].Value = item.Message != null ? (object)item.Message : System.DBNull.Value;
				command.Parameters.Add("@StackTrace", System.Data.SqlDbType.NVarChar);
				command.Parameters["@StackTrace"].Value = item.StackTrace != null ? (object)item.StackTrace : System.DBNull.Value;
				command.Parameters.Add("@Method", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Method"].Value = item.Method != null ? (object)item.Method : System.DBNull.Value;
				command.Parameters.Add("@Parameters", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Parameters"].Value = item.Parameters != null ? (object)item.Parameters : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<ApplicationException> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [ApplicationException] SET Message = @Message, StackTrace = @StackTrace, Method = @Method, Parameters = @Parameters WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Message", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@StackTrace", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Method", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Parameters", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@Message"].Value = item.Message != null ? (object)item.Message : System.DBNull.Value;
					command.Parameters["@StackTrace"].Value = item.StackTrace != null ? (object)item.StackTrace : System.DBNull.Value;
					command.Parameters["@Method"].Value = item.Method != null ? (object)item.Method : System.DBNull.Value;
					command.Parameters["@Parameters"].Value = item.Parameters != null ? (object)item.Parameters : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [ApplicationException]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM ApplicationException";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region ICahierJournal Repository

	/// <summary>
	/// Represents the CahierJournal repository
	/// </summary>
	public partial interface ICahierJournalRepository : IRepository<CahierJournal>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<CahierJournal> SelectById(System.Int64? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<CahierJournal> SelectById(System.Int64? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by DateDebut
		/// </summary>
		/// <param name="DateDebut">DateDebut value</param>
		System.Collections.Generic.List<CahierJournal> SelectByDateDebut(System.DateTime? DateDebut);

		/// <summary>
		/// Retrieves the first set of items specified by count by DateDebut
		/// </summary>
		/// <param name="DateDebut">DateDebut value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<CahierJournal> SelectByDateDebut(System.DateTime? DateDebut, int count);

		/// <summary>
		/// Retrieves a collection of items by DateFin
		/// </summary>
		/// <param name="DateFin">DateFin value</param>
		System.Collections.Generic.List<CahierJournal> SelectByDateFin(System.DateTime? DateFin);

		/// <summary>
		/// Retrieves the first set of items specified by count by DateFin
		/// </summary>
		/// <param name="DateFin">DateFin value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<CahierJournal> SelectByDateFin(System.DateTime? DateFin, int count);

		/// <summary>
		/// Retrieves a collection of items by DateJour
		/// </summary>
		/// <param name="DateJour">DateJour value</param>
		System.Collections.Generic.List<CahierJournal> SelectByDateJour(System.DateTime? DateJour);

		/// <summary>
		/// Retrieves the first set of items specified by count by DateJour
		/// </summary>
		/// <param name="DateJour">DateJour value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<CahierJournal> SelectByDateJour(System.DateTime? DateJour, int count);

		/// <summary>
		/// Retrieves a collection of items by TrancheHoraire
		/// </summary>
		/// <param name="TrancheHoraire">TrancheHoraire value</param>
		System.Collections.Generic.List<CahierJournal> SelectByTrancheHoraire(System.String TrancheHoraire);

		/// <summary>
		/// Retrieves the first set of items specified by count by TrancheHoraire
		/// </summary>
		/// <param name="TrancheHoraire">TrancheHoraire value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<CahierJournal> SelectByTrancheHoraire(System.String TrancheHoraire, int count);

		/// <summary>
		/// Retrieves a collection of items by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		System.Collections.Generic.List<CahierJournal> SelectByDiscipline(System.Int64? Discipline);

		/// <summary>
		/// Retrieves the first set of items specified by count by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<CahierJournal> SelectByDiscipline(System.Int64? Discipline, int count);

		/// <summary>
		/// Retrieves a collection of items by NumeroSeance
		/// </summary>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		System.Collections.Generic.List<CahierJournal> SelectByNumeroSeance(System.Int32? NumeroSeance);

		/// <summary>
		/// Retrieves the first set of items specified by count by NumeroSeance
		/// </summary>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<CahierJournal> SelectByNumeroSeance(System.Int32? NumeroSeance, int count);

		/// <summary>
		/// Retrieves a collection of items by Objectifs
		/// </summary>
		/// <param name="Objectifs">Objectifs value</param>
		System.Collections.Generic.List<CahierJournal> SelectByObjectifs(System.String Objectifs);

		/// <summary>
		/// Retrieves the first set of items specified by count by Objectifs
		/// </summary>
		/// <param name="Objectifs">Objectifs value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<CahierJournal> SelectByObjectifs(System.String Objectifs, int count);

		/// <summary>
		/// Retrieves a collection of items by DomaineActivite
		/// </summary>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		System.Collections.Generic.List<CahierJournal> SelectByDomaineActivite(System.Int64? DomaineActivite);

		/// <summary>
		/// Retrieves the first set of items specified by count by DomaineActivite
		/// </summary>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<CahierJournal> SelectByDomaineActivite(System.Int64? DomaineActivite, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int64? Id);

		/// <summary>
		/// Delete records by DateDebut
		/// </summary>
		/// <param name="DateDebut">DateDebut value</param>
		int DeleteByDateDebut(System.DateTime? DateDebut);

		/// <summary>
		/// Delete records by DateFin
		/// </summary>
		/// <param name="DateFin">DateFin value</param>
		int DeleteByDateFin(System.DateTime? DateFin);

		/// <summary>
		/// Delete records by DateJour
		/// </summary>
		/// <param name="DateJour">DateJour value</param>
		int DeleteByDateJour(System.DateTime? DateJour);

		/// <summary>
		/// Delete records by TrancheHoraire
		/// </summary>
		/// <param name="TrancheHoraire">TrancheHoraire value</param>
		int DeleteByTrancheHoraire(System.String TrancheHoraire);

		/// <summary>
		/// Delete records by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		int DeleteByDiscipline(System.Int64? Discipline);

		/// <summary>
		/// Delete records by NumeroSeance
		/// </summary>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		int DeleteByNumeroSeance(System.Int32? NumeroSeance);

		/// <summary>
		/// Delete records by Objectifs
		/// </summary>
		/// <param name="Objectifs">Objectifs value</param>
		int DeleteByObjectifs(System.String Objectifs);

		/// <summary>
		/// Delete records by DomaineActivite
		/// </summary>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		int DeleteByDomaineActivite(System.Int64? DomaineActivite);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.DateTime? DateDebut, System.DateTime? DateFin, System.DateTime? DateJour, System.String TrancheHoraire, System.Int64? Discipline, System.Int32? NumeroSeance, System.String Objectifs, System.Int64? DomaineActivite);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Id, System.DateTime? DateDebut, System.DateTime? DateFin, System.DateTime? DateJour, System.String TrancheHoraire, System.Int64? Discipline, System.Int32? NumeroSeance, System.String Objectifs, System.Int64? DomaineActivite);
	}

	#endregion

	#region CahierJournal Repository

	/// <summary>
	/// Default ICahierJournalRepository implementation 
	/// </summary>
	public partial class CahierJournalRepository : ICahierJournalRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<CahierJournal> ToList()
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM CahierJournal";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public CahierJournal[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<CahierJournal> ToList(int count)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM CahierJournal", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public CahierJournal[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<CahierJournal> SelectById(System.Int64? Id)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM CahierJournal WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM CahierJournal WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE DateDebut=?

		/// <summary>
		/// Retrieves a collection of items by DateDebut
		/// </summary>
		/// <param name="DateDebut">DateDebut value</param>
		public System.Collections.Generic.List<CahierJournal> SelectByDateDebut(System.DateTime? DateDebut)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (DateDebut != null)
				{
					command.CommandText = "SELECT * FROM CahierJournal WHERE DateDebut=@DateDebut";
					command.Parameters.Add("@DateDebut", System.Data.SqlDbType.DateTime);
					command.Parameters["@DateDebut"].Value = DateDebut != null ? (object)DateDebut : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM CahierJournal WHERE DateDebut IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE DateFin=?

		/// <summary>
		/// Retrieves a collection of items by DateFin
		/// </summary>
		/// <param name="DateFin">DateFin value</param>
		public System.Collections.Generic.List<CahierJournal> SelectByDateFin(System.DateTime? DateFin)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (DateFin != null)
				{
					command.CommandText = "SELECT * FROM CahierJournal WHERE DateFin=@DateFin";
					command.Parameters.Add("@DateFin", System.Data.SqlDbType.DateTime);
					command.Parameters["@DateFin"].Value = DateFin != null ? (object)DateFin : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM CahierJournal WHERE DateFin IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE DateJour=?

		/// <summary>
		/// Retrieves a collection of items by DateJour
		/// </summary>
		/// <param name="DateJour">DateJour value</param>
		public System.Collections.Generic.List<CahierJournal> SelectByDateJour(System.DateTime? DateJour)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (DateJour != null)
				{
					command.CommandText = "SELECT * FROM CahierJournal WHERE DateJour=@DateJour";
					command.Parameters.Add("@DateJour", System.Data.SqlDbType.DateTime);
					command.Parameters["@DateJour"].Value = DateJour != null ? (object)DateJour : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM CahierJournal WHERE DateJour IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE TrancheHoraire=?

		/// <summary>
		/// Retrieves a collection of items by TrancheHoraire
		/// </summary>
		/// <param name="TrancheHoraire">TrancheHoraire value</param>
		public System.Collections.Generic.List<CahierJournal> SelectByTrancheHoraire(System.String TrancheHoraire)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (TrancheHoraire != null)
				{
					command.CommandText = "SELECT * FROM CahierJournal WHERE TrancheHoraire=@TrancheHoraire";
					command.Parameters.Add("@TrancheHoraire", System.Data.SqlDbType.NVarChar);
					command.Parameters["@TrancheHoraire"].Value = TrancheHoraire != null ? (object)TrancheHoraire : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM CahierJournal WHERE TrancheHoraire IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Discipline=?

		/// <summary>
		/// Retrieves a collection of items by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		public System.Collections.Generic.List<CahierJournal> SelectByDiscipline(System.Int64? Discipline)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Discipline != null)
				{
					command.CommandText = "SELECT * FROM CahierJournal WHERE Discipline=@Discipline";
					command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
					command.Parameters["@Discipline"].Value = Discipline != null ? (object)Discipline : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM CahierJournal WHERE Discipline IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE NumeroSeance=?

		/// <summary>
		/// Retrieves a collection of items by NumeroSeance
		/// </summary>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		public System.Collections.Generic.List<CahierJournal> SelectByNumeroSeance(System.Int32? NumeroSeance)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (NumeroSeance != null)
				{
					command.CommandText = "SELECT * FROM CahierJournal WHERE NumeroSeance=@NumeroSeance";
					command.Parameters.Add("@NumeroSeance", System.Data.SqlDbType.Int);
					command.Parameters["@NumeroSeance"].Value = NumeroSeance != null ? (object)NumeroSeance : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM CahierJournal WHERE NumeroSeance IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Objectifs=?

		/// <summary>
		/// Retrieves a collection of items by Objectifs
		/// </summary>
		/// <param name="Objectifs">Objectifs value</param>
		public System.Collections.Generic.List<CahierJournal> SelectByObjectifs(System.String Objectifs)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Objectifs != null)
				{
					command.CommandText = "SELECT * FROM CahierJournal WHERE Objectifs=@Objectifs";
					command.Parameters.Add("@Objectifs", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Objectifs"].Value = Objectifs != null ? (object)Objectifs : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM CahierJournal WHERE Objectifs IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE DomaineActivite=?

		/// <summary>
		/// Retrieves a collection of items by DomaineActivite
		/// </summary>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		public System.Collections.Generic.List<CahierJournal> SelectByDomaineActivite(System.Int64? DomaineActivite)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (DomaineActivite != null)
				{
					command.CommandText = "SELECT * FROM CahierJournal WHERE DomaineActivite=@DomaineActivite";
					command.Parameters.Add("@DomaineActivite", System.Data.SqlDbType.BigInt);
					command.Parameters["@DomaineActivite"].Value = DomaineActivite != null ? (object)DomaineActivite : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM CahierJournal WHERE DomaineActivite IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<CahierJournal> SelectById(System.Int64? Id, int count)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE Id=@Id";					command.CommandText = "SELECT * FROM CahierJournal WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE DateDebut=?

		/// <summary>
		/// Retrieves the first set of items specified by count by DateDebut
		/// </summary>
		/// <param name="DateDebut">DateDebut value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<CahierJournal> SelectByDateDebut(System.DateTime? DateDebut, int count)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (DateDebut != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE DateDebut=@DateDebut";					command.CommandText = "SELECT * FROM CahierJournal WHERE DateDebut=@DateDebut";
				command.Parameters.Add("@DateDebut", System.Data.SqlDbType.DateTime);
				command.Parameters["@DateDebut"].Value = DateDebut != null ? (object)DateDebut : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE DateDebut IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE DateFin=?

		/// <summary>
		/// Retrieves the first set of items specified by count by DateFin
		/// </summary>
		/// <param name="DateFin">DateFin value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<CahierJournal> SelectByDateFin(System.DateTime? DateFin, int count)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (DateFin != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE DateFin=@DateFin";					command.CommandText = "SELECT * FROM CahierJournal WHERE DateFin=@DateFin";
				command.Parameters.Add("@DateFin", System.Data.SqlDbType.DateTime);
				command.Parameters["@DateFin"].Value = DateFin != null ? (object)DateFin : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE DateFin IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE DateJour=?

		/// <summary>
		/// Retrieves the first set of items specified by count by DateJour
		/// </summary>
		/// <param name="DateJour">DateJour value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<CahierJournal> SelectByDateJour(System.DateTime? DateJour, int count)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (DateJour != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE DateJour=@DateJour";					command.CommandText = "SELECT * FROM CahierJournal WHERE DateJour=@DateJour";
				command.Parameters.Add("@DateJour", System.Data.SqlDbType.DateTime);
				command.Parameters["@DateJour"].Value = DateJour != null ? (object)DateJour : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE DateJour IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE TrancheHoraire=?

		/// <summary>
		/// Retrieves the first set of items specified by count by TrancheHoraire
		/// </summary>
		/// <param name="TrancheHoraire">TrancheHoraire value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<CahierJournal> SelectByTrancheHoraire(System.String TrancheHoraire, int count)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (TrancheHoraire != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE TrancheHoraire=@TrancheHoraire";					command.CommandText = "SELECT * FROM CahierJournal WHERE TrancheHoraire=@TrancheHoraire";
				command.Parameters.Add("@TrancheHoraire", System.Data.SqlDbType.NVarChar);
				command.Parameters["@TrancheHoraire"].Value = TrancheHoraire != null ? (object)TrancheHoraire : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE TrancheHoraire IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Discipline=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<CahierJournal> SelectByDiscipline(System.Int64? Discipline, int count)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Discipline != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE Discipline=@Discipline";					command.CommandText = "SELECT * FROM CahierJournal WHERE Discipline=@Discipline";
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters["@Discipline"].Value = Discipline != null ? (object)Discipline : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE Discipline IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE NumeroSeance=?

		/// <summary>
		/// Retrieves the first set of items specified by count by NumeroSeance
		/// </summary>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<CahierJournal> SelectByNumeroSeance(System.Int32? NumeroSeance, int count)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (NumeroSeance != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE NumeroSeance=@NumeroSeance";					command.CommandText = "SELECT * FROM CahierJournal WHERE NumeroSeance=@NumeroSeance";
				command.Parameters.Add("@NumeroSeance", System.Data.SqlDbType.Int);
				command.Parameters["@NumeroSeance"].Value = NumeroSeance != null ? (object)NumeroSeance : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE NumeroSeance IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Objectifs=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Objectifs
		/// </summary>
		/// <param name="Objectifs">Objectifs value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<CahierJournal> SelectByObjectifs(System.String Objectifs, int count)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Objectifs != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE Objectifs=@Objectifs";					command.CommandText = "SELECT * FROM CahierJournal WHERE Objectifs=@Objectifs";
				command.Parameters.Add("@Objectifs", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Objectifs"].Value = Objectifs != null ? (object)Objectifs : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE Objectifs IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE DomaineActivite=?

		/// <summary>
		/// Retrieves the first set of items specified by count by DomaineActivite
		/// </summary>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<CahierJournal> SelectByDomaineActivite(System.Int64? DomaineActivite, int count)
		{
			var list = new System.Collections.Generic.List<CahierJournal>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (DomaineActivite != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE DomaineActivite=@DomaineActivite";					command.CommandText = "SELECT * FROM CahierJournal WHERE DomaineActivite=@DomaineActivite";
				command.Parameters.Add("@DomaineActivite", System.Data.SqlDbType.BigInt);
				command.Parameters["@DomaineActivite"].Value = DomaineActivite != null ? (object)DomaineActivite : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM CahierJournal WHERE DomaineActivite IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new CahierJournal();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.DateDebut = (System.DateTime?) (reader.IsDBNull(1) ? null : reader["DateDebut"]);
						item.DateFin = (System.DateTime?) (reader.IsDBNull(2) ? null : reader["DateFin"]);
						item.DateJour = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["DateJour"]);
						item.TrancheHoraire = (reader.IsDBNull(4) ? null : reader["TrancheHoraire"] as System.String);
						item.Discipline = (System.Int64?) (reader.IsDBNull(5) ? null : reader["Discipline"]);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(6) ? null : reader["NumeroSeance"]);
						item.Objectifs = (reader.IsDBNull(7) ? null : reader["Objectifs"] as System.String);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(8) ? null : reader["DomaineActivite"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [CahierJournal]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(CahierJournal item)
		{
			Create(item.DateDebut, item.DateFin, item.DateJour, item.TrancheHoraire, item.Discipline, item.NumeroSeance, item.Objectifs, item.DomaineActivite);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="DateDebut">DateDebut value</param>
		/// <param name="DateFin">DateFin value</param>
		/// <param name="DateJour">DateJour value</param>
		/// <param name="TrancheHoraire">TrancheHoraire value</param>
		/// <param name="Discipline">Discipline value</param>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		/// <param name="Objectifs">Objectifs value</param>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		public void Create(System.DateTime? DateDebut, System.DateTime? DateFin, System.DateTime? DateJour, System.String TrancheHoraire, System.Int64? Discipline, System.Int32? NumeroSeance, System.String Objectifs, System.Int64? DomaineActivite)
		{
			if (TrancheHoraire != null && TrancheHoraire.Length > 20)
				throw new System.ArgumentException("Max length for TrancheHoraire is 20");
			if (Objectifs != null && Objectifs.Length > 500)
				throw new System.ArgumentException("Max length for Objectifs is 500");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [CahierJournal] (DateDebut, DateFin, DateJour, TrancheHoraire, Discipline, NumeroSeance, Objectifs, DomaineActivite)  VALUES (@DateDebut, @DateFin, @DateJour, @TrancheHoraire, @Discipline, @NumeroSeance, @Objectifs, @DomaineActivite)";

				command.Parameters.Add("@DateDebut", System.Data.SqlDbType.DateTime);
				command.Parameters["@DateDebut"].Value = DateDebut != null ? (object)DateDebut : System.DBNull.Value;
				command.Parameters.Add("@DateFin", System.Data.SqlDbType.DateTime);
				command.Parameters["@DateFin"].Value = DateFin != null ? (object)DateFin : System.DBNull.Value;
				command.Parameters.Add("@DateJour", System.Data.SqlDbType.DateTime);
				command.Parameters["@DateJour"].Value = DateJour != null ? (object)DateJour : System.DBNull.Value;
				command.Parameters.Add("@TrancheHoraire", System.Data.SqlDbType.NVarChar);
				command.Parameters["@TrancheHoraire"].Value = TrancheHoraire != null ? (object)TrancheHoraire : System.DBNull.Value;
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters["@Discipline"].Value = Discipline != null ? (object)Discipline : System.DBNull.Value;
				command.Parameters.Add("@NumeroSeance", System.Data.SqlDbType.Int);
				command.Parameters["@NumeroSeance"].Value = NumeroSeance != null ? (object)NumeroSeance : System.DBNull.Value;
				command.Parameters.Add("@Objectifs", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Objectifs"].Value = Objectifs != null ? (object)Objectifs : System.DBNull.Value;
				command.Parameters.Add("@DomaineActivite", System.Data.SqlDbType.BigInt);
				command.Parameters["@DomaineActivite"].Value = DomaineActivite != null ? (object)DomaineActivite : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [CahierJournal] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="DateDebut">DateDebut value</param>
		/// <param name="DateFin">DateFin value</param>
		/// <param name="DateJour">DateJour value</param>
		/// <param name="TrancheHoraire">TrancheHoraire value</param>
		/// <param name="Discipline">Discipline value</param>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		/// <param name="Objectifs">Objectifs value</param>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		public void Create(System.Int64? Id, System.DateTime? DateDebut, System.DateTime? DateFin, System.DateTime? DateJour, System.String TrancheHoraire, System.Int64? Discipline, System.Int32? NumeroSeance, System.String Objectifs, System.Int64? DomaineActivite)
		{
			if (TrancheHoraire != null && TrancheHoraire.Length > CahierJournal.TrancheHoraire_Max_Length)
				throw new System.ArgumentException("Max length for TrancheHoraire is 20");
			if (Objectifs != null && Objectifs.Length > CahierJournal.Objectifs_Max_Length)
				throw new System.ArgumentException("Max length for Objectifs is 500");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [CahierJournal] (Id, DateDebut, DateFin, DateJour, TrancheHoraire, Discipline, NumeroSeance, Objectifs, DomaineActivite)  VALUES (@Id, @DateDebut, @DateFin, @DateJour, @TrancheHoraire, @Discipline, @NumeroSeance, @Objectifs, @DomaineActivite)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@DateDebut", System.Data.SqlDbType.DateTime);
				command.Parameters["@DateDebut"].Value = DateDebut != null ? (object)DateDebut : System.DBNull.Value;
				command.Parameters.Add("@DateFin", System.Data.SqlDbType.DateTime);
				command.Parameters["@DateFin"].Value = DateFin != null ? (object)DateFin : System.DBNull.Value;
				command.Parameters.Add("@DateJour", System.Data.SqlDbType.DateTime);
				command.Parameters["@DateJour"].Value = DateJour != null ? (object)DateJour : System.DBNull.Value;
				command.Parameters.Add("@TrancheHoraire", System.Data.SqlDbType.NVarChar);
				command.Parameters["@TrancheHoraire"].Value = TrancheHoraire != null ? (object)TrancheHoraire : System.DBNull.Value;
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters["@Discipline"].Value = Discipline != null ? (object)Discipline : System.DBNull.Value;
				command.Parameters.Add("@NumeroSeance", System.Data.SqlDbType.Int);
				command.Parameters["@NumeroSeance"].Value = NumeroSeance != null ? (object)NumeroSeance : System.DBNull.Value;
				command.Parameters.Add("@Objectifs", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Objectifs"].Value = Objectifs != null ? (object)Objectifs : System.DBNull.Value;
				command.Parameters.Add("@DomaineActivite", System.Data.SqlDbType.BigInt);
				command.Parameters["@DomaineActivite"].Value = DomaineActivite != null ? (object)DomaineActivite : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<CahierJournal> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "CahierJournal";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.DateDebut);
						record.SetValue(2, item.DateFin);
						record.SetValue(3, item.DateJour);
						record.SetValue(4, item.TrancheHoraire);
						record.SetValue(5, item.Discipline);
						record.SetValue(6, item.NumeroSeance);
						record.SetValue(7, item.Objectifs);
						record.SetValue(8, item.DomaineActivite);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(CahierJournal item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [CahierJournal] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<CahierJournal> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [CahierJournal] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int64? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [CahierJournal] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY DateDebut

		/// <summary>
		/// Delete records by DateDebut
		/// </summary>
		/// <param name="DateDebut">DateDebut value</param>
		public int DeleteByDateDebut(System.DateTime? DateDebut)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [CahierJournal] WHERE DateDebut=@DateDebut";
				command.Parameters.Add("@DateDebut", System.Data.SqlDbType.DateTime);
				command.Parameters["@DateDebut"].Value = DateDebut != null ? (object)DateDebut : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY DateFin

		/// <summary>
		/// Delete records by DateFin
		/// </summary>
		/// <param name="DateFin">DateFin value</param>
		public int DeleteByDateFin(System.DateTime? DateFin)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [CahierJournal] WHERE DateFin=@DateFin";
				command.Parameters.Add("@DateFin", System.Data.SqlDbType.DateTime);
				command.Parameters["@DateFin"].Value = DateFin != null ? (object)DateFin : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY DateJour

		/// <summary>
		/// Delete records by DateJour
		/// </summary>
		/// <param name="DateJour">DateJour value</param>
		public int DeleteByDateJour(System.DateTime? DateJour)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [CahierJournal] WHERE DateJour=@DateJour";
				command.Parameters.Add("@DateJour", System.Data.SqlDbType.DateTime);
				command.Parameters["@DateJour"].Value = DateJour != null ? (object)DateJour : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY TrancheHoraire

		/// <summary>
		/// Delete records by TrancheHoraire
		/// </summary>
		/// <param name="TrancheHoraire">TrancheHoraire value</param>
		public int DeleteByTrancheHoraire(System.String TrancheHoraire)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [CahierJournal] WHERE TrancheHoraire=@TrancheHoraire";
				command.Parameters.Add("@TrancheHoraire", System.Data.SqlDbType.NVarChar);
				command.Parameters["@TrancheHoraire"].Value = TrancheHoraire != null ? (object)TrancheHoraire : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Discipline

		/// <summary>
		/// Delete records by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		public int DeleteByDiscipline(System.Int64? Discipline)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [CahierJournal] WHERE Discipline=@Discipline";
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters["@Discipline"].Value = Discipline != null ? (object)Discipline : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY NumeroSeance

		/// <summary>
		/// Delete records by NumeroSeance
		/// </summary>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		public int DeleteByNumeroSeance(System.Int32? NumeroSeance)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [CahierJournal] WHERE NumeroSeance=@NumeroSeance";
				command.Parameters.Add("@NumeroSeance", System.Data.SqlDbType.Int);
				command.Parameters["@NumeroSeance"].Value = NumeroSeance != null ? (object)NumeroSeance : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Objectifs

		/// <summary>
		/// Delete records by Objectifs
		/// </summary>
		/// <param name="Objectifs">Objectifs value</param>
		public int DeleteByObjectifs(System.String Objectifs)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [CahierJournal] WHERE Objectifs=@Objectifs";
				command.Parameters.Add("@Objectifs", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Objectifs"].Value = Objectifs != null ? (object)Objectifs : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY DomaineActivite

		/// <summary>
		/// Delete records by DomaineActivite
		/// </summary>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		public int DeleteByDomaineActivite(System.Int64? DomaineActivite)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [CahierJournal] WHERE DomaineActivite=@DomaineActivite";
				command.Parameters.Add("@DomaineActivite", System.Data.SqlDbType.BigInt);
				command.Parameters["@DomaineActivite"].Value = DomaineActivite != null ? (object)DomaineActivite : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [CahierJournal]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(CahierJournal item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [CahierJournal] SET DateDebut = @DateDebut, DateFin = @DateFin, DateJour = @DateJour, TrancheHoraire = @TrancheHoraire, Discipline = @Discipline, NumeroSeance = @NumeroSeance, Objectifs = @Objectifs, DomaineActivite = @DomaineActivite WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@DateDebut", System.Data.SqlDbType.DateTime);
				command.Parameters["@DateDebut"].Value = item.DateDebut != null ? (object)item.DateDebut : System.DBNull.Value;
				command.Parameters.Add("@DateFin", System.Data.SqlDbType.DateTime);
				command.Parameters["@DateFin"].Value = item.DateFin != null ? (object)item.DateFin : System.DBNull.Value;
				command.Parameters.Add("@DateJour", System.Data.SqlDbType.DateTime);
				command.Parameters["@DateJour"].Value = item.DateJour != null ? (object)item.DateJour : System.DBNull.Value;
				command.Parameters.Add("@TrancheHoraire", System.Data.SqlDbType.NVarChar);
				command.Parameters["@TrancheHoraire"].Value = item.TrancheHoraire != null ? (object)item.TrancheHoraire : System.DBNull.Value;
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters["@Discipline"].Value = item.Discipline != null ? (object)item.Discipline : System.DBNull.Value;
				command.Parameters.Add("@NumeroSeance", System.Data.SqlDbType.Int);
				command.Parameters["@NumeroSeance"].Value = item.NumeroSeance != null ? (object)item.NumeroSeance : System.DBNull.Value;
				command.Parameters.Add("@Objectifs", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Objectifs"].Value = item.Objectifs != null ? (object)item.Objectifs : System.DBNull.Value;
				command.Parameters.Add("@DomaineActivite", System.Data.SqlDbType.BigInt);
				command.Parameters["@DomaineActivite"].Value = item.DomaineActivite != null ? (object)item.DomaineActivite : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<CahierJournal> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [CahierJournal] SET DateDebut = @DateDebut, DateFin = @DateFin, DateJour = @DateJour, TrancheHoraire = @TrancheHoraire, Discipline = @Discipline, NumeroSeance = @NumeroSeance, Objectifs = @Objectifs, DomaineActivite = @DomaineActivite WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@DateDebut", System.Data.SqlDbType.DateTime);
				command.Parameters.Add("@DateFin", System.Data.SqlDbType.DateTime);
				command.Parameters.Add("@DateJour", System.Data.SqlDbType.DateTime);
				command.Parameters.Add("@TrancheHoraire", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@NumeroSeance", System.Data.SqlDbType.Int);
				command.Parameters.Add("@Objectifs", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@DomaineActivite", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@DateDebut"].Value = item.DateDebut != null ? (object)item.DateDebut : System.DBNull.Value;
					command.Parameters["@DateFin"].Value = item.DateFin != null ? (object)item.DateFin : System.DBNull.Value;
					command.Parameters["@DateJour"].Value = item.DateJour != null ? (object)item.DateJour : System.DBNull.Value;
					command.Parameters["@TrancheHoraire"].Value = item.TrancheHoraire != null ? (object)item.TrancheHoraire : System.DBNull.Value;
					command.Parameters["@Discipline"].Value = item.Discipline != null ? (object)item.Discipline : System.DBNull.Value;
					command.Parameters["@NumeroSeance"].Value = item.NumeroSeance != null ? (object)item.NumeroSeance : System.DBNull.Value;
					command.Parameters["@Objectifs"].Value = item.Objectifs != null ? (object)item.Objectifs : System.DBNull.Value;
					command.Parameters["@DomaineActivite"].Value = item.DomaineActivite != null ? (object)item.DomaineActivite : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [CahierJournal]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM CahierJournal";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region IConditions Repository

	/// <summary>
	/// Represents the Conditions repository
	/// </summary>
	public partial interface IConditionsRepository : IRepository<Conditions>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<Conditions> SelectById(System.Int64? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Conditions> SelectById(System.Int64? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		System.Collections.Generic.List<Conditions> SelectByIntitule(System.String Intitule);

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Conditions> SelectByIntitule(System.String Intitule, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int64? Id);

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		int DeleteByIntitule(System.String Intitule);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.String Intitule);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Id, System.String Intitule);
	}

	#endregion

	#region Conditions Repository

	/// <summary>
	/// Default IConditionsRepository implementation 
	/// </summary>
	public partial class ConditionsRepository : IConditionsRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<Conditions> ToList()
		{
			var list = new System.Collections.Generic.List<Conditions>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM Conditions";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Conditions();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Conditions[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Conditions> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Conditions>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Conditions", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Conditions();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Conditions[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<Conditions> SelectById(System.Int64? Id)
		{
			var list = new System.Collections.Generic.List<Conditions>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM Conditions WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Conditions WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Conditions();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Intitule=?

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public System.Collections.Generic.List<Conditions> SelectByIntitule(System.String Intitule)
		{
			var list = new System.Collections.Generic.List<Conditions>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Intitule != null)
				{
					command.CommandText = "SELECT * FROM Conditions WHERE Intitule=@Intitule";
					command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Conditions WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Conditions();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Conditions> SelectById(System.Int64? Id, int count)
		{
			var list = new System.Collections.Generic.List<Conditions>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Conditions WHERE Id=@Id";					command.CommandText = "SELECT * FROM Conditions WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Conditions WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Conditions();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Intitule=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Conditions> SelectByIntitule(System.String Intitule, int count)
		{
			var list = new System.Collections.Generic.List<Conditions>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Intitule != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Conditions WHERE Intitule=@Intitule";					command.CommandText = "SELECT * FROM Conditions WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Conditions WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Conditions();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [Conditions]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(Conditions item)
		{
			Create(item.Intitule);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > 100)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Conditions] (Intitule)  VALUES (@Intitule)";

				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [Conditions] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.Int64? Id, System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > Conditions.Intitule_Max_Length)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Conditions] (Id, Intitule)  VALUES (@Id, @Intitule)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<Conditions> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "Conditions";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.Intitule);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(Conditions item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Conditions] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<Conditions> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Conditions] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int64? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Conditions] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Intitule

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public int DeleteByIntitule(System.String Intitule)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Conditions] WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Conditions]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(Conditions item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Conditions] SET Intitule = @Intitule WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<Conditions> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Conditions] SET Intitule = @Intitule WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [Conditions]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM Conditions";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region IDidactiqueCJ Repository

	/// <summary>
	/// Represents the DidactiqueCJ repository
	/// </summary>
	public partial interface IDidactiqueCJRepository : IRepository<DidactiqueCJ>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectById(System.Int64? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectById(System.Int64? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by PhaseApprentissage
		/// </summary>
		/// <param name="PhaseApprentissage">PhaseApprentissage value</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectByPhaseApprentissage(System.Int64? PhaseApprentissage);

		/// <summary>
		/// Retrieves the first set of items specified by count by PhaseApprentissage
		/// </summary>
		/// <param name="PhaseApprentissage">PhaseApprentissage value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectByPhaseApprentissage(System.Int64? PhaseApprentissage, int count);

		/// <summary>
		/// Retrieves a collection of items by Realise
		/// </summary>
		/// <param name="Realise">Realise value</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectByRealise(System.Boolean? Realise);

		/// <summary>
		/// Retrieves the first set of items specified by count by Realise
		/// </summary>
		/// <param name="Realise">Realise value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectByRealise(System.Boolean? Realise, int count);

		/// <summary>
		/// Retrieves a collection of items by Ordre
		/// </summary>
		/// <param name="Ordre">Ordre value</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectByOrdre(System.Int32? Ordre);

		/// <summary>
		/// Retrieves the first set of items specified by count by Ordre
		/// </summary>
		/// <param name="Ordre">Ordre value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectByOrdre(System.Int32? Ordre, int count);

		/// <summary>
		/// Retrieves a collection of items by Deroulement
		/// </summary>
		/// <param name="Deroulement">Deroulement value</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectByDeroulement(System.String Deroulement);

		/// <summary>
		/// Retrieves the first set of items specified by count by Deroulement
		/// </summary>
		/// <param name="Deroulement">Deroulement value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectByDeroulement(System.String Deroulement, int count);

		/// <summary>
		/// Retrieves a collection of items by DispositifSocial
		/// </summary>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectByDispositifSocial(System.Int64? DispositifSocial);

		/// <summary>
		/// Retrieves the first set of items specified by count by DispositifSocial
		/// </summary>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectByDispositifSocial(System.Int64? DispositifSocial, int count);

		/// <summary>
		/// Retrieves a collection of items by Duree
		/// </summary>
		/// <param name="Duree">Duree value</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectByDuree(System.Int32? Duree);

		/// <summary>
		/// Retrieves the first set of items specified by count by Duree
		/// </summary>
		/// <param name="Duree">Duree value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectByDuree(System.Int32? Duree, int count);

		/// <summary>
		/// Retrieves a collection of items by LieuMateriel
		/// </summary>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectByLieuMateriel(System.String LieuMateriel);

		/// <summary>
		/// Retrieves the first set of items specified by count by LieuMateriel
		/// </summary>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DidactiqueCJ> SelectByLieuMateriel(System.String LieuMateriel, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int64? Id);

		/// <summary>
		/// Delete records by PhaseApprentissage
		/// </summary>
		/// <param name="PhaseApprentissage">PhaseApprentissage value</param>
		int DeleteByPhaseApprentissage(System.Int64? PhaseApprentissage);

		/// <summary>
		/// Delete records by Realise
		/// </summary>
		/// <param name="Realise">Realise value</param>
		int DeleteByRealise(System.Boolean? Realise);

		/// <summary>
		/// Delete records by Ordre
		/// </summary>
		/// <param name="Ordre">Ordre value</param>
		int DeleteByOrdre(System.Int32? Ordre);

		/// <summary>
		/// Delete records by Deroulement
		/// </summary>
		/// <param name="Deroulement">Deroulement value</param>
		int DeleteByDeroulement(System.String Deroulement);

		/// <summary>
		/// Delete records by DispositifSocial
		/// </summary>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		int DeleteByDispositifSocial(System.Int64? DispositifSocial);

		/// <summary>
		/// Delete records by Duree
		/// </summary>
		/// <param name="Duree">Duree value</param>
		int DeleteByDuree(System.Int32? Duree);

		/// <summary>
		/// Delete records by LieuMateriel
		/// </summary>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		int DeleteByLieuMateriel(System.String LieuMateriel);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.Int64? PhaseApprentissage, System.Boolean? Realise, System.Int32? Ordre, System.String Deroulement, System.Int64? DispositifSocial, System.Int32? Duree, System.String LieuMateriel);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Id, System.Int64? PhaseApprentissage, System.Boolean? Realise, System.Int32? Ordre, System.String Deroulement, System.Int64? DispositifSocial, System.Int32? Duree, System.String LieuMateriel);
	}

	#endregion

	#region DidactiqueCJ Repository

	/// <summary>
	/// Default IDidactiqueCJRepository implementation 
	/// </summary>
	public partial class DidactiqueCJRepository : IDidactiqueCJRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<DidactiqueCJ> ToList()
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM DidactiqueCJ";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public DidactiqueCJ[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueCJ> ToList(int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM DidactiqueCJ", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public DidactiqueCJ[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectById(System.Int64? Id)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE PhaseApprentissage=?

		/// <summary>
		/// Retrieves a collection of items by PhaseApprentissage
		/// </summary>
		/// <param name="PhaseApprentissage">PhaseApprentissage value</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectByPhaseApprentissage(System.Int64? PhaseApprentissage)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (PhaseApprentissage != null)
				{
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE PhaseApprentissage=@PhaseApprentissage";
					command.Parameters.Add("@PhaseApprentissage", System.Data.SqlDbType.BigInt);
					command.Parameters["@PhaseApprentissage"].Value = PhaseApprentissage != null ? (object)PhaseApprentissage : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE PhaseApprentissage IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Realise=?

		/// <summary>
		/// Retrieves a collection of items by Realise
		/// </summary>
		/// <param name="Realise">Realise value</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectByRealise(System.Boolean? Realise)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Realise != null)
				{
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE Realise=@Realise";
					command.Parameters.Add("@Realise", System.Data.SqlDbType.Bit);
					command.Parameters["@Realise"].Value = Realise != null ? (object)Realise : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE Realise IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Ordre=?

		/// <summary>
		/// Retrieves a collection of items by Ordre
		/// </summary>
		/// <param name="Ordre">Ordre value</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectByOrdre(System.Int32? Ordre)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Ordre != null)
				{
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE Ordre=@Ordre";
					command.Parameters.Add("@Ordre", System.Data.SqlDbType.Int);
					command.Parameters["@Ordre"].Value = Ordre != null ? (object)Ordre : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE Ordre IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Deroulement=?

		/// <summary>
		/// Retrieves a collection of items by Deroulement
		/// </summary>
		/// <param name="Deroulement">Deroulement value</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectByDeroulement(System.String Deroulement)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Deroulement != null)
				{
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE Deroulement=@Deroulement";
					command.Parameters.Add("@Deroulement", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Deroulement"].Value = Deroulement != null ? (object)Deroulement : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE Deroulement IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE DispositifSocial=?

		/// <summary>
		/// Retrieves a collection of items by DispositifSocial
		/// </summary>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectByDispositifSocial(System.Int64? DispositifSocial)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (DispositifSocial != null)
				{
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE DispositifSocial=@DispositifSocial";
					command.Parameters.Add("@DispositifSocial", System.Data.SqlDbType.BigInt);
					command.Parameters["@DispositifSocial"].Value = DispositifSocial != null ? (object)DispositifSocial : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE DispositifSocial IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Duree=?

		/// <summary>
		/// Retrieves a collection of items by Duree
		/// </summary>
		/// <param name="Duree">Duree value</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectByDuree(System.Int32? Duree)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Duree != null)
				{
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE Duree=@Duree";
					command.Parameters.Add("@Duree", System.Data.SqlDbType.Int);
					command.Parameters["@Duree"].Value = Duree != null ? (object)Duree : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE Duree IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE LieuMateriel=?

		/// <summary>
		/// Retrieves a collection of items by LieuMateriel
		/// </summary>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectByLieuMateriel(System.String LieuMateriel)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (LieuMateriel != null)
				{
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE LieuMateriel=@LieuMateriel";
					command.Parameters.Add("@LieuMateriel", System.Data.SqlDbType.NVarChar);
					command.Parameters["@LieuMateriel"].Value = LieuMateriel != null ? (object)LieuMateriel : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE LieuMateriel IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectById(System.Int64? Id, int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE Id=@Id";					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE PhaseApprentissage=?

		/// <summary>
		/// Retrieves the first set of items specified by count by PhaseApprentissage
		/// </summary>
		/// <param name="PhaseApprentissage">PhaseApprentissage value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectByPhaseApprentissage(System.Int64? PhaseApprentissage, int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (PhaseApprentissage != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE PhaseApprentissage=@PhaseApprentissage";					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE PhaseApprentissage=@PhaseApprentissage";
				command.Parameters.Add("@PhaseApprentissage", System.Data.SqlDbType.BigInt);
				command.Parameters["@PhaseApprentissage"].Value = PhaseApprentissage != null ? (object)PhaseApprentissage : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE PhaseApprentissage IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Realise=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Realise
		/// </summary>
		/// <param name="Realise">Realise value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectByRealise(System.Boolean? Realise, int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Realise != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE Realise=@Realise";					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE Realise=@Realise";
				command.Parameters.Add("@Realise", System.Data.SqlDbType.Bit);
				command.Parameters["@Realise"].Value = Realise != null ? (object)Realise : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE Realise IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Ordre=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Ordre
		/// </summary>
		/// <param name="Ordre">Ordre value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectByOrdre(System.Int32? Ordre, int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Ordre != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE Ordre=@Ordre";					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE Ordre=@Ordre";
				command.Parameters.Add("@Ordre", System.Data.SqlDbType.Int);
				command.Parameters["@Ordre"].Value = Ordre != null ? (object)Ordre : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE Ordre IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Deroulement=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Deroulement
		/// </summary>
		/// <param name="Deroulement">Deroulement value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectByDeroulement(System.String Deroulement, int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Deroulement != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE Deroulement=@Deroulement";					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE Deroulement=@Deroulement";
				command.Parameters.Add("@Deroulement", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Deroulement"].Value = Deroulement != null ? (object)Deroulement : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE Deroulement IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE DispositifSocial=?

		/// <summary>
		/// Retrieves the first set of items specified by count by DispositifSocial
		/// </summary>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectByDispositifSocial(System.Int64? DispositifSocial, int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (DispositifSocial != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE DispositifSocial=@DispositifSocial";					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE DispositifSocial=@DispositifSocial";
				command.Parameters.Add("@DispositifSocial", System.Data.SqlDbType.BigInt);
				command.Parameters["@DispositifSocial"].Value = DispositifSocial != null ? (object)DispositifSocial : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE DispositifSocial IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Duree=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Duree
		/// </summary>
		/// <param name="Duree">Duree value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectByDuree(System.Int32? Duree, int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Duree != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE Duree=@Duree";					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE Duree=@Duree";
				command.Parameters.Add("@Duree", System.Data.SqlDbType.Int);
				command.Parameters["@Duree"].Value = Duree != null ? (object)Duree : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE Duree IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE LieuMateriel=?

		/// <summary>
		/// Retrieves the first set of items specified by count by LieuMateriel
		/// </summary>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueCJ> SelectByLieuMateriel(System.String LieuMateriel, int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (LieuMateriel != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE LieuMateriel=@LieuMateriel";					command.CommandText = "SELECT * FROM DidactiqueCJ WHERE LieuMateriel=@LieuMateriel";
				command.Parameters.Add("@LieuMateriel", System.Data.SqlDbType.NVarChar);
				command.Parameters["@LieuMateriel"].Value = LieuMateriel != null ? (object)LieuMateriel : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueCJ WHERE LieuMateriel IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueCJ();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PhaseApprentissage = (System.Int64?) (reader.IsDBNull(1) ? null : reader["PhaseApprentissage"]);
						item.Realise = (System.Boolean?) (reader.IsDBNull(2) ? null : reader["Realise"]);
						item.Ordre = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Ordre"]);
						item.Deroulement = (reader.IsDBNull(4) ? null : reader["Deroulement"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(5) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(6) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(7) ? null : reader["LieuMateriel"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [DidactiqueCJ]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(DidactiqueCJ item)
		{
			Create(item.PhaseApprentissage, item.Realise, item.Ordre, item.Deroulement, item.DispositifSocial, item.Duree, item.LieuMateriel);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="PhaseApprentissage">PhaseApprentissage value</param>
		/// <param name="Realise">Realise value</param>
		/// <param name="Ordre">Ordre value</param>
		/// <param name="Deroulement">Deroulement value</param>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		/// <param name="Duree">Duree value</param>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		public void Create(System.Int64? PhaseApprentissage, System.Boolean? Realise, System.Int32? Ordre, System.String Deroulement, System.Int64? DispositifSocial, System.Int32? Duree, System.String LieuMateriel)
		{
			if (Deroulement != null && Deroulement.Length > 500)
				throw new System.ArgumentException("Max length for Deroulement is 500");
			if (LieuMateriel != null && LieuMateriel.Length > 500)
				throw new System.ArgumentException("Max length for LieuMateriel is 500");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [DidactiqueCJ] (PhaseApprentissage, Realise, Ordre, Deroulement, DispositifSocial, Duree, LieuMateriel)  VALUES (@PhaseApprentissage, @Realise, @Ordre, @Deroulement, @DispositifSocial, @Duree, @LieuMateriel)";

				command.Parameters.Add("@PhaseApprentissage", System.Data.SqlDbType.BigInt);
				command.Parameters["@PhaseApprentissage"].Value = PhaseApprentissage != null ? (object)PhaseApprentissage : System.DBNull.Value;
				command.Parameters.Add("@Realise", System.Data.SqlDbType.Bit);
				command.Parameters["@Realise"].Value = Realise != null ? (object)Realise : System.DBNull.Value;
				command.Parameters.Add("@Ordre", System.Data.SqlDbType.Int);
				command.Parameters["@Ordre"].Value = Ordre != null ? (object)Ordre : System.DBNull.Value;
				command.Parameters.Add("@Deroulement", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Deroulement"].Value = Deroulement != null ? (object)Deroulement : System.DBNull.Value;
				command.Parameters.Add("@DispositifSocial", System.Data.SqlDbType.BigInt);
				command.Parameters["@DispositifSocial"].Value = DispositifSocial != null ? (object)DispositifSocial : System.DBNull.Value;
				command.Parameters.Add("@Duree", System.Data.SqlDbType.Int);
				command.Parameters["@Duree"].Value = Duree != null ? (object)Duree : System.DBNull.Value;
				command.Parameters.Add("@LieuMateriel", System.Data.SqlDbType.NVarChar);
				command.Parameters["@LieuMateriel"].Value = LieuMateriel != null ? (object)LieuMateriel : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [DidactiqueCJ] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="PhaseApprentissage">PhaseApprentissage value</param>
		/// <param name="Realise">Realise value</param>
		/// <param name="Ordre">Ordre value</param>
		/// <param name="Deroulement">Deroulement value</param>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		/// <param name="Duree">Duree value</param>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		public void Create(System.Int64? Id, System.Int64? PhaseApprentissage, System.Boolean? Realise, System.Int32? Ordre, System.String Deroulement, System.Int64? DispositifSocial, System.Int32? Duree, System.String LieuMateriel)
		{
			if (Deroulement != null && Deroulement.Length > DidactiqueCJ.Deroulement_Max_Length)
				throw new System.ArgumentException("Max length for Deroulement is 500");
			if (LieuMateriel != null && LieuMateriel.Length > DidactiqueCJ.LieuMateriel_Max_Length)
				throw new System.ArgumentException("Max length for LieuMateriel is 500");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [DidactiqueCJ] (Id, PhaseApprentissage, Realise, Ordre, Deroulement, DispositifSocial, Duree, LieuMateriel)  VALUES (@Id, @PhaseApprentissage, @Realise, @Ordre, @Deroulement, @DispositifSocial, @Duree, @LieuMateriel)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@PhaseApprentissage", System.Data.SqlDbType.BigInt);
				command.Parameters["@PhaseApprentissage"].Value = PhaseApprentissage != null ? (object)PhaseApprentissage : System.DBNull.Value;
				command.Parameters.Add("@Realise", System.Data.SqlDbType.Bit);
				command.Parameters["@Realise"].Value = Realise != null ? (object)Realise : System.DBNull.Value;
				command.Parameters.Add("@Ordre", System.Data.SqlDbType.Int);
				command.Parameters["@Ordre"].Value = Ordre != null ? (object)Ordre : System.DBNull.Value;
				command.Parameters.Add("@Deroulement", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Deroulement"].Value = Deroulement != null ? (object)Deroulement : System.DBNull.Value;
				command.Parameters.Add("@DispositifSocial", System.Data.SqlDbType.BigInt);
				command.Parameters["@DispositifSocial"].Value = DispositifSocial != null ? (object)DispositifSocial : System.DBNull.Value;
				command.Parameters.Add("@Duree", System.Data.SqlDbType.Int);
				command.Parameters["@Duree"].Value = Duree != null ? (object)Duree : System.DBNull.Value;
				command.Parameters.Add("@LieuMateriel", System.Data.SqlDbType.NVarChar);
				command.Parameters["@LieuMateriel"].Value = LieuMateriel != null ? (object)LieuMateriel : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<DidactiqueCJ> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "DidactiqueCJ";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.PhaseApprentissage);
						record.SetValue(2, item.Realise);
						record.SetValue(3, item.Ordre);
						record.SetValue(4, item.Deroulement);
						record.SetValue(5, item.DispositifSocial);
						record.SetValue(6, item.Duree);
						record.SetValue(7, item.LieuMateriel);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(DidactiqueCJ item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueCJ] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<DidactiqueCJ> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueCJ] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int64? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueCJ] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY PhaseApprentissage

		/// <summary>
		/// Delete records by PhaseApprentissage
		/// </summary>
		/// <param name="PhaseApprentissage">PhaseApprentissage value</param>
		public int DeleteByPhaseApprentissage(System.Int64? PhaseApprentissage)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueCJ] WHERE PhaseApprentissage=@PhaseApprentissage";
				command.Parameters.Add("@PhaseApprentissage", System.Data.SqlDbType.BigInt);
				command.Parameters["@PhaseApprentissage"].Value = PhaseApprentissage != null ? (object)PhaseApprentissage : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Realise

		/// <summary>
		/// Delete records by Realise
		/// </summary>
		/// <param name="Realise">Realise value</param>
		public int DeleteByRealise(System.Boolean? Realise)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueCJ] WHERE Realise=@Realise";
				command.Parameters.Add("@Realise", System.Data.SqlDbType.Bit);
				command.Parameters["@Realise"].Value = Realise != null ? (object)Realise : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Ordre

		/// <summary>
		/// Delete records by Ordre
		/// </summary>
		/// <param name="Ordre">Ordre value</param>
		public int DeleteByOrdre(System.Int32? Ordre)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueCJ] WHERE Ordre=@Ordre";
				command.Parameters.Add("@Ordre", System.Data.SqlDbType.Int);
				command.Parameters["@Ordre"].Value = Ordre != null ? (object)Ordre : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Deroulement

		/// <summary>
		/// Delete records by Deroulement
		/// </summary>
		/// <param name="Deroulement">Deroulement value</param>
		public int DeleteByDeroulement(System.String Deroulement)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueCJ] WHERE Deroulement=@Deroulement";
				command.Parameters.Add("@Deroulement", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Deroulement"].Value = Deroulement != null ? (object)Deroulement : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY DispositifSocial

		/// <summary>
		/// Delete records by DispositifSocial
		/// </summary>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		public int DeleteByDispositifSocial(System.Int64? DispositifSocial)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueCJ] WHERE DispositifSocial=@DispositifSocial";
				command.Parameters.Add("@DispositifSocial", System.Data.SqlDbType.BigInt);
				command.Parameters["@DispositifSocial"].Value = DispositifSocial != null ? (object)DispositifSocial : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Duree

		/// <summary>
		/// Delete records by Duree
		/// </summary>
		/// <param name="Duree">Duree value</param>
		public int DeleteByDuree(System.Int32? Duree)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueCJ] WHERE Duree=@Duree";
				command.Parameters.Add("@Duree", System.Data.SqlDbType.Int);
				command.Parameters["@Duree"].Value = Duree != null ? (object)Duree : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY LieuMateriel

		/// <summary>
		/// Delete records by LieuMateriel
		/// </summary>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		public int DeleteByLieuMateriel(System.String LieuMateriel)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueCJ] WHERE LieuMateriel=@LieuMateriel";
				command.Parameters.Add("@LieuMateriel", System.Data.SqlDbType.NVarChar);
				command.Parameters["@LieuMateriel"].Value = LieuMateriel != null ? (object)LieuMateriel : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueCJ]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(DidactiqueCJ item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [DidactiqueCJ] SET PhaseApprentissage = @PhaseApprentissage, Realise = @Realise, Ordre = @Ordre, Deroulement = @Deroulement, DispositifSocial = @DispositifSocial, Duree = @Duree, LieuMateriel = @LieuMateriel WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@PhaseApprentissage", System.Data.SqlDbType.BigInt);
				command.Parameters["@PhaseApprentissage"].Value = item.PhaseApprentissage != null ? (object)item.PhaseApprentissage : System.DBNull.Value;
				command.Parameters.Add("@Realise", System.Data.SqlDbType.Bit);
				command.Parameters["@Realise"].Value = item.Realise != null ? (object)item.Realise : System.DBNull.Value;
				command.Parameters.Add("@Ordre", System.Data.SqlDbType.Int);
				command.Parameters["@Ordre"].Value = item.Ordre != null ? (object)item.Ordre : System.DBNull.Value;
				command.Parameters.Add("@Deroulement", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Deroulement"].Value = item.Deroulement != null ? (object)item.Deroulement : System.DBNull.Value;
				command.Parameters.Add("@DispositifSocial", System.Data.SqlDbType.BigInt);
				command.Parameters["@DispositifSocial"].Value = item.DispositifSocial != null ? (object)item.DispositifSocial : System.DBNull.Value;
				command.Parameters.Add("@Duree", System.Data.SqlDbType.Int);
				command.Parameters["@Duree"].Value = item.Duree != null ? (object)item.Duree : System.DBNull.Value;
				command.Parameters.Add("@LieuMateriel", System.Data.SqlDbType.NVarChar);
				command.Parameters["@LieuMateriel"].Value = item.LieuMateriel != null ? (object)item.LieuMateriel : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<DidactiqueCJ> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [DidactiqueCJ] SET PhaseApprentissage = @PhaseApprentissage, Realise = @Realise, Ordre = @Ordre, Deroulement = @Deroulement, DispositifSocial = @DispositifSocial, Duree = @Duree, LieuMateriel = @LieuMateriel WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@PhaseApprentissage", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Realise", System.Data.SqlDbType.Bit);
				command.Parameters.Add("@Ordre", System.Data.SqlDbType.Int);
				command.Parameters.Add("@Deroulement", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@DispositifSocial", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Duree", System.Data.SqlDbType.Int);
				command.Parameters.Add("@LieuMateriel", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@PhaseApprentissage"].Value = item.PhaseApprentissage != null ? (object)item.PhaseApprentissage : System.DBNull.Value;
					command.Parameters["@Realise"].Value = item.Realise != null ? (object)item.Realise : System.DBNull.Value;
					command.Parameters["@Ordre"].Value = item.Ordre != null ? (object)item.Ordre : System.DBNull.Value;
					command.Parameters["@Deroulement"].Value = item.Deroulement != null ? (object)item.Deroulement : System.DBNull.Value;
					command.Parameters["@DispositifSocial"].Value = item.DispositifSocial != null ? (object)item.DispositifSocial : System.DBNull.Value;
					command.Parameters["@Duree"].Value = item.Duree != null ? (object)item.Duree : System.DBNull.Value;
					command.Parameters["@LieuMateriel"].Value = item.LieuMateriel != null ? (object)item.LieuMateriel : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [DidactiqueCJ]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM DidactiqueCJ";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region IDidactiqueFP Repository

	/// <summary>
	/// Represents the DidactiqueFP repository
	/// </summary>
	public partial interface IDidactiqueFPRepository : IRepository<DidactiqueFP>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<DidactiqueFP> SelectById(System.Int64? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DidactiqueFP> SelectById(System.Int64? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by Performances
		/// </summary>
		/// <param name="Performances">Performances value</param>
		System.Collections.Generic.List<DidactiqueFP> SelectByPerformances(System.String Performances);

		/// <summary>
		/// Retrieves the first set of items specified by count by Performances
		/// </summary>
		/// <param name="Performances">Performances value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DidactiqueFP> SelectByPerformances(System.String Performances, int count);

		/// <summary>
		/// Retrieves a collection of items by DispositifSocial
		/// </summary>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		System.Collections.Generic.List<DidactiqueFP> SelectByDispositifSocial(System.Int64? DispositifSocial);

		/// <summary>
		/// Retrieves the first set of items specified by count by DispositifSocial
		/// </summary>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DidactiqueFP> SelectByDispositifSocial(System.Int64? DispositifSocial, int count);

		/// <summary>
		/// Retrieves a collection of items by Duree
		/// </summary>
		/// <param name="Duree">Duree value</param>
		System.Collections.Generic.List<DidactiqueFP> SelectByDuree(System.Int32? Duree);

		/// <summary>
		/// Retrieves the first set of items specified by count by Duree
		/// </summary>
		/// <param name="Duree">Duree value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DidactiqueFP> SelectByDuree(System.Int32? Duree, int count);

		/// <summary>
		/// Retrieves a collection of items by LieuMateriel
		/// </summary>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		System.Collections.Generic.List<DidactiqueFP> SelectByLieuMateriel(System.String LieuMateriel);

		/// <summary>
		/// Retrieves the first set of items specified by count by LieuMateriel
		/// </summary>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DidactiqueFP> SelectByLieuMateriel(System.String LieuMateriel, int count);

		/// <summary>
		/// Retrieves a collection of items by Ordre
		/// </summary>
		/// <param name="Ordre">Ordre value</param>
		System.Collections.Generic.List<DidactiqueFP> SelectByOrdre(System.Int32? Ordre);

		/// <summary>
		/// Retrieves the first set of items specified by count by Ordre
		/// </summary>
		/// <param name="Ordre">Ordre value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DidactiqueFP> SelectByOrdre(System.Int32? Ordre, int count);

		/// <summary>
		/// Retrieves a collection of items by Conditions
		/// </summary>
		/// <param name="Conditions">Conditions value</param>
		System.Collections.Generic.List<DidactiqueFP> SelectByConditions(System.Int64? Conditions);

		/// <summary>
		/// Retrieves the first set of items specified by count by Conditions
		/// </summary>
		/// <param name="Conditions">Conditions value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DidactiqueFP> SelectByConditions(System.Int64? Conditions, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int64? Id);

		/// <summary>
		/// Delete records by Performances
		/// </summary>
		/// <param name="Performances">Performances value</param>
		int DeleteByPerformances(System.String Performances);

		/// <summary>
		/// Delete records by DispositifSocial
		/// </summary>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		int DeleteByDispositifSocial(System.Int64? DispositifSocial);

		/// <summary>
		/// Delete records by Duree
		/// </summary>
		/// <param name="Duree">Duree value</param>
		int DeleteByDuree(System.Int32? Duree);

		/// <summary>
		/// Delete records by LieuMateriel
		/// </summary>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		int DeleteByLieuMateriel(System.String LieuMateriel);

		/// <summary>
		/// Delete records by Ordre
		/// </summary>
		/// <param name="Ordre">Ordre value</param>
		int DeleteByOrdre(System.Int32? Ordre);

		/// <summary>
		/// Delete records by Conditions
		/// </summary>
		/// <param name="Conditions">Conditions value</param>
		int DeleteByConditions(System.Int64? Conditions);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.String Performances, System.Int64? DispositifSocial, System.Int32? Duree, System.String LieuMateriel, System.Int32? Ordre, System.Int64? Conditions);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Id, System.String Performances, System.Int64? DispositifSocial, System.Int32? Duree, System.String LieuMateriel, System.Int32? Ordre, System.Int64? Conditions);
	}

	#endregion

	#region DidactiqueFP Repository

	/// <summary>
	/// Default IDidactiqueFPRepository implementation 
	/// </summary>
	public partial class DidactiqueFPRepository : IDidactiqueFPRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<DidactiqueFP> ToList()
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM DidactiqueFP";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public DidactiqueFP[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueFP> ToList(int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM DidactiqueFP", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public DidactiqueFP[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<DidactiqueFP> SelectById(System.Int64? Id)
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM DidactiqueFP WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DidactiqueFP WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Performances=?

		/// <summary>
		/// Retrieves a collection of items by Performances
		/// </summary>
		/// <param name="Performances">Performances value</param>
		public System.Collections.Generic.List<DidactiqueFP> SelectByPerformances(System.String Performances)
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Performances != null)
				{
					command.CommandText = "SELECT * FROM DidactiqueFP WHERE Performances=@Performances";
					command.Parameters.Add("@Performances", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Performances"].Value = Performances != null ? (object)Performances : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DidactiqueFP WHERE Performances IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE DispositifSocial=?

		/// <summary>
		/// Retrieves a collection of items by DispositifSocial
		/// </summary>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		public System.Collections.Generic.List<DidactiqueFP> SelectByDispositifSocial(System.Int64? DispositifSocial)
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (DispositifSocial != null)
				{
					command.CommandText = "SELECT * FROM DidactiqueFP WHERE DispositifSocial=@DispositifSocial";
					command.Parameters.Add("@DispositifSocial", System.Data.SqlDbType.BigInt);
					command.Parameters["@DispositifSocial"].Value = DispositifSocial != null ? (object)DispositifSocial : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DidactiqueFP WHERE DispositifSocial IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Duree=?

		/// <summary>
		/// Retrieves a collection of items by Duree
		/// </summary>
		/// <param name="Duree">Duree value</param>
		public System.Collections.Generic.List<DidactiqueFP> SelectByDuree(System.Int32? Duree)
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Duree != null)
				{
					command.CommandText = "SELECT * FROM DidactiqueFP WHERE Duree=@Duree";
					command.Parameters.Add("@Duree", System.Data.SqlDbType.Int);
					command.Parameters["@Duree"].Value = Duree != null ? (object)Duree : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DidactiqueFP WHERE Duree IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE LieuMateriel=?

		/// <summary>
		/// Retrieves a collection of items by LieuMateriel
		/// </summary>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		public System.Collections.Generic.List<DidactiqueFP> SelectByLieuMateriel(System.String LieuMateriel)
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (LieuMateriel != null)
				{
					command.CommandText = "SELECT * FROM DidactiqueFP WHERE LieuMateriel=@LieuMateriel";
					command.Parameters.Add("@LieuMateriel", System.Data.SqlDbType.NVarChar);
					command.Parameters["@LieuMateriel"].Value = LieuMateriel != null ? (object)LieuMateriel : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DidactiqueFP WHERE LieuMateriel IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Ordre=?

		/// <summary>
		/// Retrieves a collection of items by Ordre
		/// </summary>
		/// <param name="Ordre">Ordre value</param>
		public System.Collections.Generic.List<DidactiqueFP> SelectByOrdre(System.Int32? Ordre)
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Ordre != null)
				{
					command.CommandText = "SELECT * FROM DidactiqueFP WHERE Ordre=@Ordre";
					command.Parameters.Add("@Ordre", System.Data.SqlDbType.Int);
					command.Parameters["@Ordre"].Value = Ordre != null ? (object)Ordre : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DidactiqueFP WHERE Ordre IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Conditions=?

		/// <summary>
		/// Retrieves a collection of items by Conditions
		/// </summary>
		/// <param name="Conditions">Conditions value</param>
		public System.Collections.Generic.List<DidactiqueFP> SelectByConditions(System.Int64? Conditions)
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Conditions != null)
				{
					command.CommandText = "SELECT * FROM DidactiqueFP WHERE Conditions=@Conditions";
					command.Parameters.Add("@Conditions", System.Data.SqlDbType.BigInt);
					command.Parameters["@Conditions"].Value = Conditions != null ? (object)Conditions : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DidactiqueFP WHERE Conditions IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueFP> SelectById(System.Int64? Id, int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueFP WHERE Id=@Id";					command.CommandText = "SELECT * FROM DidactiqueFP WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueFP WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Performances=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Performances
		/// </summary>
		/// <param name="Performances">Performances value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueFP> SelectByPerformances(System.String Performances, int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Performances != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueFP WHERE Performances=@Performances";					command.CommandText = "SELECT * FROM DidactiqueFP WHERE Performances=@Performances";
				command.Parameters.Add("@Performances", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Performances"].Value = Performances != null ? (object)Performances : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueFP WHERE Performances IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE DispositifSocial=?

		/// <summary>
		/// Retrieves the first set of items specified by count by DispositifSocial
		/// </summary>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueFP> SelectByDispositifSocial(System.Int64? DispositifSocial, int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (DispositifSocial != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueFP WHERE DispositifSocial=@DispositifSocial";					command.CommandText = "SELECT * FROM DidactiqueFP WHERE DispositifSocial=@DispositifSocial";
				command.Parameters.Add("@DispositifSocial", System.Data.SqlDbType.BigInt);
				command.Parameters["@DispositifSocial"].Value = DispositifSocial != null ? (object)DispositifSocial : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueFP WHERE DispositifSocial IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Duree=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Duree
		/// </summary>
		/// <param name="Duree">Duree value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueFP> SelectByDuree(System.Int32? Duree, int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Duree != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueFP WHERE Duree=@Duree";					command.CommandText = "SELECT * FROM DidactiqueFP WHERE Duree=@Duree";
				command.Parameters.Add("@Duree", System.Data.SqlDbType.Int);
				command.Parameters["@Duree"].Value = Duree != null ? (object)Duree : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueFP WHERE Duree IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE LieuMateriel=?

		/// <summary>
		/// Retrieves the first set of items specified by count by LieuMateriel
		/// </summary>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueFP> SelectByLieuMateriel(System.String LieuMateriel, int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (LieuMateriel != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueFP WHERE LieuMateriel=@LieuMateriel";					command.CommandText = "SELECT * FROM DidactiqueFP WHERE LieuMateriel=@LieuMateriel";
				command.Parameters.Add("@LieuMateriel", System.Data.SqlDbType.NVarChar);
				command.Parameters["@LieuMateriel"].Value = LieuMateriel != null ? (object)LieuMateriel : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueFP WHERE LieuMateriel IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Ordre=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Ordre
		/// </summary>
		/// <param name="Ordre">Ordre value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueFP> SelectByOrdre(System.Int32? Ordre, int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Ordre != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueFP WHERE Ordre=@Ordre";					command.CommandText = "SELECT * FROM DidactiqueFP WHERE Ordre=@Ordre";
				command.Parameters.Add("@Ordre", System.Data.SqlDbType.Int);
				command.Parameters["@Ordre"].Value = Ordre != null ? (object)Ordre : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueFP WHERE Ordre IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Conditions=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Conditions
		/// </summary>
		/// <param name="Conditions">Conditions value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DidactiqueFP> SelectByConditions(System.Int64? Conditions, int count)
		{
			var list = new System.Collections.Generic.List<DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Conditions != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueFP WHERE Conditions=@Conditions";					command.CommandText = "SELECT * FROM DidactiqueFP WHERE Conditions=@Conditions";
				command.Parameters.Add("@Conditions", System.Data.SqlDbType.BigInt);
				command.Parameters["@Conditions"].Value = Conditions != null ? (object)Conditions : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DidactiqueFP WHERE Conditions IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DidactiqueFP();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Performances = (reader.IsDBNull(1) ? null : reader["Performances"] as System.String);
						item.DispositifSocial = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DispositifSocial"]);
						item.Duree = (System.Int32?) (reader.IsDBNull(3) ? null : reader["Duree"]);
						item.LieuMateriel = (reader.IsDBNull(4) ? null : reader["LieuMateriel"] as System.String);
						item.Ordre = (System.Int32?) (reader.IsDBNull(5) ? null : reader["Ordre"]);
						item.Conditions = (System.Int64?) (reader.IsDBNull(6) ? null : reader["Conditions"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [DidactiqueFP]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(DidactiqueFP item)
		{
			Create(item.Performances, item.DispositifSocial, item.Duree, item.LieuMateriel, item.Ordre, item.Conditions);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="Performances">Performances value</param>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		/// <param name="Duree">Duree value</param>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		/// <param name="Ordre">Ordre value</param>
		/// <param name="Conditions">Conditions value</param>
		public void Create(System.String Performances, System.Int64? DispositifSocial, System.Int32? Duree, System.String LieuMateriel, System.Int32? Ordre, System.Int64? Conditions)
		{
			if (Performances != null && Performances.Length > 500)
				throw new System.ArgumentException("Max length for Performances is 500");
			if (LieuMateriel != null && LieuMateriel.Length > 500)
				throw new System.ArgumentException("Max length for LieuMateriel is 500");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [DidactiqueFP] (Performances, DispositifSocial, Duree, LieuMateriel, Ordre, Conditions)  VALUES (@Performances, @DispositifSocial, @Duree, @LieuMateriel, @Ordre, @Conditions)";

				command.Parameters.Add("@Performances", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Performances"].Value = Performances != null ? (object)Performances : System.DBNull.Value;
				command.Parameters.Add("@DispositifSocial", System.Data.SqlDbType.BigInt);
				command.Parameters["@DispositifSocial"].Value = DispositifSocial != null ? (object)DispositifSocial : System.DBNull.Value;
				command.Parameters.Add("@Duree", System.Data.SqlDbType.Int);
				command.Parameters["@Duree"].Value = Duree != null ? (object)Duree : System.DBNull.Value;
				command.Parameters.Add("@LieuMateriel", System.Data.SqlDbType.NVarChar);
				command.Parameters["@LieuMateriel"].Value = LieuMateriel != null ? (object)LieuMateriel : System.DBNull.Value;
				command.Parameters.Add("@Ordre", System.Data.SqlDbType.Int);
				command.Parameters["@Ordre"].Value = Ordre != null ? (object)Ordre : System.DBNull.Value;
				command.Parameters.Add("@Conditions", System.Data.SqlDbType.BigInt);
				command.Parameters["@Conditions"].Value = Conditions != null ? (object)Conditions : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [DidactiqueFP] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="Performances">Performances value</param>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		/// <param name="Duree">Duree value</param>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		/// <param name="Ordre">Ordre value</param>
		/// <param name="Conditions">Conditions value</param>
		public void Create(System.Int64? Id, System.String Performances, System.Int64? DispositifSocial, System.Int32? Duree, System.String LieuMateriel, System.Int32? Ordre, System.Int64? Conditions)
		{
			if (Performances != null && Performances.Length > DidactiqueFP.Performances_Max_Length)
				throw new System.ArgumentException("Max length for Performances is 500");
			if (LieuMateriel != null && LieuMateriel.Length > DidactiqueFP.LieuMateriel_Max_Length)
				throw new System.ArgumentException("Max length for LieuMateriel is 500");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [DidactiqueFP] (Id, Performances, DispositifSocial, Duree, LieuMateriel, Ordre, Conditions)  VALUES (@Id, @Performances, @DispositifSocial, @Duree, @LieuMateriel, @Ordre, @Conditions)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@Performances", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Performances"].Value = Performances != null ? (object)Performances : System.DBNull.Value;
				command.Parameters.Add("@DispositifSocial", System.Data.SqlDbType.BigInt);
				command.Parameters["@DispositifSocial"].Value = DispositifSocial != null ? (object)DispositifSocial : System.DBNull.Value;
				command.Parameters.Add("@Duree", System.Data.SqlDbType.Int);
				command.Parameters["@Duree"].Value = Duree != null ? (object)Duree : System.DBNull.Value;
				command.Parameters.Add("@LieuMateriel", System.Data.SqlDbType.NVarChar);
				command.Parameters["@LieuMateriel"].Value = LieuMateriel != null ? (object)LieuMateriel : System.DBNull.Value;
				command.Parameters.Add("@Ordre", System.Data.SqlDbType.Int);
				command.Parameters["@Ordre"].Value = Ordre != null ? (object)Ordre : System.DBNull.Value;
				command.Parameters.Add("@Conditions", System.Data.SqlDbType.BigInt);
				command.Parameters["@Conditions"].Value = Conditions != null ? (object)Conditions : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<DidactiqueFP> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "DidactiqueFP";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.Performances);
						record.SetValue(2, item.DispositifSocial);
						record.SetValue(3, item.Duree);
						record.SetValue(4, item.LieuMateriel);
						record.SetValue(5, item.Ordre);
						record.SetValue(6, item.Conditions);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(DidactiqueFP item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueFP] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<DidactiqueFP> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueFP] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int64? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueFP] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Performances

		/// <summary>
		/// Delete records by Performances
		/// </summary>
		/// <param name="Performances">Performances value</param>
		public int DeleteByPerformances(System.String Performances)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueFP] WHERE Performances=@Performances";
				command.Parameters.Add("@Performances", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Performances"].Value = Performances != null ? (object)Performances : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY DispositifSocial

		/// <summary>
		/// Delete records by DispositifSocial
		/// </summary>
		/// <param name="DispositifSocial">DispositifSocial value</param>
		public int DeleteByDispositifSocial(System.Int64? DispositifSocial)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueFP] WHERE DispositifSocial=@DispositifSocial";
				command.Parameters.Add("@DispositifSocial", System.Data.SqlDbType.BigInt);
				command.Parameters["@DispositifSocial"].Value = DispositifSocial != null ? (object)DispositifSocial : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Duree

		/// <summary>
		/// Delete records by Duree
		/// </summary>
		/// <param name="Duree">Duree value</param>
		public int DeleteByDuree(System.Int32? Duree)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueFP] WHERE Duree=@Duree";
				command.Parameters.Add("@Duree", System.Data.SqlDbType.Int);
				command.Parameters["@Duree"].Value = Duree != null ? (object)Duree : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY LieuMateriel

		/// <summary>
		/// Delete records by LieuMateriel
		/// </summary>
		/// <param name="LieuMateriel">LieuMateriel value</param>
		public int DeleteByLieuMateriel(System.String LieuMateriel)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueFP] WHERE LieuMateriel=@LieuMateriel";
				command.Parameters.Add("@LieuMateriel", System.Data.SqlDbType.NVarChar);
				command.Parameters["@LieuMateriel"].Value = LieuMateriel != null ? (object)LieuMateriel : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Ordre

		/// <summary>
		/// Delete records by Ordre
		/// </summary>
		/// <param name="Ordre">Ordre value</param>
		public int DeleteByOrdre(System.Int32? Ordre)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueFP] WHERE Ordre=@Ordre";
				command.Parameters.Add("@Ordre", System.Data.SqlDbType.Int);
				command.Parameters["@Ordre"].Value = Ordre != null ? (object)Ordre : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Conditions

		/// <summary>
		/// Delete records by Conditions
		/// </summary>
		/// <param name="Conditions">Conditions value</param>
		public int DeleteByConditions(System.Int64? Conditions)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueFP] WHERE Conditions=@Conditions";
				command.Parameters.Add("@Conditions", System.Data.SqlDbType.BigInt);
				command.Parameters["@Conditions"].Value = Conditions != null ? (object)Conditions : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DidactiqueFP]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(DidactiqueFP item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [DidactiqueFP] SET Performances = @Performances, DispositifSocial = @DispositifSocial, Duree = @Duree, LieuMateriel = @LieuMateriel, Ordre = @Ordre, Conditions = @Conditions WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@Performances", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Performances"].Value = item.Performances != null ? (object)item.Performances : System.DBNull.Value;
				command.Parameters.Add("@DispositifSocial", System.Data.SqlDbType.BigInt);
				command.Parameters["@DispositifSocial"].Value = item.DispositifSocial != null ? (object)item.DispositifSocial : System.DBNull.Value;
				command.Parameters.Add("@Duree", System.Data.SqlDbType.Int);
				command.Parameters["@Duree"].Value = item.Duree != null ? (object)item.Duree : System.DBNull.Value;
				command.Parameters.Add("@LieuMateriel", System.Data.SqlDbType.NVarChar);
				command.Parameters["@LieuMateriel"].Value = item.LieuMateriel != null ? (object)item.LieuMateriel : System.DBNull.Value;
				command.Parameters.Add("@Ordre", System.Data.SqlDbType.Int);
				command.Parameters["@Ordre"].Value = item.Ordre != null ? (object)item.Ordre : System.DBNull.Value;
				command.Parameters.Add("@Conditions", System.Data.SqlDbType.BigInt);
				command.Parameters["@Conditions"].Value = item.Conditions != null ? (object)item.Conditions : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<DidactiqueFP> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [DidactiqueFP] SET Performances = @Performances, DispositifSocial = @DispositifSocial, Duree = @Duree, LieuMateriel = @LieuMateriel, Ordre = @Ordre, Conditions = @Conditions WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Performances", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@DispositifSocial", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Duree", System.Data.SqlDbType.Int);
				command.Parameters.Add("@LieuMateriel", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Ordre", System.Data.SqlDbType.Int);
				command.Parameters.Add("@Conditions", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@Performances"].Value = item.Performances != null ? (object)item.Performances : System.DBNull.Value;
					command.Parameters["@DispositifSocial"].Value = item.DispositifSocial != null ? (object)item.DispositifSocial : System.DBNull.Value;
					command.Parameters["@Duree"].Value = item.Duree != null ? (object)item.Duree : System.DBNull.Value;
					command.Parameters["@LieuMateriel"].Value = item.LieuMateriel != null ? (object)item.LieuMateriel : System.DBNull.Value;
					command.Parameters["@Ordre"].Value = item.Ordre != null ? (object)item.Ordre : System.DBNull.Value;
					command.Parameters["@Conditions"].Value = item.Conditions != null ? (object)item.Conditions : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [DidactiqueFP]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM DidactiqueFP";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region IDiscipline Repository

	/// <summary>
	/// Represents the Discipline repository
	/// </summary>
	public partial interface IDisciplineRepository : IRepository<Discipline>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<Discipline> SelectById(System.Int64? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Discipline> SelectById(System.Int64? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		System.Collections.Generic.List<Discipline> SelectByIntitule(System.String Intitule);

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Discipline> SelectByIntitule(System.String Intitule, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int64? Id);

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		int DeleteByIntitule(System.String Intitule);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.String Intitule);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Id, System.String Intitule);
	}

	#endregion

	#region Discipline Repository

	/// <summary>
	/// Default IDisciplineRepository implementation 
	/// </summary>
	public partial class DisciplineRepository : IDisciplineRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<Discipline> ToList()
		{
			var list = new System.Collections.Generic.List<Discipline>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM Discipline";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Discipline();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Discipline[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Discipline> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Discipline>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Discipline", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Discipline();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Discipline[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<Discipline> SelectById(System.Int64? Id)
		{
			var list = new System.Collections.Generic.List<Discipline>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM Discipline WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Discipline WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Discipline();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Intitule=?

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public System.Collections.Generic.List<Discipline> SelectByIntitule(System.String Intitule)
		{
			var list = new System.Collections.Generic.List<Discipline>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Intitule != null)
				{
					command.CommandText = "SELECT * FROM Discipline WHERE Intitule=@Intitule";
					command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Discipline WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Discipline();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Discipline> SelectById(System.Int64? Id, int count)
		{
			var list = new System.Collections.Generic.List<Discipline>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Discipline WHERE Id=@Id";					command.CommandText = "SELECT * FROM Discipline WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Discipline WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Discipline();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Intitule=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Discipline> SelectByIntitule(System.String Intitule, int count)
		{
			var list = new System.Collections.Generic.List<Discipline>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Intitule != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Discipline WHERE Intitule=@Intitule";					command.CommandText = "SELECT * FROM Discipline WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Discipline WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Discipline();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [Discipline]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(Discipline item)
		{
			Create(item.Intitule);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > 100)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Discipline] (Intitule)  VALUES (@Intitule)";

				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [Discipline] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.Int64? Id, System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > Discipline.Intitule_Max_Length)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Discipline] (Id, Intitule)  VALUES (@Id, @Intitule)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<Discipline> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "Discipline";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.Intitule);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(Discipline item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Discipline] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<Discipline> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Discipline] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int64? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Discipline] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Intitule

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public int DeleteByIntitule(System.String Intitule)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Discipline] WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Discipline]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(Discipline item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Discipline] SET Intitule = @Intitule WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<Discipline> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Discipline] SET Intitule = @Intitule WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [Discipline]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM Discipline";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region IDispositifSocial Repository

	/// <summary>
	/// Represents the DispositifSocial repository
	/// </summary>
	public partial interface IDispositifSocialRepository : IRepository<DispositifSocial>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<DispositifSocial> SelectById(System.Int64? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DispositifSocial> SelectById(System.Int64? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		System.Collections.Generic.List<DispositifSocial> SelectByIntitule(System.String Intitule);

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DispositifSocial> SelectByIntitule(System.String Intitule, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int64? Id);

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		int DeleteByIntitule(System.String Intitule);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.String Intitule);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Id, System.String Intitule);
	}

	#endregion

	#region DispositifSocial Repository

	/// <summary>
	/// Default IDispositifSocialRepository implementation 
	/// </summary>
	public partial class DispositifSocialRepository : IDispositifSocialRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<DispositifSocial> ToList()
		{
			var list = new System.Collections.Generic.List<DispositifSocial>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM DispositifSocial";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DispositifSocial();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public DispositifSocial[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DispositifSocial> ToList(int count)
		{
			var list = new System.Collections.Generic.List<DispositifSocial>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM DispositifSocial", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DispositifSocial();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public DispositifSocial[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<DispositifSocial> SelectById(System.Int64? Id)
		{
			var list = new System.Collections.Generic.List<DispositifSocial>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM DispositifSocial WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DispositifSocial WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DispositifSocial();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Intitule=?

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public System.Collections.Generic.List<DispositifSocial> SelectByIntitule(System.String Intitule)
		{
			var list = new System.Collections.Generic.List<DispositifSocial>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Intitule != null)
				{
					command.CommandText = "SELECT * FROM DispositifSocial WHERE Intitule=@Intitule";
					command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DispositifSocial WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DispositifSocial();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DispositifSocial> SelectById(System.Int64? Id, int count)
		{
			var list = new System.Collections.Generic.List<DispositifSocial>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DispositifSocial WHERE Id=@Id";					command.CommandText = "SELECT * FROM DispositifSocial WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DispositifSocial WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DispositifSocial();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Intitule=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DispositifSocial> SelectByIntitule(System.String Intitule, int count)
		{
			var list = new System.Collections.Generic.List<DispositifSocial>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Intitule != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DispositifSocial WHERE Intitule=@Intitule";					command.CommandText = "SELECT * FROM DispositifSocial WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DispositifSocial WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DispositifSocial();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [DispositifSocial]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(DispositifSocial item)
		{
			Create(item.Intitule);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > 100)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [DispositifSocial] (Intitule)  VALUES (@Intitule)";

				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [DispositifSocial] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.Int64? Id, System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > DispositifSocial.Intitule_Max_Length)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [DispositifSocial] (Id, Intitule)  VALUES (@Id, @Intitule)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<DispositifSocial> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "DispositifSocial";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.Intitule);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(DispositifSocial item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DispositifSocial] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<DispositifSocial> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DispositifSocial] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int64? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DispositifSocial] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Intitule

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public int DeleteByIntitule(System.String Intitule)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DispositifSocial] WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DispositifSocial]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(DispositifSocial item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [DispositifSocial] SET Intitule = @Intitule WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<DispositifSocial> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [DispositifSocial] SET Intitule = @Intitule WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [DispositifSocial]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM DispositifSocial";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region IDomaineActivite Repository

	/// <summary>
	/// Represents the DomaineActivite repository
	/// </summary>
	public partial interface IDomaineActiviteRepository : IRepository<DomaineActivite>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<DomaineActivite> SelectById(System.Int64? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DomaineActivite> SelectById(System.Int64? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		System.Collections.Generic.List<DomaineActivite> SelectByDiscipline(System.Int64? Discipline);

		/// <summary>
		/// Retrieves the first set of items specified by count by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DomaineActivite> SelectByDiscipline(System.Int64? Discipline, int count);

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		System.Collections.Generic.List<DomaineActivite> SelectByIntitule(System.String Intitule);

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<DomaineActivite> SelectByIntitule(System.String Intitule, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int64? Id);

		/// <summary>
		/// Delete records by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		int DeleteByDiscipline(System.Int64? Discipline);

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		int DeleteByIntitule(System.String Intitule);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.Int64? Discipline, System.String Intitule);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Id, System.Int64? Discipline, System.String Intitule);
	}

	#endregion

	#region DomaineActivite Repository

	/// <summary>
	/// Default IDomaineActiviteRepository implementation 
	/// </summary>
	public partial class DomaineActiviteRepository : IDomaineActiviteRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<DomaineActivite> ToList()
		{
			var list = new System.Collections.Generic.List<DomaineActivite>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM DomaineActivite";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DomaineActivite();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.Intitule = (reader.IsDBNull(2) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public DomaineActivite[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DomaineActivite> ToList(int count)
		{
			var list = new System.Collections.Generic.List<DomaineActivite>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM DomaineActivite", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DomaineActivite();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.Intitule = (reader.IsDBNull(2) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public DomaineActivite[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<DomaineActivite> SelectById(System.Int64? Id)
		{
			var list = new System.Collections.Generic.List<DomaineActivite>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM DomaineActivite WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DomaineActivite WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DomaineActivite();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.Intitule = (reader.IsDBNull(2) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Discipline=?

		/// <summary>
		/// Retrieves a collection of items by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		public System.Collections.Generic.List<DomaineActivite> SelectByDiscipline(System.Int64? Discipline)
		{
			var list = new System.Collections.Generic.List<DomaineActivite>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Discipline != null)
				{
					command.CommandText = "SELECT * FROM DomaineActivite WHERE Discipline=@Discipline";
					command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
					command.Parameters["@Discipline"].Value = Discipline != null ? (object)Discipline : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DomaineActivite WHERE Discipline IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DomaineActivite();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.Intitule = (reader.IsDBNull(2) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Intitule=?

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public System.Collections.Generic.List<DomaineActivite> SelectByIntitule(System.String Intitule)
		{
			var list = new System.Collections.Generic.List<DomaineActivite>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Intitule != null)
				{
					command.CommandText = "SELECT * FROM DomaineActivite WHERE Intitule=@Intitule";
					command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM DomaineActivite WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DomaineActivite();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.Intitule = (reader.IsDBNull(2) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DomaineActivite> SelectById(System.Int64? Id, int count)
		{
			var list = new System.Collections.Generic.List<DomaineActivite>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DomaineActivite WHERE Id=@Id";					command.CommandText = "SELECT * FROM DomaineActivite WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DomaineActivite WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DomaineActivite();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.Intitule = (reader.IsDBNull(2) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Discipline=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DomaineActivite> SelectByDiscipline(System.Int64? Discipline, int count)
		{
			var list = new System.Collections.Generic.List<DomaineActivite>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Discipline != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DomaineActivite WHERE Discipline=@Discipline";					command.CommandText = "SELECT * FROM DomaineActivite WHERE Discipline=@Discipline";
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters["@Discipline"].Value = Discipline != null ? (object)Discipline : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DomaineActivite WHERE Discipline IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DomaineActivite();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.Intitule = (reader.IsDBNull(2) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Intitule=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<DomaineActivite> SelectByIntitule(System.String Intitule, int count)
		{
			var list = new System.Collections.Generic.List<DomaineActivite>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Intitule != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM DomaineActivite WHERE Intitule=@Intitule";					command.CommandText = "SELECT * FROM DomaineActivite WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM DomaineActivite WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new DomaineActivite();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.Intitule = (reader.IsDBNull(2) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [DomaineActivite]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(DomaineActivite item)
		{
			Create(item.Discipline, item.Intitule);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.Int64? Discipline, System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > 100)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [DomaineActivite] (Discipline, Intitule)  VALUES (@Discipline, @Intitule)";

				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters["@Discipline"].Value = Discipline != null ? (object)Discipline : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [DomaineActivite] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="Discipline">Discipline value</param>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.Int64? Id, System.Int64? Discipline, System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > DomaineActivite.Intitule_Max_Length)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [DomaineActivite] (Id, Discipline, Intitule)  VALUES (@Id, @Discipline, @Intitule)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters["@Discipline"].Value = Discipline != null ? (object)Discipline : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<DomaineActivite> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "DomaineActivite";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.Discipline);
						record.SetValue(2, item.Intitule);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(DomaineActivite item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DomaineActivite] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<DomaineActivite> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DomaineActivite] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int64? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DomaineActivite] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Discipline

		/// <summary>
		/// Delete records by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		public int DeleteByDiscipline(System.Int64? Discipline)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DomaineActivite] WHERE Discipline=@Discipline";
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters["@Discipline"].Value = Discipline != null ? (object)Discipline : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Intitule

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public int DeleteByIntitule(System.String Intitule)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DomaineActivite] WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [DomaineActivite]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(DomaineActivite item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [DomaineActivite] SET Discipline = @Discipline, Intitule = @Intitule WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters["@Discipline"].Value = item.Discipline != null ? (object)item.Discipline : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<DomaineActivite> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [DomaineActivite] SET Discipline = @Discipline, Intitule = @Intitule WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@Discipline"].Value = item.Discipline != null ? (object)item.Discipline : System.DBNull.Value;
					command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [DomaineActivite]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM DomaineActivite";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region IEleve Repository

	/// <summary>
	/// Represents the Eleve repository
	/// </summary>
	public partial interface IEleveRepository : IRepository<Eleve>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<Eleve> SelectById(System.Int64? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Eleve> SelectById(System.Int64? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by Nom
		/// </summary>
		/// <param name="Nom">Nom value</param>
		System.Collections.Generic.List<Eleve> SelectByNom(System.String Nom);

		/// <summary>
		/// Retrieves the first set of items specified by count by Nom
		/// </summary>
		/// <param name="Nom">Nom value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Eleve> SelectByNom(System.String Nom, int count);

		/// <summary>
		/// Retrieves a collection of items by Prenom
		/// </summary>
		/// <param name="Prenom">Prenom value</param>
		System.Collections.Generic.List<Eleve> SelectByPrenom(System.String Prenom);

		/// <summary>
		/// Retrieves the first set of items specified by count by Prenom
		/// </summary>
		/// <param name="Prenom">Prenom value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Eleve> SelectByPrenom(System.String Prenom, int count);

		/// <summary>
		/// Retrieves a collection of items by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		System.Collections.Generic.List<Eleve> SelectByNiveau(System.Int64? Niveau);

		/// <summary>
		/// Retrieves the first set of items specified by count by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Eleve> SelectByNiveau(System.Int64? Niveau, int count);

		/// <summary>
		/// Retrieves a collection of items by Informations
		/// </summary>
		/// <param name="Informations">Informations value</param>
		System.Collections.Generic.List<Eleve> SelectByInformations(System.String Informations);

		/// <summary>
		/// Retrieves the first set of items specified by count by Informations
		/// </summary>
		/// <param name="Informations">Informations value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Eleve> SelectByInformations(System.String Informations, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int64? Id);

		/// <summary>
		/// Delete records by Nom
		/// </summary>
		/// <param name="Nom">Nom value</param>
		int DeleteByNom(System.String Nom);

		/// <summary>
		/// Delete records by Prenom
		/// </summary>
		/// <param name="Prenom">Prenom value</param>
		int DeleteByPrenom(System.String Prenom);

		/// <summary>
		/// Delete records by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		int DeleteByNiveau(System.Int64? Niveau);

		/// <summary>
		/// Delete records by Informations
		/// </summary>
		/// <param name="Informations">Informations value</param>
		int DeleteByInformations(System.String Informations);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.String Nom, System.String Prenom, System.Int64? Niveau, System.String Informations);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Id, System.String Nom, System.String Prenom, System.Int64? Niveau, System.String Informations);
	}

	#endregion

	#region Eleve Repository

	/// <summary>
	/// Default IEleveRepository implementation 
	/// </summary>
	public partial class EleveRepository : IEleveRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<Eleve> ToList()
		{
			var list = new System.Collections.Generic.List<Eleve>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM Eleve";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Eleve();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Nom = (reader.IsDBNull(1) ? null : reader["Nom"] as System.String);
						item.Prenom = (reader.IsDBNull(2) ? null : reader["Prenom"] as System.String);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Informations = (reader.IsDBNull(4) ? null : reader["Informations"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Eleve[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Eleve> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Eleve>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Eleve", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Eleve();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Nom = (reader.IsDBNull(1) ? null : reader["Nom"] as System.String);
						item.Prenom = (reader.IsDBNull(2) ? null : reader["Prenom"] as System.String);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Informations = (reader.IsDBNull(4) ? null : reader["Informations"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Eleve[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<Eleve> SelectById(System.Int64? Id)
		{
			var list = new System.Collections.Generic.List<Eleve>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM Eleve WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Eleve WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Eleve();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Nom = (reader.IsDBNull(1) ? null : reader["Nom"] as System.String);
						item.Prenom = (reader.IsDBNull(2) ? null : reader["Prenom"] as System.String);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Informations = (reader.IsDBNull(4) ? null : reader["Informations"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Nom=?

		/// <summary>
		/// Retrieves a collection of items by Nom
		/// </summary>
		/// <param name="Nom">Nom value</param>
		public System.Collections.Generic.List<Eleve> SelectByNom(System.String Nom)
		{
			var list = new System.Collections.Generic.List<Eleve>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Nom != null)
				{
					command.CommandText = "SELECT * FROM Eleve WHERE Nom=@Nom";
					command.Parameters.Add("@Nom", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Nom"].Value = Nom != null ? (object)Nom : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Eleve WHERE Nom IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Eleve();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Nom = (reader.IsDBNull(1) ? null : reader["Nom"] as System.String);
						item.Prenom = (reader.IsDBNull(2) ? null : reader["Prenom"] as System.String);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Informations = (reader.IsDBNull(4) ? null : reader["Informations"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Prenom=?

		/// <summary>
		/// Retrieves a collection of items by Prenom
		/// </summary>
		/// <param name="Prenom">Prenom value</param>
		public System.Collections.Generic.List<Eleve> SelectByPrenom(System.String Prenom)
		{
			var list = new System.Collections.Generic.List<Eleve>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Prenom != null)
				{
					command.CommandText = "SELECT * FROM Eleve WHERE Prenom=@Prenom";
					command.Parameters.Add("@Prenom", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Prenom"].Value = Prenom != null ? (object)Prenom : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Eleve WHERE Prenom IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Eleve();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Nom = (reader.IsDBNull(1) ? null : reader["Nom"] as System.String);
						item.Prenom = (reader.IsDBNull(2) ? null : reader["Prenom"] as System.String);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Informations = (reader.IsDBNull(4) ? null : reader["Informations"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Niveau=?

		/// <summary>
		/// Retrieves a collection of items by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		public System.Collections.Generic.List<Eleve> SelectByNiveau(System.Int64? Niveau)
		{
			var list = new System.Collections.Generic.List<Eleve>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Niveau != null)
				{
					command.CommandText = "SELECT * FROM Eleve WHERE Niveau=@Niveau";
					command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
					command.Parameters["@Niveau"].Value = Niveau != null ? (object)Niveau : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Eleve WHERE Niveau IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Eleve();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Nom = (reader.IsDBNull(1) ? null : reader["Nom"] as System.String);
						item.Prenom = (reader.IsDBNull(2) ? null : reader["Prenom"] as System.String);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Informations = (reader.IsDBNull(4) ? null : reader["Informations"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Informations=?

		/// <summary>
		/// Retrieves a collection of items by Informations
		/// </summary>
		/// <param name="Informations">Informations value</param>
		public System.Collections.Generic.List<Eleve> SelectByInformations(System.String Informations)
		{
			var list = new System.Collections.Generic.List<Eleve>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Informations != null)
				{
					command.CommandText = "SELECT * FROM Eleve WHERE Informations=@Informations";
					command.Parameters.Add("@Informations", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Informations"].Value = Informations != null ? (object)Informations : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Eleve WHERE Informations IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Eleve();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Nom = (reader.IsDBNull(1) ? null : reader["Nom"] as System.String);
						item.Prenom = (reader.IsDBNull(2) ? null : reader["Prenom"] as System.String);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Informations = (reader.IsDBNull(4) ? null : reader["Informations"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Eleve> SelectById(System.Int64? Id, int count)
		{
			var list = new System.Collections.Generic.List<Eleve>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Eleve WHERE Id=@Id";					command.CommandText = "SELECT * FROM Eleve WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Eleve WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Eleve();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Nom = (reader.IsDBNull(1) ? null : reader["Nom"] as System.String);
						item.Prenom = (reader.IsDBNull(2) ? null : reader["Prenom"] as System.String);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Informations = (reader.IsDBNull(4) ? null : reader["Informations"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Nom=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Nom
		/// </summary>
		/// <param name="Nom">Nom value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Eleve> SelectByNom(System.String Nom, int count)
		{
			var list = new System.Collections.Generic.List<Eleve>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Nom != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Eleve WHERE Nom=@Nom";					command.CommandText = "SELECT * FROM Eleve WHERE Nom=@Nom";
				command.Parameters.Add("@Nom", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Nom"].Value = Nom != null ? (object)Nom : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Eleve WHERE Nom IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Eleve();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Nom = (reader.IsDBNull(1) ? null : reader["Nom"] as System.String);
						item.Prenom = (reader.IsDBNull(2) ? null : reader["Prenom"] as System.String);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Informations = (reader.IsDBNull(4) ? null : reader["Informations"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Prenom=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Prenom
		/// </summary>
		/// <param name="Prenom">Prenom value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Eleve> SelectByPrenom(System.String Prenom, int count)
		{
			var list = new System.Collections.Generic.List<Eleve>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Prenom != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Eleve WHERE Prenom=@Prenom";					command.CommandText = "SELECT * FROM Eleve WHERE Prenom=@Prenom";
				command.Parameters.Add("@Prenom", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Prenom"].Value = Prenom != null ? (object)Prenom : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Eleve WHERE Prenom IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Eleve();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Nom = (reader.IsDBNull(1) ? null : reader["Nom"] as System.String);
						item.Prenom = (reader.IsDBNull(2) ? null : reader["Prenom"] as System.String);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Informations = (reader.IsDBNull(4) ? null : reader["Informations"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Niveau=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Eleve> SelectByNiveau(System.Int64? Niveau, int count)
		{
			var list = new System.Collections.Generic.List<Eleve>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Niveau != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Eleve WHERE Niveau=@Niveau";					command.CommandText = "SELECT * FROM Eleve WHERE Niveau=@Niveau";
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters["@Niveau"].Value = Niveau != null ? (object)Niveau : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Eleve WHERE Niveau IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Eleve();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Nom = (reader.IsDBNull(1) ? null : reader["Nom"] as System.String);
						item.Prenom = (reader.IsDBNull(2) ? null : reader["Prenom"] as System.String);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Informations = (reader.IsDBNull(4) ? null : reader["Informations"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Informations=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Informations
		/// </summary>
		/// <param name="Informations">Informations value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Eleve> SelectByInformations(System.String Informations, int count)
		{
			var list = new System.Collections.Generic.List<Eleve>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Informations != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Eleve WHERE Informations=@Informations";					command.CommandText = "SELECT * FROM Eleve WHERE Informations=@Informations";
				command.Parameters.Add("@Informations", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Informations"].Value = Informations != null ? (object)Informations : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Eleve WHERE Informations IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Eleve();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Nom = (reader.IsDBNull(1) ? null : reader["Nom"] as System.String);
						item.Prenom = (reader.IsDBNull(2) ? null : reader["Prenom"] as System.String);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Informations = (reader.IsDBNull(4) ? null : reader["Informations"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [Eleve]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(Eleve item)
		{
			Create(item.Nom, item.Prenom, item.Niveau, item.Informations);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="Nom">Nom value</param>
		/// <param name="Prenom">Prenom value</param>
		/// <param name="Niveau">Niveau value</param>
		/// <param name="Informations">Informations value</param>
		public void Create(System.String Nom, System.String Prenom, System.Int64? Niveau, System.String Informations)
		{
			if (Nom != null && Nom.Length > 100)
				throw new System.ArgumentException("Max length for Nom is 100");
			if (Prenom != null && Prenom.Length > 100)
				throw new System.ArgumentException("Max length for Prenom is 100");
			if (Informations != null && Informations.Length > 4000)
				throw new System.ArgumentException("Max length for Informations is 4000");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Eleve] (Nom, Prenom, Niveau, Informations)  VALUES (@Nom, @Prenom, @Niveau, @Informations)";

				command.Parameters.Add("@Nom", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Nom"].Value = Nom != null ? (object)Nom : System.DBNull.Value;
				command.Parameters.Add("@Prenom", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Prenom"].Value = Prenom != null ? (object)Prenom : System.DBNull.Value;
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters["@Niveau"].Value = Niveau != null ? (object)Niveau : System.DBNull.Value;
				command.Parameters.Add("@Informations", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Informations"].Value = Informations != null ? (object)Informations : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [Eleve] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="Nom">Nom value</param>
		/// <param name="Prenom">Prenom value</param>
		/// <param name="Niveau">Niveau value</param>
		/// <param name="Informations">Informations value</param>
		public void Create(System.Int64? Id, System.String Nom, System.String Prenom, System.Int64? Niveau, System.String Informations)
		{
			if (Nom != null && Nom.Length > Eleve.Nom_Max_Length)
				throw new System.ArgumentException("Max length for Nom is 100");
			if (Prenom != null && Prenom.Length > Eleve.Prenom_Max_Length)
				throw new System.ArgumentException("Max length for Prenom is 100");
			if (Informations != null && Informations.Length > Eleve.Informations_Max_Length)
				throw new System.ArgumentException("Max length for Informations is 4000");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Eleve] (Id, Nom, Prenom, Niveau, Informations)  VALUES (@Id, @Nom, @Prenom, @Niveau, @Informations)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@Nom", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Nom"].Value = Nom != null ? (object)Nom : System.DBNull.Value;
				command.Parameters.Add("@Prenom", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Prenom"].Value = Prenom != null ? (object)Prenom : System.DBNull.Value;
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters["@Niveau"].Value = Niveau != null ? (object)Niveau : System.DBNull.Value;
				command.Parameters.Add("@Informations", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Informations"].Value = Informations != null ? (object)Informations : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<Eleve> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "Eleve";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.Nom);
						record.SetValue(2, item.Prenom);
						record.SetValue(3, item.Niveau);
						record.SetValue(4, item.Informations);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(Eleve item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Eleve] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<Eleve> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Eleve] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int64? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Eleve] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Nom

		/// <summary>
		/// Delete records by Nom
		/// </summary>
		/// <param name="Nom">Nom value</param>
		public int DeleteByNom(System.String Nom)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Eleve] WHERE Nom=@Nom";
				command.Parameters.Add("@Nom", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Nom"].Value = Nom != null ? (object)Nom : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Prenom

		/// <summary>
		/// Delete records by Prenom
		/// </summary>
		/// <param name="Prenom">Prenom value</param>
		public int DeleteByPrenom(System.String Prenom)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Eleve] WHERE Prenom=@Prenom";
				command.Parameters.Add("@Prenom", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Prenom"].Value = Prenom != null ? (object)Prenom : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Niveau

		/// <summary>
		/// Delete records by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		public int DeleteByNiveau(System.Int64? Niveau)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Eleve] WHERE Niveau=@Niveau";
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters["@Niveau"].Value = Niveau != null ? (object)Niveau : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Informations

		/// <summary>
		/// Delete records by Informations
		/// </summary>
		/// <param name="Informations">Informations value</param>
		public int DeleteByInformations(System.String Informations)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Eleve] WHERE Informations=@Informations";
				command.Parameters.Add("@Informations", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Informations"].Value = Informations != null ? (object)Informations : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Eleve]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(Eleve item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Eleve] SET Nom = @Nom, Prenom = @Prenom, Niveau = @Niveau, Informations = @Informations WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@Nom", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Nom"].Value = item.Nom != null ? (object)item.Nom : System.DBNull.Value;
				command.Parameters.Add("@Prenom", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Prenom"].Value = item.Prenom != null ? (object)item.Prenom : System.DBNull.Value;
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters["@Niveau"].Value = item.Niveau != null ? (object)item.Niveau : System.DBNull.Value;
				command.Parameters.Add("@Informations", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Informations"].Value = item.Informations != null ? (object)item.Informations : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<Eleve> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Eleve] SET Nom = @Nom, Prenom = @Prenom, Niveau = @Niveau, Informations = @Informations WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Nom", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Prenom", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Informations", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@Nom"].Value = item.Nom != null ? (object)item.Nom : System.DBNull.Value;
					command.Parameters["@Prenom"].Value = item.Prenom != null ? (object)item.Prenom : System.DBNull.Value;
					command.Parameters["@Niveau"].Value = item.Niveau != null ? (object)item.Niveau : System.DBNull.Value;
					command.Parameters["@Informations"].Value = item.Informations != null ? (object)item.Informations : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [Eleve]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM Eleve";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region IEmploiTemps Repository

	/// <summary>
	/// Represents the EmploiTemps repository
	/// </summary>
	public partial interface IEmploiTempsRepository : IRepository<EmploiTemps>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		System.Collections.Generic.List<EmploiTemps> SelectByNiveau(System.Int64? Niveau);

		/// <summary>
		/// Retrieves the first set of items specified by count by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<EmploiTemps> SelectByNiveau(System.Int64? Niveau, int count);

		/// <summary>
		/// Retrieves a collection of items by JourSemaine
		/// </summary>
		/// <param name="JourSemaine">JourSemaine value</param>
		System.Collections.Generic.List<EmploiTemps> SelectByJourSemaine(System.Int64? JourSemaine);

		/// <summary>
		/// Retrieves the first set of items specified by count by JourSemaine
		/// </summary>
		/// <param name="JourSemaine">JourSemaine value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<EmploiTemps> SelectByJourSemaine(System.Int64? JourSemaine, int count);

		/// <summary>
		/// Retrieves a collection of items by Seance
		/// </summary>
		/// <param name="Seance">Seance value</param>
		System.Collections.Generic.List<EmploiTemps> SelectBySeance(System.Int64? Seance);

		/// <summary>
		/// Retrieves the first set of items specified by count by Seance
		/// </summary>
		/// <param name="Seance">Seance value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<EmploiTemps> SelectBySeance(System.Int64? Seance, int count);

		/// <summary>
		/// Delete records by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		int DeleteByNiveau(System.Int64? Niveau);

		/// <summary>
		/// Delete records by JourSemaine
		/// </summary>
		/// <param name="JourSemaine">JourSemaine value</param>
		int DeleteByJourSemaine(System.Int64? JourSemaine);

		/// <summary>
		/// Delete records by Seance
		/// </summary>
		/// <param name="Seance">Seance value</param>
		int DeleteBySeance(System.Int64? Seance);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.Int64? JourSemaine, System.Int64? Seance);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Niveau, System.Int64? JourSemaine, System.Int64? Seance);
	}

	#endregion

	#region EmploiTemps Repository

	/// <summary>
	/// Default IEmploiTempsRepository implementation 
	/// </summary>
	public partial class EmploiTempsRepository : IEmploiTempsRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<EmploiTemps> ToList()
		{
			var list = new System.Collections.Generic.List<EmploiTemps>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM EmploiTemps";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTemps();
						item.Niveau = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Niveau"]);
						item.JourSemaine = (System.Int64?) (reader.IsDBNull(1) ? null : reader["JourSemaine"]);
						item.Seance = (System.Int64?) (reader.IsDBNull(2) ? null : reader["Seance"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public EmploiTemps[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<EmploiTemps> ToList(int count)
		{
			var list = new System.Collections.Generic.List<EmploiTemps>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM EmploiTemps", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTemps();
						item.Niveau = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Niveau"]);
						item.JourSemaine = (System.Int64?) (reader.IsDBNull(1) ? null : reader["JourSemaine"]);
						item.Seance = (System.Int64?) (reader.IsDBNull(2) ? null : reader["Seance"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public EmploiTemps[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Niveau=?

		/// <summary>
		/// Retrieves a collection of items by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		public System.Collections.Generic.List<EmploiTemps> SelectByNiveau(System.Int64? Niveau)
		{
			var list = new System.Collections.Generic.List<EmploiTemps>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Niveau != null)
				{
					command.CommandText = "SELECT * FROM EmploiTemps WHERE Niveau=@Niveau";
					command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
					command.Parameters["@Niveau"].Value = Niveau != null ? (object)Niveau : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM EmploiTemps WHERE Niveau IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTemps();
						item.Niveau = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Niveau"]);
						item.JourSemaine = (System.Int64?) (reader.IsDBNull(1) ? null : reader["JourSemaine"]);
						item.Seance = (System.Int64?) (reader.IsDBNull(2) ? null : reader["Seance"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE JourSemaine=?

		/// <summary>
		/// Retrieves a collection of items by JourSemaine
		/// </summary>
		/// <param name="JourSemaine">JourSemaine value</param>
		public System.Collections.Generic.List<EmploiTemps> SelectByJourSemaine(System.Int64? JourSemaine)
		{
			var list = new System.Collections.Generic.List<EmploiTemps>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (JourSemaine != null)
				{
					command.CommandText = "SELECT * FROM EmploiTemps WHERE JourSemaine=@JourSemaine";
					command.Parameters.Add("@JourSemaine", System.Data.SqlDbType.BigInt);
					command.Parameters["@JourSemaine"].Value = JourSemaine != null ? (object)JourSemaine : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM EmploiTemps WHERE JourSemaine IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTemps();
						item.Niveau = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Niveau"]);
						item.JourSemaine = (System.Int64?) (reader.IsDBNull(1) ? null : reader["JourSemaine"]);
						item.Seance = (System.Int64?) (reader.IsDBNull(2) ? null : reader["Seance"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Seance=?

		/// <summary>
		/// Retrieves a collection of items by Seance
		/// </summary>
		/// <param name="Seance">Seance value</param>
		public System.Collections.Generic.List<EmploiTemps> SelectBySeance(System.Int64? Seance)
		{
			var list = new System.Collections.Generic.List<EmploiTemps>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Seance != null)
				{
					command.CommandText = "SELECT * FROM EmploiTemps WHERE Seance=@Seance";
					command.Parameters.Add("@Seance", System.Data.SqlDbType.BigInt);
					command.Parameters["@Seance"].Value = Seance != null ? (object)Seance : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM EmploiTemps WHERE Seance IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTemps();
						item.Niveau = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Niveau"]);
						item.JourSemaine = (System.Int64?) (reader.IsDBNull(1) ? null : reader["JourSemaine"]);
						item.Seance = (System.Int64?) (reader.IsDBNull(2) ? null : reader["Seance"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Niveau=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<EmploiTemps> SelectByNiveau(System.Int64? Niveau, int count)
		{
			var list = new System.Collections.Generic.List<EmploiTemps>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Niveau != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM EmploiTemps WHERE Niveau=@Niveau";					command.CommandText = "SELECT * FROM EmploiTemps WHERE Niveau=@Niveau";
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters["@Niveau"].Value = Niveau != null ? (object)Niveau : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM EmploiTemps WHERE Niveau IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTemps();
						item.Niveau = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Niveau"]);
						item.JourSemaine = (System.Int64?) (reader.IsDBNull(1) ? null : reader["JourSemaine"]);
						item.Seance = (System.Int64?) (reader.IsDBNull(2) ? null : reader["Seance"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE JourSemaine=?

		/// <summary>
		/// Retrieves the first set of items specified by count by JourSemaine
		/// </summary>
		/// <param name="JourSemaine">JourSemaine value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<EmploiTemps> SelectByJourSemaine(System.Int64? JourSemaine, int count)
		{
			var list = new System.Collections.Generic.List<EmploiTemps>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (JourSemaine != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM EmploiTemps WHERE JourSemaine=@JourSemaine";					command.CommandText = "SELECT * FROM EmploiTemps WHERE JourSemaine=@JourSemaine";
				command.Parameters.Add("@JourSemaine", System.Data.SqlDbType.BigInt);
				command.Parameters["@JourSemaine"].Value = JourSemaine != null ? (object)JourSemaine : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM EmploiTemps WHERE JourSemaine IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTemps();
						item.Niveau = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Niveau"]);
						item.JourSemaine = (System.Int64?) (reader.IsDBNull(1) ? null : reader["JourSemaine"]);
						item.Seance = (System.Int64?) (reader.IsDBNull(2) ? null : reader["Seance"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Seance=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Seance
		/// </summary>
		/// <param name="Seance">Seance value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<EmploiTemps> SelectBySeance(System.Int64? Seance, int count)
		{
			var list = new System.Collections.Generic.List<EmploiTemps>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Seance != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM EmploiTemps WHERE Seance=@Seance";					command.CommandText = "SELECT * FROM EmploiTemps WHERE Seance=@Seance";
				command.Parameters.Add("@Seance", System.Data.SqlDbType.BigInt);
				command.Parameters["@Seance"].Value = Seance != null ? (object)Seance : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM EmploiTemps WHERE Seance IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTemps();
						item.Niveau = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Niveau"]);
						item.JourSemaine = (System.Int64?) (reader.IsDBNull(1) ? null : reader["JourSemaine"]);
						item.Seance = (System.Int64?) (reader.IsDBNull(2) ? null : reader["Seance"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [EmploiTemps]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(EmploiTemps item)
		{
			Create(item.Niveau, item.JourSemaine, item.Seance);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="JourSemaine">JourSemaine value</param>
		/// <param name="Seance">Seance value</param>
		public void Create(System.Int64? JourSemaine, System.Int64? Seance)
		{

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [EmploiTemps] (JourSemaine, Seance)  VALUES (@JourSemaine, @Seance)";

				command.Parameters.Add("@JourSemaine", System.Data.SqlDbType.BigInt);
				command.Parameters["@JourSemaine"].Value = JourSemaine != null ? (object)JourSemaine : System.DBNull.Value;
				command.Parameters.Add("@Seance", System.Data.SqlDbType.BigInt);
				command.Parameters["@Seance"].Value = Seance != null ? (object)Seance : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [EmploiTemps] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		/// <param name="JourSemaine">JourSemaine value</param>
		/// <param name="Seance">Seance value</param>
		public void Create(System.Int64? Niveau, System.Int64? JourSemaine, System.Int64? Seance)
		{

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [EmploiTemps] (Niveau, JourSemaine, Seance)  VALUES (@Niveau, @JourSemaine, @Seance)";

				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters["@Niveau"].Value = Niveau != null ? (object)Niveau : System.DBNull.Value;
				command.Parameters.Add("@JourSemaine", System.Data.SqlDbType.BigInt);
				command.Parameters["@JourSemaine"].Value = JourSemaine != null ? (object)JourSemaine : System.DBNull.Value;
				command.Parameters.Add("@Seance", System.Data.SqlDbType.BigInt);
				command.Parameters["@Seance"].Value = Seance != null ? (object)Seance : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<EmploiTemps> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "EmploiTemps";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(0, item.Niveau);
						record.SetValue(1, item.JourSemaine);
						record.SetValue(2, item.Seance);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(EmploiTemps item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EmploiTemps] WHERE Niveau = @Niveau";

				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters["@Niveau"].Value = item.Niveau != null ? (object)item.Niveau : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<EmploiTemps> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EmploiTemps] WHERE Niveau = @Niveau";
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Niveau"].Value = item.Niveau != null ? (object)item.Niveau : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Niveau

		/// <summary>
		/// Delete records by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		public int DeleteByNiveau(System.Int64? Niveau)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EmploiTemps] WHERE Niveau=@Niveau";
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters["@Niveau"].Value = Niveau != null ? (object)Niveau : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY JourSemaine

		/// <summary>
		/// Delete records by JourSemaine
		/// </summary>
		/// <param name="JourSemaine">JourSemaine value</param>
		public int DeleteByJourSemaine(System.Int64? JourSemaine)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EmploiTemps] WHERE JourSemaine=@JourSemaine";
				command.Parameters.Add("@JourSemaine", System.Data.SqlDbType.BigInt);
				command.Parameters["@JourSemaine"].Value = JourSemaine != null ? (object)JourSemaine : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Seance

		/// <summary>
		/// Delete records by Seance
		/// </summary>
		/// <param name="Seance">Seance value</param>
		public int DeleteBySeance(System.Int64? Seance)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EmploiTemps] WHERE Seance=@Seance";
				command.Parameters.Add("@Seance", System.Data.SqlDbType.BigInt);
				command.Parameters["@Seance"].Value = Seance != null ? (object)Seance : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EmploiTemps]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(EmploiTemps item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [EmploiTemps] SET JourSemaine = @JourSemaine, Seance = @Seance WHERE Niveau = @Niveau";

				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters["@Niveau"].Value = item.Niveau != null ? (object)item.Niveau : System.DBNull.Value;
				command.Parameters.Add("@JourSemaine", System.Data.SqlDbType.BigInt);
				command.Parameters["@JourSemaine"].Value = item.JourSemaine != null ? (object)item.JourSemaine : System.DBNull.Value;
				command.Parameters.Add("@Seance", System.Data.SqlDbType.BigInt);
				command.Parameters["@Seance"].Value = item.Seance != null ? (object)item.Seance : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<EmploiTemps> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [EmploiTemps] SET JourSemaine = @JourSemaine, Seance = @Seance WHERE Niveau = @Niveau";
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@JourSemaine", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Seance", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Niveau"].Value = item.Niveau != null ? (object)item.Niveau : System.DBNull.Value;
					command.Parameters["@JourSemaine"].Value = item.JourSemaine != null ? (object)item.JourSemaine : System.DBNull.Value;
					command.Parameters["@Seance"].Value = item.Seance != null ? (object)item.Seance : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [EmploiTemps]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM EmploiTemps";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region IEmploiTempsSeance Repository

	/// <summary>
	/// Represents the EmploiTempsSeance repository
	/// </summary>
	public partial interface IEmploiTempsSeanceRepository : IRepository<EmploiTempsSeance>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<EmploiTempsSeance> SelectById(System.Int64? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<EmploiTempsSeance> SelectById(System.Int64? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by HeureDebut
		/// </summary>
		/// <param name="HeureDebut">HeureDebut value</param>
		System.Collections.Generic.List<EmploiTempsSeance> SelectByHeureDebut(System.String HeureDebut);

		/// <summary>
		/// Retrieves the first set of items specified by count by HeureDebut
		/// </summary>
		/// <param name="HeureDebut">HeureDebut value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<EmploiTempsSeance> SelectByHeureDebut(System.String HeureDebut, int count);

		/// <summary>
		/// Retrieves a collection of items by HeureFin
		/// </summary>
		/// <param name="HeureFin">HeureFin value</param>
		System.Collections.Generic.List<EmploiTempsSeance> SelectByHeureFin(System.String HeureFin);

		/// <summary>
		/// Retrieves the first set of items specified by count by HeureFin
		/// </summary>
		/// <param name="HeureFin">HeureFin value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<EmploiTempsSeance> SelectByHeureFin(System.String HeureFin, int count);

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		System.Collections.Generic.List<EmploiTempsSeance> SelectByIntitule(System.String Intitule);

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<EmploiTempsSeance> SelectByIntitule(System.String Intitule, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int64? Id);

		/// <summary>
		/// Delete records by HeureDebut
		/// </summary>
		/// <param name="HeureDebut">HeureDebut value</param>
		int DeleteByHeureDebut(System.String HeureDebut);

		/// <summary>
		/// Delete records by HeureFin
		/// </summary>
		/// <param name="HeureFin">HeureFin value</param>
		int DeleteByHeureFin(System.String HeureFin);

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		int DeleteByIntitule(System.String Intitule);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.String HeureDebut, System.String HeureFin, System.String Intitule);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Id, System.String HeureDebut, System.String HeureFin, System.String Intitule);
	}

	#endregion

	#region EmploiTempsSeance Repository

	/// <summary>
	/// Default IEmploiTempsSeanceRepository implementation 
	/// </summary>
	public partial class EmploiTempsSeanceRepository : IEmploiTempsSeanceRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<EmploiTempsSeance> ToList()
		{
			var list = new System.Collections.Generic.List<EmploiTempsSeance>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM EmploiTempsSeance";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTempsSeance();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.HeureDebut = (reader.IsDBNull(1) ? null : reader["HeureDebut"] as System.String);
						item.HeureFin = (reader.IsDBNull(2) ? null : reader["HeureFin"] as System.String);
						item.Intitule = (reader.IsDBNull(3) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public EmploiTempsSeance[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<EmploiTempsSeance> ToList(int count)
		{
			var list = new System.Collections.Generic.List<EmploiTempsSeance>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM EmploiTempsSeance", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTempsSeance();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.HeureDebut = (reader.IsDBNull(1) ? null : reader["HeureDebut"] as System.String);
						item.HeureFin = (reader.IsDBNull(2) ? null : reader["HeureFin"] as System.String);
						item.Intitule = (reader.IsDBNull(3) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public EmploiTempsSeance[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<EmploiTempsSeance> SelectById(System.Int64? Id)
		{
			var list = new System.Collections.Generic.List<EmploiTempsSeance>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM EmploiTempsSeance WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM EmploiTempsSeance WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTempsSeance();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.HeureDebut = (reader.IsDBNull(1) ? null : reader["HeureDebut"] as System.String);
						item.HeureFin = (reader.IsDBNull(2) ? null : reader["HeureFin"] as System.String);
						item.Intitule = (reader.IsDBNull(3) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE HeureDebut=?

		/// <summary>
		/// Retrieves a collection of items by HeureDebut
		/// </summary>
		/// <param name="HeureDebut">HeureDebut value</param>
		public System.Collections.Generic.List<EmploiTempsSeance> SelectByHeureDebut(System.String HeureDebut)
		{
			var list = new System.Collections.Generic.List<EmploiTempsSeance>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (HeureDebut != null)
				{
					command.CommandText = "SELECT * FROM EmploiTempsSeance WHERE HeureDebut=@HeureDebut";
					command.Parameters.Add("@HeureDebut", System.Data.SqlDbType.NVarChar);
					command.Parameters["@HeureDebut"].Value = HeureDebut != null ? (object)HeureDebut : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM EmploiTempsSeance WHERE HeureDebut IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTempsSeance();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.HeureDebut = (reader.IsDBNull(1) ? null : reader["HeureDebut"] as System.String);
						item.HeureFin = (reader.IsDBNull(2) ? null : reader["HeureFin"] as System.String);
						item.Intitule = (reader.IsDBNull(3) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE HeureFin=?

		/// <summary>
		/// Retrieves a collection of items by HeureFin
		/// </summary>
		/// <param name="HeureFin">HeureFin value</param>
		public System.Collections.Generic.List<EmploiTempsSeance> SelectByHeureFin(System.String HeureFin)
		{
			var list = new System.Collections.Generic.List<EmploiTempsSeance>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (HeureFin != null)
				{
					command.CommandText = "SELECT * FROM EmploiTempsSeance WHERE HeureFin=@HeureFin";
					command.Parameters.Add("@HeureFin", System.Data.SqlDbType.NVarChar);
					command.Parameters["@HeureFin"].Value = HeureFin != null ? (object)HeureFin : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM EmploiTempsSeance WHERE HeureFin IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTempsSeance();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.HeureDebut = (reader.IsDBNull(1) ? null : reader["HeureDebut"] as System.String);
						item.HeureFin = (reader.IsDBNull(2) ? null : reader["HeureFin"] as System.String);
						item.Intitule = (reader.IsDBNull(3) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Intitule=?

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public System.Collections.Generic.List<EmploiTempsSeance> SelectByIntitule(System.String Intitule)
		{
			var list = new System.Collections.Generic.List<EmploiTempsSeance>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Intitule != null)
				{
					command.CommandText = "SELECT * FROM EmploiTempsSeance WHERE Intitule=@Intitule";
					command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM EmploiTempsSeance WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTempsSeance();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.HeureDebut = (reader.IsDBNull(1) ? null : reader["HeureDebut"] as System.String);
						item.HeureFin = (reader.IsDBNull(2) ? null : reader["HeureFin"] as System.String);
						item.Intitule = (reader.IsDBNull(3) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<EmploiTempsSeance> SelectById(System.Int64? Id, int count)
		{
			var list = new System.Collections.Generic.List<EmploiTempsSeance>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM EmploiTempsSeance WHERE Id=@Id";					command.CommandText = "SELECT * FROM EmploiTempsSeance WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM EmploiTempsSeance WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTempsSeance();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.HeureDebut = (reader.IsDBNull(1) ? null : reader["HeureDebut"] as System.String);
						item.HeureFin = (reader.IsDBNull(2) ? null : reader["HeureFin"] as System.String);
						item.Intitule = (reader.IsDBNull(3) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE HeureDebut=?

		/// <summary>
		/// Retrieves the first set of items specified by count by HeureDebut
		/// </summary>
		/// <param name="HeureDebut">HeureDebut value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<EmploiTempsSeance> SelectByHeureDebut(System.String HeureDebut, int count)
		{
			var list = new System.Collections.Generic.List<EmploiTempsSeance>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (HeureDebut != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM EmploiTempsSeance WHERE HeureDebut=@HeureDebut";					command.CommandText = "SELECT * FROM EmploiTempsSeance WHERE HeureDebut=@HeureDebut";
				command.Parameters.Add("@HeureDebut", System.Data.SqlDbType.NVarChar);
				command.Parameters["@HeureDebut"].Value = HeureDebut != null ? (object)HeureDebut : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM EmploiTempsSeance WHERE HeureDebut IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTempsSeance();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.HeureDebut = (reader.IsDBNull(1) ? null : reader["HeureDebut"] as System.String);
						item.HeureFin = (reader.IsDBNull(2) ? null : reader["HeureFin"] as System.String);
						item.Intitule = (reader.IsDBNull(3) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE HeureFin=?

		/// <summary>
		/// Retrieves the first set of items specified by count by HeureFin
		/// </summary>
		/// <param name="HeureFin">HeureFin value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<EmploiTempsSeance> SelectByHeureFin(System.String HeureFin, int count)
		{
			var list = new System.Collections.Generic.List<EmploiTempsSeance>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (HeureFin != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM EmploiTempsSeance WHERE HeureFin=@HeureFin";					command.CommandText = "SELECT * FROM EmploiTempsSeance WHERE HeureFin=@HeureFin";
				command.Parameters.Add("@HeureFin", System.Data.SqlDbType.NVarChar);
				command.Parameters["@HeureFin"].Value = HeureFin != null ? (object)HeureFin : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM EmploiTempsSeance WHERE HeureFin IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTempsSeance();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.HeureDebut = (reader.IsDBNull(1) ? null : reader["HeureDebut"] as System.String);
						item.HeureFin = (reader.IsDBNull(2) ? null : reader["HeureFin"] as System.String);
						item.Intitule = (reader.IsDBNull(3) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Intitule=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<EmploiTempsSeance> SelectByIntitule(System.String Intitule, int count)
		{
			var list = new System.Collections.Generic.List<EmploiTempsSeance>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Intitule != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM EmploiTempsSeance WHERE Intitule=@Intitule";					command.CommandText = "SELECT * FROM EmploiTempsSeance WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM EmploiTempsSeance WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EmploiTempsSeance();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.HeureDebut = (reader.IsDBNull(1) ? null : reader["HeureDebut"] as System.String);
						item.HeureFin = (reader.IsDBNull(2) ? null : reader["HeureFin"] as System.String);
						item.Intitule = (reader.IsDBNull(3) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [EmploiTempsSeance]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(EmploiTempsSeance item)
		{
			Create(item.HeureDebut, item.HeureFin, item.Intitule);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="HeureDebut">HeureDebut value</param>
		/// <param name="HeureFin">HeureFin value</param>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.String HeureDebut, System.String HeureFin, System.String Intitule)
		{
			if (HeureDebut != null && HeureDebut.Length > 5)
				throw new System.ArgumentException("Max length for HeureDebut is 5");
			if (HeureFin != null && HeureFin.Length > 5)
				throw new System.ArgumentException("Max length for HeureFin is 5");
			if (Intitule != null && Intitule.Length > 100)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [EmploiTempsSeance] (HeureDebut, HeureFin, Intitule)  VALUES (@HeureDebut, @HeureFin, @Intitule)";

				command.Parameters.Add("@HeureDebut", System.Data.SqlDbType.NVarChar);
				command.Parameters["@HeureDebut"].Value = HeureDebut != null ? (object)HeureDebut : System.DBNull.Value;
				command.Parameters.Add("@HeureFin", System.Data.SqlDbType.NVarChar);
				command.Parameters["@HeureFin"].Value = HeureFin != null ? (object)HeureFin : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [EmploiTempsSeance] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="HeureDebut">HeureDebut value</param>
		/// <param name="HeureFin">HeureFin value</param>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.Int64? Id, System.String HeureDebut, System.String HeureFin, System.String Intitule)
		{
			if (HeureDebut != null && HeureDebut.Length > EmploiTempsSeance.HeureDebut_Max_Length)
				throw new System.ArgumentException("Max length for HeureDebut is 5");
			if (HeureFin != null && HeureFin.Length > EmploiTempsSeance.HeureFin_Max_Length)
				throw new System.ArgumentException("Max length for HeureFin is 5");
			if (Intitule != null && Intitule.Length > EmploiTempsSeance.Intitule_Max_Length)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [EmploiTempsSeance] (Id, HeureDebut, HeureFin, Intitule)  VALUES (@Id, @HeureDebut, @HeureFin, @Intitule)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@HeureDebut", System.Data.SqlDbType.NVarChar);
				command.Parameters["@HeureDebut"].Value = HeureDebut != null ? (object)HeureDebut : System.DBNull.Value;
				command.Parameters.Add("@HeureFin", System.Data.SqlDbType.NVarChar);
				command.Parameters["@HeureFin"].Value = HeureFin != null ? (object)HeureFin : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<EmploiTempsSeance> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "EmploiTempsSeance";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.HeureDebut);
						record.SetValue(2, item.HeureFin);
						record.SetValue(3, item.Intitule);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(EmploiTempsSeance item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EmploiTempsSeance] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<EmploiTempsSeance> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EmploiTempsSeance] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int64? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EmploiTempsSeance] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY HeureDebut

		/// <summary>
		/// Delete records by HeureDebut
		/// </summary>
		/// <param name="HeureDebut">HeureDebut value</param>
		public int DeleteByHeureDebut(System.String HeureDebut)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EmploiTempsSeance] WHERE HeureDebut=@HeureDebut";
				command.Parameters.Add("@HeureDebut", System.Data.SqlDbType.NVarChar);
				command.Parameters["@HeureDebut"].Value = HeureDebut != null ? (object)HeureDebut : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY HeureFin

		/// <summary>
		/// Delete records by HeureFin
		/// </summary>
		/// <param name="HeureFin">HeureFin value</param>
		public int DeleteByHeureFin(System.String HeureFin)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EmploiTempsSeance] WHERE HeureFin=@HeureFin";
				command.Parameters.Add("@HeureFin", System.Data.SqlDbType.NVarChar);
				command.Parameters["@HeureFin"].Value = HeureFin != null ? (object)HeureFin : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Intitule

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public int DeleteByIntitule(System.String Intitule)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EmploiTempsSeance] WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EmploiTempsSeance]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(EmploiTempsSeance item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [EmploiTempsSeance] SET HeureDebut = @HeureDebut, HeureFin = @HeureFin, Intitule = @Intitule WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@HeureDebut", System.Data.SqlDbType.NVarChar);
				command.Parameters["@HeureDebut"].Value = item.HeureDebut != null ? (object)item.HeureDebut : System.DBNull.Value;
				command.Parameters.Add("@HeureFin", System.Data.SqlDbType.NVarChar);
				command.Parameters["@HeureFin"].Value = item.HeureFin != null ? (object)item.HeureFin : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<EmploiTempsSeance> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [EmploiTempsSeance] SET HeureDebut = @HeureDebut, HeureFin = @HeureFin, Intitule = @Intitule WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@HeureDebut", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@HeureFin", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@HeureDebut"].Value = item.HeureDebut != null ? (object)item.HeureDebut : System.DBNull.Value;
					command.Parameters["@HeureFin"].Value = item.HeureFin != null ? (object)item.HeureFin : System.DBNull.Value;
					command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [EmploiTempsSeance]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM EmploiTempsSeance";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region IEvaluationEnvisagee Repository

	/// <summary>
	/// Represents the EvaluationEnvisagee repository
	/// </summary>
	public partial interface IEvaluationEnvisageeRepository : IRepository<EvaluationEnvisagee>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<EvaluationEnvisagee> SelectById(System.Int64? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<EvaluationEnvisagee> SelectById(System.Int64? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		System.Collections.Generic.List<EvaluationEnvisagee> SelectByIntitule(System.String Intitule);

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<EvaluationEnvisagee> SelectByIntitule(System.String Intitule, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int64? Id);

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		int DeleteByIntitule(System.String Intitule);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.String Intitule);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Id, System.String Intitule);
	}

	#endregion

	#region EvaluationEnvisagee Repository

	/// <summary>
	/// Default IEvaluationEnvisageeRepository implementation 
	/// </summary>
	public partial class EvaluationEnvisageeRepository : IEvaluationEnvisageeRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<EvaluationEnvisagee> ToList()
		{
			var list = new System.Collections.Generic.List<EvaluationEnvisagee>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM EvaluationEnvisagee";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EvaluationEnvisagee();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public EvaluationEnvisagee[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<EvaluationEnvisagee> ToList(int count)
		{
			var list = new System.Collections.Generic.List<EvaluationEnvisagee>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM EvaluationEnvisagee", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EvaluationEnvisagee();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public EvaluationEnvisagee[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<EvaluationEnvisagee> SelectById(System.Int64? Id)
		{
			var list = new System.Collections.Generic.List<EvaluationEnvisagee>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM EvaluationEnvisagee WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM EvaluationEnvisagee WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EvaluationEnvisagee();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Intitule=?

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public System.Collections.Generic.List<EvaluationEnvisagee> SelectByIntitule(System.String Intitule)
		{
			var list = new System.Collections.Generic.List<EvaluationEnvisagee>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Intitule != null)
				{
					command.CommandText = "SELECT * FROM EvaluationEnvisagee WHERE Intitule=@Intitule";
					command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM EvaluationEnvisagee WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EvaluationEnvisagee();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<EvaluationEnvisagee> SelectById(System.Int64? Id, int count)
		{
			var list = new System.Collections.Generic.List<EvaluationEnvisagee>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM EvaluationEnvisagee WHERE Id=@Id";					command.CommandText = "SELECT * FROM EvaluationEnvisagee WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM EvaluationEnvisagee WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EvaluationEnvisagee();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Intitule=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<EvaluationEnvisagee> SelectByIntitule(System.String Intitule, int count)
		{
			var list = new System.Collections.Generic.List<EvaluationEnvisagee>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Intitule != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM EvaluationEnvisagee WHERE Intitule=@Intitule";					command.CommandText = "SELECT * FROM EvaluationEnvisagee WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM EvaluationEnvisagee WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new EvaluationEnvisagee();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [EvaluationEnvisagee]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(EvaluationEnvisagee item)
		{
			Create(item.Intitule);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > 100)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [EvaluationEnvisagee] (Intitule)  VALUES (@Intitule)";

				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [EvaluationEnvisagee] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.Int64? Id, System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > EvaluationEnvisagee.Intitule_Max_Length)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [EvaluationEnvisagee] (Id, Intitule)  VALUES (@Id, @Intitule)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<EvaluationEnvisagee> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "EvaluationEnvisagee";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.Intitule);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(EvaluationEnvisagee item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EvaluationEnvisagee] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<EvaluationEnvisagee> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EvaluationEnvisagee] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int64? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EvaluationEnvisagee] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Intitule

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public int DeleteByIntitule(System.String Intitule)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EvaluationEnvisagee] WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [EvaluationEnvisagee]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(EvaluationEnvisagee item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [EvaluationEnvisagee] SET Intitule = @Intitule WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<EvaluationEnvisagee> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [EvaluationEnvisagee] SET Intitule = @Intitule WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [EvaluationEnvisagee]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM EvaluationEnvisagee";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region IFichePreparatoire Repository

	/// <summary>
	/// Represents the FichePreparatoire repository
	/// </summary>
	public partial interface IFichePreparatoireRepository : IRepository<FichePreparatoire>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<FichePreparatoire> SelectById(System.Int64? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<FichePreparatoire> SelectById(System.Int64? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByDiscipline(System.Int64? Discipline);

		/// <summary>
		/// Retrieves the first set of items specified by count by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByDiscipline(System.Int64? Discipline, int count);

		/// <summary>
		/// Retrieves a collection of items by DomaineActivite
		/// </summary>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByDomaineActivite(System.Int64? DomaineActivite);

		/// <summary>
		/// Retrieves the first set of items specified by count by DomaineActivite
		/// </summary>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByDomaineActivite(System.Int64? DomaineActivite, int count);

		/// <summary>
		/// Retrieves a collection of items by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByNiveau(System.Int64? Niveau);

		/// <summary>
		/// Retrieves the first set of items specified by count by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByNiveau(System.Int64? Niveau, int count);

		/// <summary>
		/// Retrieves a collection of items by Sequence
		/// </summary>
		/// <param name="Sequence">Sequence value</param>
		System.Collections.Generic.List<FichePreparatoire> SelectBySequence(System.String Sequence);

		/// <summary>
		/// Retrieves the first set of items specified by count by Sequence
		/// </summary>
		/// <param name="Sequence">Sequence value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<FichePreparatoire> SelectBySequence(System.String Sequence, int count);

		/// <summary>
		/// Retrieves a collection of items by NumeroSeance
		/// </summary>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByNumeroSeance(System.Int32? NumeroSeance);

		/// <summary>
		/// Retrieves the first set of items specified by count by NumeroSeance
		/// </summary>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByNumeroSeance(System.Int32? NumeroSeance, int count);

		/// <summary>
		/// Retrieves a collection of items by TitreSeance
		/// </summary>
		/// <param name="TitreSeance">TitreSeance value</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByTitreSeance(System.String TitreSeance);

		/// <summary>
		/// Retrieves the first set of items specified by count by TitreSeance
		/// </summary>
		/// <param name="TitreSeance">TitreSeance value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByTitreSeance(System.String TitreSeance, int count);

		/// <summary>
		/// Retrieves a collection of items by Date
		/// </summary>
		/// <param name="Date">Date value</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByDate(System.DateTime? Date);

		/// <summary>
		/// Retrieves the first set of items specified by count by Date
		/// </summary>
		/// <param name="Date">Date value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByDate(System.DateTime? Date, int count);

		/// <summary>
		/// Retrieves a collection of items by CompetencesVisees
		/// </summary>
		/// <param name="CompetencesVisees">CompetencesVisees value</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByCompetencesVisees(System.String CompetencesVisees);

		/// <summary>
		/// Retrieves the first set of items specified by count by CompetencesVisees
		/// </summary>
		/// <param name="CompetencesVisees">CompetencesVisees value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByCompetencesVisees(System.String CompetencesVisees, int count);

		/// <summary>
		/// Retrieves a collection of items by CompetencesRequises
		/// </summary>
		/// <param name="CompetencesRequises">CompetencesRequises value</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByCompetencesRequises(System.String CompetencesRequises);

		/// <summary>
		/// Retrieves the first set of items specified by count by CompetencesRequises
		/// </summary>
		/// <param name="CompetencesRequises">CompetencesRequises value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByCompetencesRequises(System.String CompetencesRequises, int count);

		/// <summary>
		/// Retrieves a collection of items by Objectifs
		/// </summary>
		/// <param name="Objectifs">Objectifs value</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByObjectifs(System.String Objectifs);

		/// <summary>
		/// Retrieves the first set of items specified by count by Objectifs
		/// </summary>
		/// <param name="Objectifs">Objectifs value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByObjectifs(System.String Objectifs, int count);

		/// <summary>
		/// Retrieves a collection of items by EvaluationEnvisagee
		/// </summary>
		/// <param name="EvaluationEnvisagee">EvaluationEnvisagee value</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByEvaluationEnvisagee(System.Int64? EvaluationEnvisagee);

		/// <summary>
		/// Retrieves the first set of items specified by count by EvaluationEnvisagee
		/// </summary>
		/// <param name="EvaluationEnvisagee">EvaluationEnvisagee value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByEvaluationEnvisagee(System.Int64? EvaluationEnvisagee, int count);

		/// <summary>
		/// Retrieves a collection of items by ComplementEvaluationEnvisagee
		/// </summary>
		/// <param name="ComplementEvaluationEnvisagee">ComplementEvaluationEnvisagee value</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByComplementEvaluationEnvisagee(System.String ComplementEvaluationEnvisagee);

		/// <summary>
		/// Retrieves the first set of items specified by count by ComplementEvaluationEnvisagee
		/// </summary>
		/// <param name="ComplementEvaluationEnvisagee">ComplementEvaluationEnvisagee value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByComplementEvaluationEnvisagee(System.String ComplementEvaluationEnvisagee, int count);

		/// <summary>
		/// Retrieves a collection of items by BilanPositif
		/// </summary>
		/// <param name="BilanPositif">BilanPositif value</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByBilanPositif(System.String BilanPositif);

		/// <summary>
		/// Retrieves the first set of items specified by count by BilanPositif
		/// </summary>
		/// <param name="BilanPositif">BilanPositif value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByBilanPositif(System.String BilanPositif, int count);

		/// <summary>
		/// Retrieves a collection of items by BilanNegatif
		/// </summary>
		/// <param name="BilanNegatif">BilanNegatif value</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByBilanNegatif(System.String BilanNegatif);

		/// <summary>
		/// Retrieves the first set of items specified by count by BilanNegatif
		/// </summary>
		/// <param name="BilanNegatif">BilanNegatif value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<FichePreparatoire> SelectByBilanNegatif(System.String BilanNegatif, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int64? Id);

		/// <summary>
		/// Delete records by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		int DeleteByDiscipline(System.Int64? Discipline);

		/// <summary>
		/// Delete records by DomaineActivite
		/// </summary>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		int DeleteByDomaineActivite(System.Int64? DomaineActivite);

		/// <summary>
		/// Delete records by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		int DeleteByNiveau(System.Int64? Niveau);

		/// <summary>
		/// Delete records by Sequence
		/// </summary>
		/// <param name="Sequence">Sequence value</param>
		int DeleteBySequence(System.String Sequence);

		/// <summary>
		/// Delete records by NumeroSeance
		/// </summary>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		int DeleteByNumeroSeance(System.Int32? NumeroSeance);

		/// <summary>
		/// Delete records by TitreSeance
		/// </summary>
		/// <param name="TitreSeance">TitreSeance value</param>
		int DeleteByTitreSeance(System.String TitreSeance);

		/// <summary>
		/// Delete records by Date
		/// </summary>
		/// <param name="Date">Date value</param>
		int DeleteByDate(System.DateTime? Date);

		/// <summary>
		/// Delete records by CompetencesVisees
		/// </summary>
		/// <param name="CompetencesVisees">CompetencesVisees value</param>
		int DeleteByCompetencesVisees(System.String CompetencesVisees);

		/// <summary>
		/// Delete records by CompetencesRequises
		/// </summary>
		/// <param name="CompetencesRequises">CompetencesRequises value</param>
		int DeleteByCompetencesRequises(System.String CompetencesRequises);

		/// <summary>
		/// Delete records by Objectifs
		/// </summary>
		/// <param name="Objectifs">Objectifs value</param>
		int DeleteByObjectifs(System.String Objectifs);

		/// <summary>
		/// Delete records by EvaluationEnvisagee
		/// </summary>
		/// <param name="EvaluationEnvisagee">EvaluationEnvisagee value</param>
		int DeleteByEvaluationEnvisagee(System.Int64? EvaluationEnvisagee);

		/// <summary>
		/// Delete records by ComplementEvaluationEnvisagee
		/// </summary>
		/// <param name="ComplementEvaluationEnvisagee">ComplementEvaluationEnvisagee value</param>
		int DeleteByComplementEvaluationEnvisagee(System.String ComplementEvaluationEnvisagee);

		/// <summary>
		/// Delete records by BilanPositif
		/// </summary>
		/// <param name="BilanPositif">BilanPositif value</param>
		int DeleteByBilanPositif(System.String BilanPositif);

		/// <summary>
		/// Delete records by BilanNegatif
		/// </summary>
		/// <param name="BilanNegatif">BilanNegatif value</param>
		int DeleteByBilanNegatif(System.String BilanNegatif);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.Int64? Discipline, System.Int64? DomaineActivite, System.Int64? Niveau, System.String Sequence, System.Int32? NumeroSeance, System.String TitreSeance, System.DateTime? Date, System.String CompetencesVisees, System.String CompetencesRequises, System.String Objectifs, System.Int64? EvaluationEnvisagee, System.String ComplementEvaluationEnvisagee, System.String BilanPositif, System.String BilanNegatif);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Id, System.Int64? Discipline, System.Int64? DomaineActivite, System.Int64? Niveau, System.String Sequence, System.Int32? NumeroSeance, System.String TitreSeance, System.DateTime? Date, System.String CompetencesVisees, System.String CompetencesRequises, System.String Objectifs, System.Int64? EvaluationEnvisagee, System.String ComplementEvaluationEnvisagee, System.String BilanPositif, System.String BilanNegatif);
	}

	#endregion

	#region FichePreparatoire Repository

	/// <summary>
	/// Default IFichePreparatoireRepository implementation 
	/// </summary>
	public partial class FichePreparatoireRepository : IFichePreparatoireRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<FichePreparatoire> ToList()
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM FichePreparatoire";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public FichePreparatoire[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> ToList(int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM FichePreparatoire", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public FichePreparatoire[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectById(System.Int64? Id)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Discipline=?

		/// <summary>
		/// Retrieves a collection of items by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByDiscipline(System.Int64? Discipline)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Discipline != null)
				{
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Discipline=@Discipline";
					command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
					command.Parameters["@Discipline"].Value = Discipline != null ? (object)Discipline : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Discipline IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE DomaineActivite=?

		/// <summary>
		/// Retrieves a collection of items by DomaineActivite
		/// </summary>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByDomaineActivite(System.Int64? DomaineActivite)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (DomaineActivite != null)
				{
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE DomaineActivite=@DomaineActivite";
					command.Parameters.Add("@DomaineActivite", System.Data.SqlDbType.BigInt);
					command.Parameters["@DomaineActivite"].Value = DomaineActivite != null ? (object)DomaineActivite : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE DomaineActivite IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Niveau=?

		/// <summary>
		/// Retrieves a collection of items by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByNiveau(System.Int64? Niveau)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Niveau != null)
				{
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Niveau=@Niveau";
					command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
					command.Parameters["@Niveau"].Value = Niveau != null ? (object)Niveau : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Niveau IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Sequence=?

		/// <summary>
		/// Retrieves a collection of items by Sequence
		/// </summary>
		/// <param name="Sequence">Sequence value</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectBySequence(System.String Sequence)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Sequence != null)
				{
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Sequence=@Sequence";
					command.Parameters.Add("@Sequence", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Sequence"].Value = Sequence != null ? (object)Sequence : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Sequence IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE NumeroSeance=?

		/// <summary>
		/// Retrieves a collection of items by NumeroSeance
		/// </summary>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByNumeroSeance(System.Int32? NumeroSeance)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (NumeroSeance != null)
				{
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE NumeroSeance=@NumeroSeance";
					command.Parameters.Add("@NumeroSeance", System.Data.SqlDbType.Int);
					command.Parameters["@NumeroSeance"].Value = NumeroSeance != null ? (object)NumeroSeance : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE NumeroSeance IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE TitreSeance=?

		/// <summary>
		/// Retrieves a collection of items by TitreSeance
		/// </summary>
		/// <param name="TitreSeance">TitreSeance value</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByTitreSeance(System.String TitreSeance)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (TitreSeance != null)
				{
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE TitreSeance=@TitreSeance";
					command.Parameters.Add("@TitreSeance", System.Data.SqlDbType.NVarChar);
					command.Parameters["@TitreSeance"].Value = TitreSeance != null ? (object)TitreSeance : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE TitreSeance IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Date=?

		/// <summary>
		/// Retrieves a collection of items by Date
		/// </summary>
		/// <param name="Date">Date value</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByDate(System.DateTime? Date)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Date != null)
				{
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Date=@Date";
					command.Parameters.Add("@Date", System.Data.SqlDbType.DateTime);
					command.Parameters["@Date"].Value = Date != null ? (object)Date : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Date IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE CompetencesVisees=?

		/// <summary>
		/// Retrieves a collection of items by CompetencesVisees
		/// </summary>
		/// <param name="CompetencesVisees">CompetencesVisees value</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByCompetencesVisees(System.String CompetencesVisees)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (CompetencesVisees != null)
				{
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE CompetencesVisees=@CompetencesVisees";
					command.Parameters.Add("@CompetencesVisees", System.Data.SqlDbType.NVarChar);
					command.Parameters["@CompetencesVisees"].Value = CompetencesVisees != null ? (object)CompetencesVisees : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE CompetencesVisees IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE CompetencesRequises=?

		/// <summary>
		/// Retrieves a collection of items by CompetencesRequises
		/// </summary>
		/// <param name="CompetencesRequises">CompetencesRequises value</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByCompetencesRequises(System.String CompetencesRequises)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (CompetencesRequises != null)
				{
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE CompetencesRequises=@CompetencesRequises";
					command.Parameters.Add("@CompetencesRequises", System.Data.SqlDbType.NVarChar);
					command.Parameters["@CompetencesRequises"].Value = CompetencesRequises != null ? (object)CompetencesRequises : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE CompetencesRequises IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Objectifs=?

		/// <summary>
		/// Retrieves a collection of items by Objectifs
		/// </summary>
		/// <param name="Objectifs">Objectifs value</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByObjectifs(System.String Objectifs)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Objectifs != null)
				{
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Objectifs=@Objectifs";
					command.Parameters.Add("@Objectifs", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Objectifs"].Value = Objectifs != null ? (object)Objectifs : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Objectifs IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE EvaluationEnvisagee=?

		/// <summary>
		/// Retrieves a collection of items by EvaluationEnvisagee
		/// </summary>
		/// <param name="EvaluationEnvisagee">EvaluationEnvisagee value</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByEvaluationEnvisagee(System.Int64? EvaluationEnvisagee)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (EvaluationEnvisagee != null)
				{
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE EvaluationEnvisagee=@EvaluationEnvisagee";
					command.Parameters.Add("@EvaluationEnvisagee", System.Data.SqlDbType.BigInt);
					command.Parameters["@EvaluationEnvisagee"].Value = EvaluationEnvisagee != null ? (object)EvaluationEnvisagee : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE EvaluationEnvisagee IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE ComplementEvaluationEnvisagee=?

		/// <summary>
		/// Retrieves a collection of items by ComplementEvaluationEnvisagee
		/// </summary>
		/// <param name="ComplementEvaluationEnvisagee">ComplementEvaluationEnvisagee value</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByComplementEvaluationEnvisagee(System.String ComplementEvaluationEnvisagee)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (ComplementEvaluationEnvisagee != null)
				{
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE ComplementEvaluationEnvisagee=@ComplementEvaluationEnvisagee";
					command.Parameters.Add("@ComplementEvaluationEnvisagee", System.Data.SqlDbType.NVarChar);
					command.Parameters["@ComplementEvaluationEnvisagee"].Value = ComplementEvaluationEnvisagee != null ? (object)ComplementEvaluationEnvisagee : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE ComplementEvaluationEnvisagee IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE BilanPositif=?

		/// <summary>
		/// Retrieves a collection of items by BilanPositif
		/// </summary>
		/// <param name="BilanPositif">BilanPositif value</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByBilanPositif(System.String BilanPositif)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (BilanPositif != null)
				{
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE BilanPositif=@BilanPositif";
					command.Parameters.Add("@BilanPositif", System.Data.SqlDbType.NVarChar);
					command.Parameters["@BilanPositif"].Value = BilanPositif != null ? (object)BilanPositif : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE BilanPositif IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE BilanNegatif=?

		/// <summary>
		/// Retrieves a collection of items by BilanNegatif
		/// </summary>
		/// <param name="BilanNegatif">BilanNegatif value</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByBilanNegatif(System.String BilanNegatif)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (BilanNegatif != null)
				{
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE BilanNegatif=@BilanNegatif";
					command.Parameters.Add("@BilanNegatif", System.Data.SqlDbType.NVarChar);
					command.Parameters["@BilanNegatif"].Value = BilanNegatif != null ? (object)BilanNegatif : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM FichePreparatoire WHERE BilanNegatif IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectById(System.Int64? Id, int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE Id=@Id";					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Discipline=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByDiscipline(System.Int64? Discipline, int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Discipline != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE Discipline=@Discipline";					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Discipline=@Discipline";
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters["@Discipline"].Value = Discipline != null ? (object)Discipline : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE Discipline IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE DomaineActivite=?

		/// <summary>
		/// Retrieves the first set of items specified by count by DomaineActivite
		/// </summary>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByDomaineActivite(System.Int64? DomaineActivite, int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (DomaineActivite != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE DomaineActivite=@DomaineActivite";					command.CommandText = "SELECT * FROM FichePreparatoire WHERE DomaineActivite=@DomaineActivite";
				command.Parameters.Add("@DomaineActivite", System.Data.SqlDbType.BigInt);
				command.Parameters["@DomaineActivite"].Value = DomaineActivite != null ? (object)DomaineActivite : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE DomaineActivite IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Niveau=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByNiveau(System.Int64? Niveau, int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Niveau != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE Niveau=@Niveau";					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Niveau=@Niveau";
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters["@Niveau"].Value = Niveau != null ? (object)Niveau : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE Niveau IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Sequence=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Sequence
		/// </summary>
		/// <param name="Sequence">Sequence value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectBySequence(System.String Sequence, int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Sequence != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE Sequence=@Sequence";					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Sequence=@Sequence";
				command.Parameters.Add("@Sequence", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Sequence"].Value = Sequence != null ? (object)Sequence : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE Sequence IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE NumeroSeance=?

		/// <summary>
		/// Retrieves the first set of items specified by count by NumeroSeance
		/// </summary>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByNumeroSeance(System.Int32? NumeroSeance, int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (NumeroSeance != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE NumeroSeance=@NumeroSeance";					command.CommandText = "SELECT * FROM FichePreparatoire WHERE NumeroSeance=@NumeroSeance";
				command.Parameters.Add("@NumeroSeance", System.Data.SqlDbType.Int);
				command.Parameters["@NumeroSeance"].Value = NumeroSeance != null ? (object)NumeroSeance : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE NumeroSeance IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE TitreSeance=?

		/// <summary>
		/// Retrieves the first set of items specified by count by TitreSeance
		/// </summary>
		/// <param name="TitreSeance">TitreSeance value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByTitreSeance(System.String TitreSeance, int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (TitreSeance != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE TitreSeance=@TitreSeance";					command.CommandText = "SELECT * FROM FichePreparatoire WHERE TitreSeance=@TitreSeance";
				command.Parameters.Add("@TitreSeance", System.Data.SqlDbType.NVarChar);
				command.Parameters["@TitreSeance"].Value = TitreSeance != null ? (object)TitreSeance : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE TitreSeance IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Date=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Date
		/// </summary>
		/// <param name="Date">Date value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByDate(System.DateTime? Date, int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Date != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE Date=@Date";					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Date=@Date";
				command.Parameters.Add("@Date", System.Data.SqlDbType.DateTime);
				command.Parameters["@Date"].Value = Date != null ? (object)Date : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE Date IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE CompetencesVisees=?

		/// <summary>
		/// Retrieves the first set of items specified by count by CompetencesVisees
		/// </summary>
		/// <param name="CompetencesVisees">CompetencesVisees value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByCompetencesVisees(System.String CompetencesVisees, int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (CompetencesVisees != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE CompetencesVisees=@CompetencesVisees";					command.CommandText = "SELECT * FROM FichePreparatoire WHERE CompetencesVisees=@CompetencesVisees";
				command.Parameters.Add("@CompetencesVisees", System.Data.SqlDbType.NVarChar);
				command.Parameters["@CompetencesVisees"].Value = CompetencesVisees != null ? (object)CompetencesVisees : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE CompetencesVisees IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE CompetencesRequises=?

		/// <summary>
		/// Retrieves the first set of items specified by count by CompetencesRequises
		/// </summary>
		/// <param name="CompetencesRequises">CompetencesRequises value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByCompetencesRequises(System.String CompetencesRequises, int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (CompetencesRequises != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE CompetencesRequises=@CompetencesRequises";					command.CommandText = "SELECT * FROM FichePreparatoire WHERE CompetencesRequises=@CompetencesRequises";
				command.Parameters.Add("@CompetencesRequises", System.Data.SqlDbType.NVarChar);
				command.Parameters["@CompetencesRequises"].Value = CompetencesRequises != null ? (object)CompetencesRequises : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE CompetencesRequises IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Objectifs=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Objectifs
		/// </summary>
		/// <param name="Objectifs">Objectifs value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByObjectifs(System.String Objectifs, int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Objectifs != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE Objectifs=@Objectifs";					command.CommandText = "SELECT * FROM FichePreparatoire WHERE Objectifs=@Objectifs";
				command.Parameters.Add("@Objectifs", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Objectifs"].Value = Objectifs != null ? (object)Objectifs : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE Objectifs IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE EvaluationEnvisagee=?

		/// <summary>
		/// Retrieves the first set of items specified by count by EvaluationEnvisagee
		/// </summary>
		/// <param name="EvaluationEnvisagee">EvaluationEnvisagee value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByEvaluationEnvisagee(System.Int64? EvaluationEnvisagee, int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (EvaluationEnvisagee != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE EvaluationEnvisagee=@EvaluationEnvisagee";					command.CommandText = "SELECT * FROM FichePreparatoire WHERE EvaluationEnvisagee=@EvaluationEnvisagee";
				command.Parameters.Add("@EvaluationEnvisagee", System.Data.SqlDbType.BigInt);
				command.Parameters["@EvaluationEnvisagee"].Value = EvaluationEnvisagee != null ? (object)EvaluationEnvisagee : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE EvaluationEnvisagee IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE ComplementEvaluationEnvisagee=?

		/// <summary>
		/// Retrieves the first set of items specified by count by ComplementEvaluationEnvisagee
		/// </summary>
		/// <param name="ComplementEvaluationEnvisagee">ComplementEvaluationEnvisagee value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByComplementEvaluationEnvisagee(System.String ComplementEvaluationEnvisagee, int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (ComplementEvaluationEnvisagee != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE ComplementEvaluationEnvisagee=@ComplementEvaluationEnvisagee";					command.CommandText = "SELECT * FROM FichePreparatoire WHERE ComplementEvaluationEnvisagee=@ComplementEvaluationEnvisagee";
				command.Parameters.Add("@ComplementEvaluationEnvisagee", System.Data.SqlDbType.NVarChar);
				command.Parameters["@ComplementEvaluationEnvisagee"].Value = ComplementEvaluationEnvisagee != null ? (object)ComplementEvaluationEnvisagee : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE ComplementEvaluationEnvisagee IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE BilanPositif=?

		/// <summary>
		/// Retrieves the first set of items specified by count by BilanPositif
		/// </summary>
		/// <param name="BilanPositif">BilanPositif value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByBilanPositif(System.String BilanPositif, int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (BilanPositif != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE BilanPositif=@BilanPositif";					command.CommandText = "SELECT * FROM FichePreparatoire WHERE BilanPositif=@BilanPositif";
				command.Parameters.Add("@BilanPositif", System.Data.SqlDbType.NVarChar);
				command.Parameters["@BilanPositif"].Value = BilanPositif != null ? (object)BilanPositif : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE BilanPositif IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE BilanNegatif=?

		/// <summary>
		/// Retrieves the first set of items specified by count by BilanNegatif
		/// </summary>
		/// <param name="BilanNegatif">BilanNegatif value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<FichePreparatoire> SelectByBilanNegatif(System.String BilanNegatif, int count)
		{
			var list = new System.Collections.Generic.List<FichePreparatoire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (BilanNegatif != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE BilanNegatif=@BilanNegatif";					command.CommandText = "SELECT * FROM FichePreparatoire WHERE BilanNegatif=@BilanNegatif";
				command.Parameters.Add("@BilanNegatif", System.Data.SqlDbType.NVarChar);
				command.Parameters["@BilanNegatif"].Value = BilanNegatif != null ? (object)BilanNegatif : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM FichePreparatoire WHERE BilanNegatif IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new FichePreparatoire();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Discipline = (System.Int64?) (reader.IsDBNull(1) ? null : reader["Discipline"]);
						item.DomaineActivite = (System.Int64?) (reader.IsDBNull(2) ? null : reader["DomaineActivite"]);
						item.Niveau = (System.Int64?) (reader.IsDBNull(3) ? null : reader["Niveau"]);
						item.Sequence = (reader.IsDBNull(4) ? null : reader["Sequence"] as System.String);
						item.NumeroSeance = (System.Int32?) (reader.IsDBNull(5) ? null : reader["NumeroSeance"]);
						item.TitreSeance = (reader.IsDBNull(6) ? null : reader["TitreSeance"] as System.String);
						item.Date = (System.DateTime?) (reader.IsDBNull(7) ? null : reader["Date"]);
						item.CompetencesVisees = (reader.IsDBNull(8) ? null : reader["CompetencesVisees"] as System.String);
						item.CompetencesRequises = (reader.IsDBNull(9) ? null : reader["CompetencesRequises"] as System.String);
						item.Objectifs = (reader.IsDBNull(10) ? null : reader["Objectifs"] as System.String);
						item.EvaluationEnvisagee = (System.Int64?) (reader.IsDBNull(11) ? null : reader["EvaluationEnvisagee"]);
						item.ComplementEvaluationEnvisagee = (reader.IsDBNull(12) ? null : reader["ComplementEvaluationEnvisagee"] as System.String);
						item.BilanPositif = (reader.IsDBNull(13) ? null : reader["BilanPositif"] as System.String);
						item.BilanNegatif = (reader.IsDBNull(14) ? null : reader["BilanNegatif"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [FichePreparatoire]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(FichePreparatoire item)
		{
			Create(item.Discipline, item.DomaineActivite, item.Niveau, item.Sequence, item.NumeroSeance, item.TitreSeance, item.Date, item.CompetencesVisees, item.CompetencesRequises, item.Objectifs, item.EvaluationEnvisagee, item.ComplementEvaluationEnvisagee, item.BilanPositif, item.BilanNegatif);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		/// <param name="Niveau">Niveau value</param>
		/// <param name="Sequence">Sequence value</param>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		/// <param name="TitreSeance">TitreSeance value</param>
		/// <param name="Date">Date value</param>
		/// <param name="CompetencesVisees">CompetencesVisees value</param>
		/// <param name="CompetencesRequises">CompetencesRequises value</param>
		/// <param name="Objectifs">Objectifs value</param>
		/// <param name="EvaluationEnvisagee">EvaluationEnvisagee value</param>
		/// <param name="ComplementEvaluationEnvisagee">ComplementEvaluationEnvisagee value</param>
		/// <param name="BilanPositif">BilanPositif value</param>
		/// <param name="BilanNegatif">BilanNegatif value</param>
		public void Create(System.Int64? Discipline, System.Int64? DomaineActivite, System.Int64? Niveau, System.String Sequence, System.Int32? NumeroSeance, System.String TitreSeance, System.DateTime? Date, System.String CompetencesVisees, System.String CompetencesRequises, System.String Objectifs, System.Int64? EvaluationEnvisagee, System.String ComplementEvaluationEnvisagee, System.String BilanPositif, System.String BilanNegatif)
		{
			if (Sequence != null && Sequence.Length > 500)
				throw new System.ArgumentException("Max length for Sequence is 500");
			if (TitreSeance != null && TitreSeance.Length > 500)
				throw new System.ArgumentException("Max length for TitreSeance is 500");
			if (CompetencesVisees != null && CompetencesVisees.Length > 500)
				throw new System.ArgumentException("Max length for CompetencesVisees is 500");
			if (CompetencesRequises != null && CompetencesRequises.Length > 500)
				throw new System.ArgumentException("Max length for CompetencesRequises is 500");
			if (Objectifs != null && Objectifs.Length > 500)
				throw new System.ArgumentException("Max length for Objectifs is 500");
			if (ComplementEvaluationEnvisagee != null && ComplementEvaluationEnvisagee.Length > 500)
				throw new System.ArgumentException("Max length for ComplementEvaluationEnvisagee is 500");
			if (BilanPositif != null && BilanPositif.Length > 4000)
				throw new System.ArgumentException("Max length for BilanPositif is 4000");
			if (BilanNegatif != null && BilanNegatif.Length > 4000)
				throw new System.ArgumentException("Max length for BilanNegatif is 4000");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [FichePreparatoire] (Discipline, DomaineActivite, Niveau, Sequence, NumeroSeance, TitreSeance, Date, CompetencesVisees, CompetencesRequises, Objectifs, EvaluationEnvisagee, ComplementEvaluationEnvisagee, BilanPositif, BilanNegatif)  VALUES (@Discipline, @DomaineActivite, @Niveau, @Sequence, @NumeroSeance, @TitreSeance, @Date, @CompetencesVisees, @CompetencesRequises, @Objectifs, @EvaluationEnvisagee, @ComplementEvaluationEnvisagee, @BilanPositif, @BilanNegatif)";

				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters["@Discipline"].Value = Discipline != null ? (object)Discipline : System.DBNull.Value;
				command.Parameters.Add("@DomaineActivite", System.Data.SqlDbType.BigInt);
				command.Parameters["@DomaineActivite"].Value = DomaineActivite != null ? (object)DomaineActivite : System.DBNull.Value;
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters["@Niveau"].Value = Niveau != null ? (object)Niveau : System.DBNull.Value;
				command.Parameters.Add("@Sequence", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Sequence"].Value = Sequence != null ? (object)Sequence : System.DBNull.Value;
				command.Parameters.Add("@NumeroSeance", System.Data.SqlDbType.Int);
				command.Parameters["@NumeroSeance"].Value = NumeroSeance != null ? (object)NumeroSeance : System.DBNull.Value;
				command.Parameters.Add("@TitreSeance", System.Data.SqlDbType.NVarChar);
				command.Parameters["@TitreSeance"].Value = TitreSeance != null ? (object)TitreSeance : System.DBNull.Value;
				command.Parameters.Add("@Date", System.Data.SqlDbType.DateTime);
				command.Parameters["@Date"].Value = Date != null ? (object)Date : System.DBNull.Value;
				command.Parameters.Add("@CompetencesVisees", System.Data.SqlDbType.NVarChar);
				command.Parameters["@CompetencesVisees"].Value = CompetencesVisees != null ? (object)CompetencesVisees : System.DBNull.Value;
				command.Parameters.Add("@CompetencesRequises", System.Data.SqlDbType.NVarChar);
				command.Parameters["@CompetencesRequises"].Value = CompetencesRequises != null ? (object)CompetencesRequises : System.DBNull.Value;
				command.Parameters.Add("@Objectifs", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Objectifs"].Value = Objectifs != null ? (object)Objectifs : System.DBNull.Value;
				command.Parameters.Add("@EvaluationEnvisagee", System.Data.SqlDbType.BigInt);
				command.Parameters["@EvaluationEnvisagee"].Value = EvaluationEnvisagee != null ? (object)EvaluationEnvisagee : System.DBNull.Value;
				command.Parameters.Add("@ComplementEvaluationEnvisagee", System.Data.SqlDbType.NVarChar);
				command.Parameters["@ComplementEvaluationEnvisagee"].Value = ComplementEvaluationEnvisagee != null ? (object)ComplementEvaluationEnvisagee : System.DBNull.Value;
				command.Parameters.Add("@BilanPositif", System.Data.SqlDbType.NVarChar);
				command.Parameters["@BilanPositif"].Value = BilanPositif != null ? (object)BilanPositif : System.DBNull.Value;
				command.Parameters.Add("@BilanNegatif", System.Data.SqlDbType.NVarChar);
				command.Parameters["@BilanNegatif"].Value = BilanNegatif != null ? (object)BilanNegatif : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [FichePreparatoire] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="Discipline">Discipline value</param>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		/// <param name="Niveau">Niveau value</param>
		/// <param name="Sequence">Sequence value</param>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		/// <param name="TitreSeance">TitreSeance value</param>
		/// <param name="Date">Date value</param>
		/// <param name="CompetencesVisees">CompetencesVisees value</param>
		/// <param name="CompetencesRequises">CompetencesRequises value</param>
		/// <param name="Objectifs">Objectifs value</param>
		/// <param name="EvaluationEnvisagee">EvaluationEnvisagee value</param>
		/// <param name="ComplementEvaluationEnvisagee">ComplementEvaluationEnvisagee value</param>
		/// <param name="BilanPositif">BilanPositif value</param>
		/// <param name="BilanNegatif">BilanNegatif value</param>
		public void Create(System.Int64? Id, System.Int64? Discipline, System.Int64? DomaineActivite, System.Int64? Niveau, System.String Sequence, System.Int32? NumeroSeance, System.String TitreSeance, System.DateTime? Date, System.String CompetencesVisees, System.String CompetencesRequises, System.String Objectifs, System.Int64? EvaluationEnvisagee, System.String ComplementEvaluationEnvisagee, System.String BilanPositif, System.String BilanNegatif)
		{
			if (Sequence != null && Sequence.Length > FichePreparatoire.Sequence_Max_Length)
				throw new System.ArgumentException("Max length for Sequence is 500");
			if (TitreSeance != null && TitreSeance.Length > FichePreparatoire.TitreSeance_Max_Length)
				throw new System.ArgumentException("Max length for TitreSeance is 500");
			if (CompetencesVisees != null && CompetencesVisees.Length > FichePreparatoire.CompetencesVisees_Max_Length)
				throw new System.ArgumentException("Max length for CompetencesVisees is 500");
			if (CompetencesRequises != null && CompetencesRequises.Length > FichePreparatoire.CompetencesRequises_Max_Length)
				throw new System.ArgumentException("Max length for CompetencesRequises is 500");
			if (Objectifs != null && Objectifs.Length > FichePreparatoire.Objectifs_Max_Length)
				throw new System.ArgumentException("Max length for Objectifs is 500");
			if (ComplementEvaluationEnvisagee != null && ComplementEvaluationEnvisagee.Length > FichePreparatoire.ComplementEvaluationEnvisagee_Max_Length)
				throw new System.ArgumentException("Max length for ComplementEvaluationEnvisagee is 500");
			if (BilanPositif != null && BilanPositif.Length > FichePreparatoire.BilanPositif_Max_Length)
				throw new System.ArgumentException("Max length for BilanPositif is 4000");
			if (BilanNegatif != null && BilanNegatif.Length > FichePreparatoire.BilanNegatif_Max_Length)
				throw new System.ArgumentException("Max length for BilanNegatif is 4000");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [FichePreparatoire] (Id, Discipline, DomaineActivite, Niveau, Sequence, NumeroSeance, TitreSeance, Date, CompetencesVisees, CompetencesRequises, Objectifs, EvaluationEnvisagee, ComplementEvaluationEnvisagee, BilanPositif, BilanNegatif)  VALUES (@Id, @Discipline, @DomaineActivite, @Niveau, @Sequence, @NumeroSeance, @TitreSeance, @Date, @CompetencesVisees, @CompetencesRequises, @Objectifs, @EvaluationEnvisagee, @ComplementEvaluationEnvisagee, @BilanPositif, @BilanNegatif)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters["@Discipline"].Value = Discipline != null ? (object)Discipline : System.DBNull.Value;
				command.Parameters.Add("@DomaineActivite", System.Data.SqlDbType.BigInt);
				command.Parameters["@DomaineActivite"].Value = DomaineActivite != null ? (object)DomaineActivite : System.DBNull.Value;
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters["@Niveau"].Value = Niveau != null ? (object)Niveau : System.DBNull.Value;
				command.Parameters.Add("@Sequence", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Sequence"].Value = Sequence != null ? (object)Sequence : System.DBNull.Value;
				command.Parameters.Add("@NumeroSeance", System.Data.SqlDbType.Int);
				command.Parameters["@NumeroSeance"].Value = NumeroSeance != null ? (object)NumeroSeance : System.DBNull.Value;
				command.Parameters.Add("@TitreSeance", System.Data.SqlDbType.NVarChar);
				command.Parameters["@TitreSeance"].Value = TitreSeance != null ? (object)TitreSeance : System.DBNull.Value;
				command.Parameters.Add("@Date", System.Data.SqlDbType.DateTime);
				command.Parameters["@Date"].Value = Date != null ? (object)Date : System.DBNull.Value;
				command.Parameters.Add("@CompetencesVisees", System.Data.SqlDbType.NVarChar);
				command.Parameters["@CompetencesVisees"].Value = CompetencesVisees != null ? (object)CompetencesVisees : System.DBNull.Value;
				command.Parameters.Add("@CompetencesRequises", System.Data.SqlDbType.NVarChar);
				command.Parameters["@CompetencesRequises"].Value = CompetencesRequises != null ? (object)CompetencesRequises : System.DBNull.Value;
				command.Parameters.Add("@Objectifs", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Objectifs"].Value = Objectifs != null ? (object)Objectifs : System.DBNull.Value;
				command.Parameters.Add("@EvaluationEnvisagee", System.Data.SqlDbType.BigInt);
				command.Parameters["@EvaluationEnvisagee"].Value = EvaluationEnvisagee != null ? (object)EvaluationEnvisagee : System.DBNull.Value;
				command.Parameters.Add("@ComplementEvaluationEnvisagee", System.Data.SqlDbType.NVarChar);
				command.Parameters["@ComplementEvaluationEnvisagee"].Value = ComplementEvaluationEnvisagee != null ? (object)ComplementEvaluationEnvisagee : System.DBNull.Value;
				command.Parameters.Add("@BilanPositif", System.Data.SqlDbType.NVarChar);
				command.Parameters["@BilanPositif"].Value = BilanPositif != null ? (object)BilanPositif : System.DBNull.Value;
				command.Parameters.Add("@BilanNegatif", System.Data.SqlDbType.NVarChar);
				command.Parameters["@BilanNegatif"].Value = BilanNegatif != null ? (object)BilanNegatif : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<FichePreparatoire> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "FichePreparatoire";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.Discipline);
						record.SetValue(2, item.DomaineActivite);
						record.SetValue(3, item.Niveau);
						record.SetValue(4, item.Sequence);
						record.SetValue(5, item.NumeroSeance);
						record.SetValue(6, item.TitreSeance);
						record.SetValue(7, item.Date);
						record.SetValue(8, item.CompetencesVisees);
						record.SetValue(9, item.CompetencesRequises);
						record.SetValue(10, item.Objectifs);
						record.SetValue(11, item.EvaluationEnvisagee);
						record.SetValue(12, item.ComplementEvaluationEnvisagee);
						record.SetValue(13, item.BilanPositif);
						record.SetValue(14, item.BilanNegatif);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(FichePreparatoire item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<FichePreparatoire> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int64? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Discipline

		/// <summary>
		/// Delete records by Discipline
		/// </summary>
		/// <param name="Discipline">Discipline value</param>
		public int DeleteByDiscipline(System.Int64? Discipline)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE Discipline=@Discipline";
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters["@Discipline"].Value = Discipline != null ? (object)Discipline : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY DomaineActivite

		/// <summary>
		/// Delete records by DomaineActivite
		/// </summary>
		/// <param name="DomaineActivite">DomaineActivite value</param>
		public int DeleteByDomaineActivite(System.Int64? DomaineActivite)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE DomaineActivite=@DomaineActivite";
				command.Parameters.Add("@DomaineActivite", System.Data.SqlDbType.BigInt);
				command.Parameters["@DomaineActivite"].Value = DomaineActivite != null ? (object)DomaineActivite : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Niveau

		/// <summary>
		/// Delete records by Niveau
		/// </summary>
		/// <param name="Niveau">Niveau value</param>
		public int DeleteByNiveau(System.Int64? Niveau)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE Niveau=@Niveau";
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters["@Niveau"].Value = Niveau != null ? (object)Niveau : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Sequence

		/// <summary>
		/// Delete records by Sequence
		/// </summary>
		/// <param name="Sequence">Sequence value</param>
		public int DeleteBySequence(System.String Sequence)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE Sequence=@Sequence";
				command.Parameters.Add("@Sequence", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Sequence"].Value = Sequence != null ? (object)Sequence : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY NumeroSeance

		/// <summary>
		/// Delete records by NumeroSeance
		/// </summary>
		/// <param name="NumeroSeance">NumeroSeance value</param>
		public int DeleteByNumeroSeance(System.Int32? NumeroSeance)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE NumeroSeance=@NumeroSeance";
				command.Parameters.Add("@NumeroSeance", System.Data.SqlDbType.Int);
				command.Parameters["@NumeroSeance"].Value = NumeroSeance != null ? (object)NumeroSeance : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY TitreSeance

		/// <summary>
		/// Delete records by TitreSeance
		/// </summary>
		/// <param name="TitreSeance">TitreSeance value</param>
		public int DeleteByTitreSeance(System.String TitreSeance)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE TitreSeance=@TitreSeance";
				command.Parameters.Add("@TitreSeance", System.Data.SqlDbType.NVarChar);
				command.Parameters["@TitreSeance"].Value = TitreSeance != null ? (object)TitreSeance : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Date

		/// <summary>
		/// Delete records by Date
		/// </summary>
		/// <param name="Date">Date value</param>
		public int DeleteByDate(System.DateTime? Date)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE Date=@Date";
				command.Parameters.Add("@Date", System.Data.SqlDbType.DateTime);
				command.Parameters["@Date"].Value = Date != null ? (object)Date : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY CompetencesVisees

		/// <summary>
		/// Delete records by CompetencesVisees
		/// </summary>
		/// <param name="CompetencesVisees">CompetencesVisees value</param>
		public int DeleteByCompetencesVisees(System.String CompetencesVisees)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE CompetencesVisees=@CompetencesVisees";
				command.Parameters.Add("@CompetencesVisees", System.Data.SqlDbType.NVarChar);
				command.Parameters["@CompetencesVisees"].Value = CompetencesVisees != null ? (object)CompetencesVisees : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY CompetencesRequises

		/// <summary>
		/// Delete records by CompetencesRequises
		/// </summary>
		/// <param name="CompetencesRequises">CompetencesRequises value</param>
		public int DeleteByCompetencesRequises(System.String CompetencesRequises)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE CompetencesRequises=@CompetencesRequises";
				command.Parameters.Add("@CompetencesRequises", System.Data.SqlDbType.NVarChar);
				command.Parameters["@CompetencesRequises"].Value = CompetencesRequises != null ? (object)CompetencesRequises : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Objectifs

		/// <summary>
		/// Delete records by Objectifs
		/// </summary>
		/// <param name="Objectifs">Objectifs value</param>
		public int DeleteByObjectifs(System.String Objectifs)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE Objectifs=@Objectifs";
				command.Parameters.Add("@Objectifs", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Objectifs"].Value = Objectifs != null ? (object)Objectifs : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY EvaluationEnvisagee

		/// <summary>
		/// Delete records by EvaluationEnvisagee
		/// </summary>
		/// <param name="EvaluationEnvisagee">EvaluationEnvisagee value</param>
		public int DeleteByEvaluationEnvisagee(System.Int64? EvaluationEnvisagee)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE EvaluationEnvisagee=@EvaluationEnvisagee";
				command.Parameters.Add("@EvaluationEnvisagee", System.Data.SqlDbType.BigInt);
				command.Parameters["@EvaluationEnvisagee"].Value = EvaluationEnvisagee != null ? (object)EvaluationEnvisagee : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY ComplementEvaluationEnvisagee

		/// <summary>
		/// Delete records by ComplementEvaluationEnvisagee
		/// </summary>
		/// <param name="ComplementEvaluationEnvisagee">ComplementEvaluationEnvisagee value</param>
		public int DeleteByComplementEvaluationEnvisagee(System.String ComplementEvaluationEnvisagee)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE ComplementEvaluationEnvisagee=@ComplementEvaluationEnvisagee";
				command.Parameters.Add("@ComplementEvaluationEnvisagee", System.Data.SqlDbType.NVarChar);
				command.Parameters["@ComplementEvaluationEnvisagee"].Value = ComplementEvaluationEnvisagee != null ? (object)ComplementEvaluationEnvisagee : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY BilanPositif

		/// <summary>
		/// Delete records by BilanPositif
		/// </summary>
		/// <param name="BilanPositif">BilanPositif value</param>
		public int DeleteByBilanPositif(System.String BilanPositif)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE BilanPositif=@BilanPositif";
				command.Parameters.Add("@BilanPositif", System.Data.SqlDbType.NVarChar);
				command.Parameters["@BilanPositif"].Value = BilanPositif != null ? (object)BilanPositif : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY BilanNegatif

		/// <summary>
		/// Delete records by BilanNegatif
		/// </summary>
		/// <param name="BilanNegatif">BilanNegatif value</param>
		public int DeleteByBilanNegatif(System.String BilanNegatif)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire] WHERE BilanNegatif=@BilanNegatif";
				command.Parameters.Add("@BilanNegatif", System.Data.SqlDbType.NVarChar);
				command.Parameters["@BilanNegatif"].Value = BilanNegatif != null ? (object)BilanNegatif : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [FichePreparatoire]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(FichePreparatoire item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [FichePreparatoire] SET Discipline = @Discipline, DomaineActivite = @DomaineActivite, Niveau = @Niveau, Sequence = @Sequence, NumeroSeance = @NumeroSeance, TitreSeance = @TitreSeance, Date = @Date, CompetencesVisees = @CompetencesVisees, CompetencesRequises = @CompetencesRequises, Objectifs = @Objectifs, EvaluationEnvisagee = @EvaluationEnvisagee, ComplementEvaluationEnvisagee = @ComplementEvaluationEnvisagee, BilanPositif = @BilanPositif, BilanNegatif = @BilanNegatif WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters["@Discipline"].Value = item.Discipline != null ? (object)item.Discipline : System.DBNull.Value;
				command.Parameters.Add("@DomaineActivite", System.Data.SqlDbType.BigInt);
				command.Parameters["@DomaineActivite"].Value = item.DomaineActivite != null ? (object)item.DomaineActivite : System.DBNull.Value;
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters["@Niveau"].Value = item.Niveau != null ? (object)item.Niveau : System.DBNull.Value;
				command.Parameters.Add("@Sequence", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Sequence"].Value = item.Sequence != null ? (object)item.Sequence : System.DBNull.Value;
				command.Parameters.Add("@NumeroSeance", System.Data.SqlDbType.Int);
				command.Parameters["@NumeroSeance"].Value = item.NumeroSeance != null ? (object)item.NumeroSeance : System.DBNull.Value;
				command.Parameters.Add("@TitreSeance", System.Data.SqlDbType.NVarChar);
				command.Parameters["@TitreSeance"].Value = item.TitreSeance != null ? (object)item.TitreSeance : System.DBNull.Value;
				command.Parameters.Add("@Date", System.Data.SqlDbType.DateTime);
				command.Parameters["@Date"].Value = item.Date != null ? (object)item.Date : System.DBNull.Value;
				command.Parameters.Add("@CompetencesVisees", System.Data.SqlDbType.NVarChar);
				command.Parameters["@CompetencesVisees"].Value = item.CompetencesVisees != null ? (object)item.CompetencesVisees : System.DBNull.Value;
				command.Parameters.Add("@CompetencesRequises", System.Data.SqlDbType.NVarChar);
				command.Parameters["@CompetencesRequises"].Value = item.CompetencesRequises != null ? (object)item.CompetencesRequises : System.DBNull.Value;
				command.Parameters.Add("@Objectifs", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Objectifs"].Value = item.Objectifs != null ? (object)item.Objectifs : System.DBNull.Value;
				command.Parameters.Add("@EvaluationEnvisagee", System.Data.SqlDbType.BigInt);
				command.Parameters["@EvaluationEnvisagee"].Value = item.EvaluationEnvisagee != null ? (object)item.EvaluationEnvisagee : System.DBNull.Value;
				command.Parameters.Add("@ComplementEvaluationEnvisagee", System.Data.SqlDbType.NVarChar);
				command.Parameters["@ComplementEvaluationEnvisagee"].Value = item.ComplementEvaluationEnvisagee != null ? (object)item.ComplementEvaluationEnvisagee : System.DBNull.Value;
				command.Parameters.Add("@BilanPositif", System.Data.SqlDbType.NVarChar);
				command.Parameters["@BilanPositif"].Value = item.BilanPositif != null ? (object)item.BilanPositif : System.DBNull.Value;
				command.Parameters.Add("@BilanNegatif", System.Data.SqlDbType.NVarChar);
				command.Parameters["@BilanNegatif"].Value = item.BilanNegatif != null ? (object)item.BilanNegatif : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<FichePreparatoire> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [FichePreparatoire] SET Discipline = @Discipline, DomaineActivite = @DomaineActivite, Niveau = @Niveau, Sequence = @Sequence, NumeroSeance = @NumeroSeance, TitreSeance = @TitreSeance, Date = @Date, CompetencesVisees = @CompetencesVisees, CompetencesRequises = @CompetencesRequises, Objectifs = @Objectifs, EvaluationEnvisagee = @EvaluationEnvisagee, ComplementEvaluationEnvisagee = @ComplementEvaluationEnvisagee, BilanPositif = @BilanPositif, BilanNegatif = @BilanNegatif WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Discipline", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@DomaineActivite", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Niveau", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Sequence", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@NumeroSeance", System.Data.SqlDbType.Int);
				command.Parameters.Add("@TitreSeance", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Date", System.Data.SqlDbType.DateTime);
				command.Parameters.Add("@CompetencesVisees", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@CompetencesRequises", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Objectifs", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@EvaluationEnvisagee", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@ComplementEvaluationEnvisagee", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@BilanPositif", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@BilanNegatif", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@Discipline"].Value = item.Discipline != null ? (object)item.Discipline : System.DBNull.Value;
					command.Parameters["@DomaineActivite"].Value = item.DomaineActivite != null ? (object)item.DomaineActivite : System.DBNull.Value;
					command.Parameters["@Niveau"].Value = item.Niveau != null ? (object)item.Niveau : System.DBNull.Value;
					command.Parameters["@Sequence"].Value = item.Sequence != null ? (object)item.Sequence : System.DBNull.Value;
					command.Parameters["@NumeroSeance"].Value = item.NumeroSeance != null ? (object)item.NumeroSeance : System.DBNull.Value;
					command.Parameters["@TitreSeance"].Value = item.TitreSeance != null ? (object)item.TitreSeance : System.DBNull.Value;
					command.Parameters["@Date"].Value = item.Date != null ? (object)item.Date : System.DBNull.Value;
					command.Parameters["@CompetencesVisees"].Value = item.CompetencesVisees != null ? (object)item.CompetencesVisees : System.DBNull.Value;
					command.Parameters["@CompetencesRequises"].Value = item.CompetencesRequises != null ? (object)item.CompetencesRequises : System.DBNull.Value;
					command.Parameters["@Objectifs"].Value = item.Objectifs != null ? (object)item.Objectifs : System.DBNull.Value;
					command.Parameters["@EvaluationEnvisagee"].Value = item.EvaluationEnvisagee != null ? (object)item.EvaluationEnvisagee : System.DBNull.Value;
					command.Parameters["@ComplementEvaluationEnvisagee"].Value = item.ComplementEvaluationEnvisagee != null ? (object)item.ComplementEvaluationEnvisagee : System.DBNull.Value;
					command.Parameters["@BilanPositif"].Value = item.BilanPositif != null ? (object)item.BilanPositif : System.DBNull.Value;
					command.Parameters["@BilanNegatif"].Value = item.BilanNegatif != null ? (object)item.BilanNegatif : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [FichePreparatoire]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM FichePreparatoire";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region IInformationComplementaire Repository

	/// <summary>
	/// Represents the InformationComplementaire repository
	/// </summary>
	public partial interface IInformationComplementaireRepository : IRepository<InformationComplementaire>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Critere
		/// </summary>
		/// <param name="Critere">Critere value</param>
		System.Collections.Generic.List<InformationComplementaire> SelectByCritere(System.String Critere);

		/// <summary>
		/// Retrieves the first set of items specified by count by Critere
		/// </summary>
		/// <param name="Critere">Critere value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<InformationComplementaire> SelectByCritere(System.String Critere, int count);

		/// <summary>
		/// Delete records by Critere
		/// </summary>
		/// <param name="Critere">Critere value</param>
		int DeleteByCritere(System.String Critere);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.String Critere);
	}

	#endregion

	#region InformationComplementaire Repository

	/// <summary>
	/// Default IInformationComplementaireRepository implementation 
	/// </summary>
	public partial class InformationComplementaireRepository : IInformationComplementaireRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<InformationComplementaire> ToList()
		{
			var list = new System.Collections.Generic.List<InformationComplementaire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM InformationComplementaire";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new InformationComplementaire();
						item.Critere = (reader.IsDBNull(0) ? null : reader["Critere"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public InformationComplementaire[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<InformationComplementaire> ToList(int count)
		{
			var list = new System.Collections.Generic.List<InformationComplementaire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM InformationComplementaire", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new InformationComplementaire();
						item.Critere = (reader.IsDBNull(0) ? null : reader["Critere"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public InformationComplementaire[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Critere=?

		/// <summary>
		/// Retrieves a collection of items by Critere
		/// </summary>
		/// <param name="Critere">Critere value</param>
		public System.Collections.Generic.List<InformationComplementaire> SelectByCritere(System.String Critere)
		{
			var list = new System.Collections.Generic.List<InformationComplementaire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Critere != null)
				{
					command.CommandText = "SELECT * FROM InformationComplementaire WHERE Critere=@Critere";
					command.Parameters.Add("@Critere", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Critere"].Value = Critere != null ? (object)Critere : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM InformationComplementaire WHERE Critere IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new InformationComplementaire();
						item.Critere = (reader.IsDBNull(0) ? null : reader["Critere"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Critere=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Critere
		/// </summary>
		/// <param name="Critere">Critere value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<InformationComplementaire> SelectByCritere(System.String Critere, int count)
		{
			var list = new System.Collections.Generic.List<InformationComplementaire>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Critere != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM InformationComplementaire WHERE Critere=@Critere";					command.CommandText = "SELECT * FROM InformationComplementaire WHERE Critere=@Critere";
				command.Parameters.Add("@Critere", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Critere"].Value = Critere != null ? (object)Critere : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM InformationComplementaire WHERE Critere IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new InformationComplementaire();
						item.Critere = (reader.IsDBNull(0) ? null : reader["Critere"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [InformationComplementaire]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(InformationComplementaire item)
		{
			Create(item.Critere);
		}

		#endregion

		#region INSERT [InformationComplementaire] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Critere">Critere value</param>
		public void Create(System.String Critere)
		{
			if (Critere != null && Critere.Length > InformationComplementaire.Critere_Max_Length)
				throw new System.ArgumentException("Max length for Critere is 4000");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [InformationComplementaire] (Critere)  VALUES (@Critere)";

				command.Parameters.Add("@Critere", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Critere"].Value = Critere != null ? (object)Critere : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<InformationComplementaire> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "InformationComplementaire";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(0, item.Critere);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(InformationComplementaire item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [InformationComplementaire] WHERE Critere = @Critere";

				command.Parameters.Add("@Critere", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Critere"].Value = item.Critere != null ? (object)item.Critere : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<InformationComplementaire> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [InformationComplementaire] WHERE Critere = @Critere";
				command.Parameters.Add("@Critere", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Critere"].Value = item.Critere != null ? (object)item.Critere : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Critere

		/// <summary>
		/// Delete records by Critere
		/// </summary>
		/// <param name="Critere">Critere value</param>
		public int DeleteByCritere(System.String Critere)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [InformationComplementaire] WHERE Critere=@Critere";
				command.Parameters.Add("@Critere", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Critere"].Value = Critere != null ? (object)Critere : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [InformationComplementaire]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(InformationComplementaire item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [InformationComplementaire] SET Critere = @Critere";

				command.Parameters.Add("@Critere", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Critere"].Value = item.Critere != null ? (object)item.Critere : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<InformationComplementaire> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [InformationComplementaire] SET Critere = @Critere";
				command.Parameters.Add("@Critere", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Critere"].Value = item.Critere != null ? (object)item.Critere : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [InformationComplementaire]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM InformationComplementaire";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region IJourSemaine Repository

	/// <summary>
	/// Represents the JourSemaine repository
	/// </summary>
	public partial interface IJourSemaineRepository : IRepository<JourSemaine>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<JourSemaine> SelectById(System.Int64? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<JourSemaine> SelectById(System.Int64? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		System.Collections.Generic.List<JourSemaine> SelectByIntitule(System.String Intitule);

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<JourSemaine> SelectByIntitule(System.String Intitule, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int64? Id);

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		int DeleteByIntitule(System.String Intitule);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.String Intitule);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Id, System.String Intitule);
	}

	#endregion

	#region JourSemaine Repository

	/// <summary>
	/// Default IJourSemaineRepository implementation 
	/// </summary>
	public partial class JourSemaineRepository : IJourSemaineRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<JourSemaine> ToList()
		{
			var list = new System.Collections.Generic.List<JourSemaine>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM JourSemaine";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new JourSemaine();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public JourSemaine[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<JourSemaine> ToList(int count)
		{
			var list = new System.Collections.Generic.List<JourSemaine>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM JourSemaine", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new JourSemaine();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public JourSemaine[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<JourSemaine> SelectById(System.Int64? Id)
		{
			var list = new System.Collections.Generic.List<JourSemaine>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM JourSemaine WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM JourSemaine WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new JourSemaine();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Intitule=?

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public System.Collections.Generic.List<JourSemaine> SelectByIntitule(System.String Intitule)
		{
			var list = new System.Collections.Generic.List<JourSemaine>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Intitule != null)
				{
					command.CommandText = "SELECT * FROM JourSemaine WHERE Intitule=@Intitule";
					command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM JourSemaine WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new JourSemaine();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<JourSemaine> SelectById(System.Int64? Id, int count)
		{
			var list = new System.Collections.Generic.List<JourSemaine>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM JourSemaine WHERE Id=@Id";					command.CommandText = "SELECT * FROM JourSemaine WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM JourSemaine WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new JourSemaine();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Intitule=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<JourSemaine> SelectByIntitule(System.String Intitule, int count)
		{
			var list = new System.Collections.Generic.List<JourSemaine>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Intitule != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM JourSemaine WHERE Intitule=@Intitule";					command.CommandText = "SELECT * FROM JourSemaine WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM JourSemaine WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new JourSemaine();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [JourSemaine]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(JourSemaine item)
		{
			Create(item.Intitule);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > 100)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [JourSemaine] (Intitule)  VALUES (@Intitule)";

				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [JourSemaine] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.Int64? Id, System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > JourSemaine.Intitule_Max_Length)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [JourSemaine] (Id, Intitule)  VALUES (@Id, @Intitule)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<JourSemaine> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "JourSemaine";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.Intitule);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(JourSemaine item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [JourSemaine] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<JourSemaine> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [JourSemaine] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int64? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [JourSemaine] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Intitule

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public int DeleteByIntitule(System.String Intitule)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [JourSemaine] WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [JourSemaine]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(JourSemaine item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [JourSemaine] SET Intitule = @Intitule WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<JourSemaine> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [JourSemaine] SET Intitule = @Intitule WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [JourSemaine]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM JourSemaine";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region ILink_CJ_DidactiqueCJ Repository

	/// <summary>
	/// Represents the Link_CJ_DidactiqueCJ repository
	/// </summary>
	public partial interface ILink_CJ_DidactiqueCJRepository : IRepository<Link_CJ_DidactiqueCJ>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by CJ_Id
		/// </summary>
		/// <param name="CJ_Id">CJ_Id value</param>
		System.Collections.Generic.List<Link_CJ_DidactiqueCJ> SelectByCJ_Id(System.Int64? CJ_Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by CJ_Id
		/// </summary>
		/// <param name="CJ_Id">CJ_Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Link_CJ_DidactiqueCJ> SelectByCJ_Id(System.Int64? CJ_Id, int count);

		/// <summary>
		/// Retrieves a collection of items by DidactiqueCJ_Id
		/// </summary>
		/// <param name="DidactiqueCJ_Id">DidactiqueCJ_Id value</param>
		System.Collections.Generic.List<Link_CJ_DidactiqueCJ> SelectByDidactiqueCJ_Id(System.Int64? DidactiqueCJ_Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by DidactiqueCJ_Id
		/// </summary>
		/// <param name="DidactiqueCJ_Id">DidactiqueCJ_Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Link_CJ_DidactiqueCJ> SelectByDidactiqueCJ_Id(System.Int64? DidactiqueCJ_Id, int count);

		/// <summary>
		/// Delete records by CJ_Id
		/// </summary>
		/// <param name="CJ_Id">CJ_Id value</param>
		int DeleteByCJ_Id(System.Int64? CJ_Id);

		/// <summary>
		/// Delete records by DidactiqueCJ_Id
		/// </summary>
		/// <param name="DidactiqueCJ_Id">DidactiqueCJ_Id value</param>
		int DeleteByDidactiqueCJ_Id(System.Int64? DidactiqueCJ_Id);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.Int64? DidactiqueCJ_Id);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? CJ_Id, System.Int64? DidactiqueCJ_Id);
	}

	#endregion

	#region Link_CJ_DidactiqueCJ Repository

	/// <summary>
	/// Default ILink_CJ_DidactiqueCJRepository implementation 
	/// </summary>
	public partial class Link_CJ_DidactiqueCJRepository : ILink_CJ_DidactiqueCJRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<Link_CJ_DidactiqueCJ> ToList()
		{
			var list = new System.Collections.Generic.List<Link_CJ_DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM Link_CJ_DidactiqueCJ";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Link_CJ_DidactiqueCJ();
						item.CJ_Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["CJ_Id"]);
						item.DidactiqueCJ_Id = (System.Int64?) (reader.IsDBNull(1) ? null : reader["DidactiqueCJ_Id"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Link_CJ_DidactiqueCJ[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Link_CJ_DidactiqueCJ> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Link_CJ_DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Link_CJ_DidactiqueCJ", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Link_CJ_DidactiqueCJ();
						item.CJ_Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["CJ_Id"]);
						item.DidactiqueCJ_Id = (System.Int64?) (reader.IsDBNull(1) ? null : reader["DidactiqueCJ_Id"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Link_CJ_DidactiqueCJ[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE CJ_Id=?

		/// <summary>
		/// Retrieves a collection of items by CJ_Id
		/// </summary>
		/// <param name="CJ_Id">CJ_Id value</param>
		public System.Collections.Generic.List<Link_CJ_DidactiqueCJ> SelectByCJ_Id(System.Int64? CJ_Id)
		{
			var list = new System.Collections.Generic.List<Link_CJ_DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (CJ_Id != null)
				{
					command.CommandText = "SELECT * FROM Link_CJ_DidactiqueCJ WHERE CJ_Id=@CJ_Id";
					command.Parameters.Add("@CJ_Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@CJ_Id"].Value = CJ_Id != null ? (object)CJ_Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Link_CJ_DidactiqueCJ WHERE CJ_Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Link_CJ_DidactiqueCJ();
						item.CJ_Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["CJ_Id"]);
						item.DidactiqueCJ_Id = (System.Int64?) (reader.IsDBNull(1) ? null : reader["DidactiqueCJ_Id"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE DidactiqueCJ_Id=?

		/// <summary>
		/// Retrieves a collection of items by DidactiqueCJ_Id
		/// </summary>
		/// <param name="DidactiqueCJ_Id">DidactiqueCJ_Id value</param>
		public System.Collections.Generic.List<Link_CJ_DidactiqueCJ> SelectByDidactiqueCJ_Id(System.Int64? DidactiqueCJ_Id)
		{
			var list = new System.Collections.Generic.List<Link_CJ_DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (DidactiqueCJ_Id != null)
				{
					command.CommandText = "SELECT * FROM Link_CJ_DidactiqueCJ WHERE DidactiqueCJ_Id=@DidactiqueCJ_Id";
					command.Parameters.Add("@DidactiqueCJ_Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@DidactiqueCJ_Id"].Value = DidactiqueCJ_Id != null ? (object)DidactiqueCJ_Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Link_CJ_DidactiqueCJ WHERE DidactiqueCJ_Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Link_CJ_DidactiqueCJ();
						item.CJ_Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["CJ_Id"]);
						item.DidactiqueCJ_Id = (System.Int64?) (reader.IsDBNull(1) ? null : reader["DidactiqueCJ_Id"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE CJ_Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by CJ_Id
		/// </summary>
		/// <param name="CJ_Id">CJ_Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Link_CJ_DidactiqueCJ> SelectByCJ_Id(System.Int64? CJ_Id, int count)
		{
			var list = new System.Collections.Generic.List<Link_CJ_DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (CJ_Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Link_CJ_DidactiqueCJ WHERE CJ_Id=@CJ_Id";					command.CommandText = "SELECT * FROM Link_CJ_DidactiqueCJ WHERE CJ_Id=@CJ_Id";
				command.Parameters.Add("@CJ_Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@CJ_Id"].Value = CJ_Id != null ? (object)CJ_Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Link_CJ_DidactiqueCJ WHERE CJ_Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Link_CJ_DidactiqueCJ();
						item.CJ_Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["CJ_Id"]);
						item.DidactiqueCJ_Id = (System.Int64?) (reader.IsDBNull(1) ? null : reader["DidactiqueCJ_Id"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE DidactiqueCJ_Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by DidactiqueCJ_Id
		/// </summary>
		/// <param name="DidactiqueCJ_Id">DidactiqueCJ_Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Link_CJ_DidactiqueCJ> SelectByDidactiqueCJ_Id(System.Int64? DidactiqueCJ_Id, int count)
		{
			var list = new System.Collections.Generic.List<Link_CJ_DidactiqueCJ>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (DidactiqueCJ_Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Link_CJ_DidactiqueCJ WHERE DidactiqueCJ_Id=@DidactiqueCJ_Id";					command.CommandText = "SELECT * FROM Link_CJ_DidactiqueCJ WHERE DidactiqueCJ_Id=@DidactiqueCJ_Id";
				command.Parameters.Add("@DidactiqueCJ_Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@DidactiqueCJ_Id"].Value = DidactiqueCJ_Id != null ? (object)DidactiqueCJ_Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Link_CJ_DidactiqueCJ WHERE DidactiqueCJ_Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Link_CJ_DidactiqueCJ();
						item.CJ_Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["CJ_Id"]);
						item.DidactiqueCJ_Id = (System.Int64?) (reader.IsDBNull(1) ? null : reader["DidactiqueCJ_Id"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [Link_CJ_DidactiqueCJ]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(Link_CJ_DidactiqueCJ item)
		{
			Create(item.CJ_Id, item.DidactiqueCJ_Id);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="DidactiqueCJ_Id">DidactiqueCJ_Id value</param>
		public void Create(System.Int64? DidactiqueCJ_Id)
		{

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Link_CJ_DidactiqueCJ] (DidactiqueCJ_Id)  VALUES (@DidactiqueCJ_Id)";

				command.Parameters.Add("@DidactiqueCJ_Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@DidactiqueCJ_Id"].Value = DidactiqueCJ_Id != null ? (object)DidactiqueCJ_Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [Link_CJ_DidactiqueCJ] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="CJ_Id">CJ_Id value</param>
		/// <param name="DidactiqueCJ_Id">DidactiqueCJ_Id value</param>
		public void Create(System.Int64? CJ_Id, System.Int64? DidactiqueCJ_Id)
		{

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Link_CJ_DidactiqueCJ] (CJ_Id, DidactiqueCJ_Id)  VALUES (@CJ_Id, @DidactiqueCJ_Id)";

				command.Parameters.Add("@CJ_Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@CJ_Id"].Value = CJ_Id != null ? (object)CJ_Id : System.DBNull.Value;
				command.Parameters.Add("@DidactiqueCJ_Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@DidactiqueCJ_Id"].Value = DidactiqueCJ_Id != null ? (object)DidactiqueCJ_Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<Link_CJ_DidactiqueCJ> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "Link_CJ_DidactiqueCJ";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(0, item.CJ_Id);
						record.SetValue(1, item.DidactiqueCJ_Id);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(Link_CJ_DidactiqueCJ item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Link_CJ_DidactiqueCJ] WHERE CJ_Id = @CJ_Id";

				command.Parameters.Add("@CJ_Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@CJ_Id"].Value = item.CJ_Id != null ? (object)item.CJ_Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<Link_CJ_DidactiqueCJ> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Link_CJ_DidactiqueCJ] WHERE CJ_Id = @CJ_Id";
				command.Parameters.Add("@CJ_Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@CJ_Id"].Value = item.CJ_Id != null ? (object)item.CJ_Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY CJ_Id

		/// <summary>
		/// Delete records by CJ_Id
		/// </summary>
		/// <param name="CJ_Id">CJ_Id value</param>
		public int DeleteByCJ_Id(System.Int64? CJ_Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Link_CJ_DidactiqueCJ] WHERE CJ_Id=@CJ_Id";
				command.Parameters.Add("@CJ_Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@CJ_Id"].Value = CJ_Id != null ? (object)CJ_Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY DidactiqueCJ_Id

		/// <summary>
		/// Delete records by DidactiqueCJ_Id
		/// </summary>
		/// <param name="DidactiqueCJ_Id">DidactiqueCJ_Id value</param>
		public int DeleteByDidactiqueCJ_Id(System.Int64? DidactiqueCJ_Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Link_CJ_DidactiqueCJ] WHERE DidactiqueCJ_Id=@DidactiqueCJ_Id";
				command.Parameters.Add("@DidactiqueCJ_Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@DidactiqueCJ_Id"].Value = DidactiqueCJ_Id != null ? (object)DidactiqueCJ_Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Link_CJ_DidactiqueCJ]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(Link_CJ_DidactiqueCJ item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Link_CJ_DidactiqueCJ] SET DidactiqueCJ_Id = @DidactiqueCJ_Id WHERE CJ_Id = @CJ_Id";

				command.Parameters.Add("@CJ_Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@CJ_Id"].Value = item.CJ_Id != null ? (object)item.CJ_Id : System.DBNull.Value;
				command.Parameters.Add("@DidactiqueCJ_Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@DidactiqueCJ_Id"].Value = item.DidactiqueCJ_Id != null ? (object)item.DidactiqueCJ_Id : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<Link_CJ_DidactiqueCJ> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Link_CJ_DidactiqueCJ] SET DidactiqueCJ_Id = @DidactiqueCJ_Id WHERE CJ_Id = @CJ_Id";
				command.Parameters.Add("@CJ_Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@DidactiqueCJ_Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@CJ_Id"].Value = item.CJ_Id != null ? (object)item.CJ_Id : System.DBNull.Value;
					command.Parameters["@DidactiqueCJ_Id"].Value = item.DidactiqueCJ_Id != null ? (object)item.DidactiqueCJ_Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [Link_CJ_DidactiqueCJ]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM Link_CJ_DidactiqueCJ";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region ILink_FP_DidactiqueFP Repository

	/// <summary>
	/// Represents the Link_FP_DidactiqueFP repository
	/// </summary>
	public partial interface ILink_FP_DidactiqueFPRepository : IRepository<Link_FP_DidactiqueFP>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by FP_id
		/// </summary>
		/// <param name="FP_id">FP_id value</param>
		System.Collections.Generic.List<Link_FP_DidactiqueFP> SelectByFP_id(System.Int64? FP_id);

		/// <summary>
		/// Retrieves the first set of items specified by count by FP_id
		/// </summary>
		/// <param name="FP_id">FP_id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Link_FP_DidactiqueFP> SelectByFP_id(System.Int64? FP_id, int count);

		/// <summary>
		/// Retrieves a collection of items by DidactiqueFP_Id
		/// </summary>
		/// <param name="DidactiqueFP_Id">DidactiqueFP_Id value</param>
		System.Collections.Generic.List<Link_FP_DidactiqueFP> SelectByDidactiqueFP_Id(System.Int64? DidactiqueFP_Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by DidactiqueFP_Id
		/// </summary>
		/// <param name="DidactiqueFP_Id">DidactiqueFP_Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Link_FP_DidactiqueFP> SelectByDidactiqueFP_Id(System.Int64? DidactiqueFP_Id, int count);

		/// <summary>
		/// Delete records by FP_id
		/// </summary>
		/// <param name="FP_id">FP_id value</param>
		int DeleteByFP_id(System.Int64? FP_id);

		/// <summary>
		/// Delete records by DidactiqueFP_Id
		/// </summary>
		/// <param name="DidactiqueFP_Id">DidactiqueFP_Id value</param>
		int DeleteByDidactiqueFP_Id(System.Int64? DidactiqueFP_Id);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.Int64? DidactiqueFP_Id);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? FP_id, System.Int64? DidactiqueFP_Id);
	}

	#endregion

	#region Link_FP_DidactiqueFP Repository

	/// <summary>
	/// Default ILink_FP_DidactiqueFPRepository implementation 
	/// </summary>
	public partial class Link_FP_DidactiqueFPRepository : ILink_FP_DidactiqueFPRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<Link_FP_DidactiqueFP> ToList()
		{
			var list = new System.Collections.Generic.List<Link_FP_DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM Link_FP_DidactiqueFP";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Link_FP_DidactiqueFP();
						item.FP_id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["FP_id"]);
						item.DidactiqueFP_Id = (System.Int64?) (reader.IsDBNull(1) ? null : reader["DidactiqueFP_Id"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Link_FP_DidactiqueFP[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Link_FP_DidactiqueFP> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Link_FP_DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Link_FP_DidactiqueFP", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Link_FP_DidactiqueFP();
						item.FP_id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["FP_id"]);
						item.DidactiqueFP_Id = (System.Int64?) (reader.IsDBNull(1) ? null : reader["DidactiqueFP_Id"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Link_FP_DidactiqueFP[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE FP_id=?

		/// <summary>
		/// Retrieves a collection of items by FP_id
		/// </summary>
		/// <param name="FP_id">FP_id value</param>
		public System.Collections.Generic.List<Link_FP_DidactiqueFP> SelectByFP_id(System.Int64? FP_id)
		{
			var list = new System.Collections.Generic.List<Link_FP_DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (FP_id != null)
				{
					command.CommandText = "SELECT * FROM Link_FP_DidactiqueFP WHERE FP_id=@FP_id";
					command.Parameters.Add("@FP_id", System.Data.SqlDbType.BigInt);
					command.Parameters["@FP_id"].Value = FP_id != null ? (object)FP_id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Link_FP_DidactiqueFP WHERE FP_id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Link_FP_DidactiqueFP();
						item.FP_id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["FP_id"]);
						item.DidactiqueFP_Id = (System.Int64?) (reader.IsDBNull(1) ? null : reader["DidactiqueFP_Id"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE DidactiqueFP_Id=?

		/// <summary>
		/// Retrieves a collection of items by DidactiqueFP_Id
		/// </summary>
		/// <param name="DidactiqueFP_Id">DidactiqueFP_Id value</param>
		public System.Collections.Generic.List<Link_FP_DidactiqueFP> SelectByDidactiqueFP_Id(System.Int64? DidactiqueFP_Id)
		{
			var list = new System.Collections.Generic.List<Link_FP_DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (DidactiqueFP_Id != null)
				{
					command.CommandText = "SELECT * FROM Link_FP_DidactiqueFP WHERE DidactiqueFP_Id=@DidactiqueFP_Id";
					command.Parameters.Add("@DidactiqueFP_Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@DidactiqueFP_Id"].Value = DidactiqueFP_Id != null ? (object)DidactiqueFP_Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Link_FP_DidactiqueFP WHERE DidactiqueFP_Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Link_FP_DidactiqueFP();
						item.FP_id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["FP_id"]);
						item.DidactiqueFP_Id = (System.Int64?) (reader.IsDBNull(1) ? null : reader["DidactiqueFP_Id"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE FP_id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by FP_id
		/// </summary>
		/// <param name="FP_id">FP_id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Link_FP_DidactiqueFP> SelectByFP_id(System.Int64? FP_id, int count)
		{
			var list = new System.Collections.Generic.List<Link_FP_DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (FP_id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Link_FP_DidactiqueFP WHERE FP_id=@FP_id";					command.CommandText = "SELECT * FROM Link_FP_DidactiqueFP WHERE FP_id=@FP_id";
				command.Parameters.Add("@FP_id", System.Data.SqlDbType.BigInt);
				command.Parameters["@FP_id"].Value = FP_id != null ? (object)FP_id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Link_FP_DidactiqueFP WHERE FP_id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Link_FP_DidactiqueFP();
						item.FP_id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["FP_id"]);
						item.DidactiqueFP_Id = (System.Int64?) (reader.IsDBNull(1) ? null : reader["DidactiqueFP_Id"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE DidactiqueFP_Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by DidactiqueFP_Id
		/// </summary>
		/// <param name="DidactiqueFP_Id">DidactiqueFP_Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Link_FP_DidactiqueFP> SelectByDidactiqueFP_Id(System.Int64? DidactiqueFP_Id, int count)
		{
			var list = new System.Collections.Generic.List<Link_FP_DidactiqueFP>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (DidactiqueFP_Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Link_FP_DidactiqueFP WHERE DidactiqueFP_Id=@DidactiqueFP_Id";					command.CommandText = "SELECT * FROM Link_FP_DidactiqueFP WHERE DidactiqueFP_Id=@DidactiqueFP_Id";
				command.Parameters.Add("@DidactiqueFP_Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@DidactiqueFP_Id"].Value = DidactiqueFP_Id != null ? (object)DidactiqueFP_Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Link_FP_DidactiqueFP WHERE DidactiqueFP_Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Link_FP_DidactiqueFP();
						item.FP_id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["FP_id"]);
						item.DidactiqueFP_Id = (System.Int64?) (reader.IsDBNull(1) ? null : reader["DidactiqueFP_Id"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [Link_FP_DidactiqueFP]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(Link_FP_DidactiqueFP item)
		{
			Create(item.FP_id, item.DidactiqueFP_Id);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="DidactiqueFP_Id">DidactiqueFP_Id value</param>
		public void Create(System.Int64? DidactiqueFP_Id)
		{

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Link_FP_DidactiqueFP] (DidactiqueFP_Id)  VALUES (@DidactiqueFP_Id)";

				command.Parameters.Add("@DidactiqueFP_Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@DidactiqueFP_Id"].Value = DidactiqueFP_Id != null ? (object)DidactiqueFP_Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [Link_FP_DidactiqueFP] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="FP_id">FP_id value</param>
		/// <param name="DidactiqueFP_Id">DidactiqueFP_Id value</param>
		public void Create(System.Int64? FP_id, System.Int64? DidactiqueFP_Id)
		{

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Link_FP_DidactiqueFP] (FP_id, DidactiqueFP_Id)  VALUES (@FP_id, @DidactiqueFP_Id)";

				command.Parameters.Add("@FP_id", System.Data.SqlDbType.BigInt);
				command.Parameters["@FP_id"].Value = FP_id != null ? (object)FP_id : System.DBNull.Value;
				command.Parameters.Add("@DidactiqueFP_Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@DidactiqueFP_Id"].Value = DidactiqueFP_Id != null ? (object)DidactiqueFP_Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<Link_FP_DidactiqueFP> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "Link_FP_DidactiqueFP";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(0, item.FP_id);
						record.SetValue(1, item.DidactiqueFP_Id);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(Link_FP_DidactiqueFP item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Link_FP_DidactiqueFP] WHERE FP_id = @FP_id";

				command.Parameters.Add("@FP_id", System.Data.SqlDbType.BigInt);
				command.Parameters["@FP_id"].Value = item.FP_id != null ? (object)item.FP_id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<Link_FP_DidactiqueFP> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Link_FP_DidactiqueFP] WHERE FP_id = @FP_id";
				command.Parameters.Add("@FP_id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@FP_id"].Value = item.FP_id != null ? (object)item.FP_id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY FP_id

		/// <summary>
		/// Delete records by FP_id
		/// </summary>
		/// <param name="FP_id">FP_id value</param>
		public int DeleteByFP_id(System.Int64? FP_id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Link_FP_DidactiqueFP] WHERE FP_id=@FP_id";
				command.Parameters.Add("@FP_id", System.Data.SqlDbType.BigInt);
				command.Parameters["@FP_id"].Value = FP_id != null ? (object)FP_id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY DidactiqueFP_Id

		/// <summary>
		/// Delete records by DidactiqueFP_Id
		/// </summary>
		/// <param name="DidactiqueFP_Id">DidactiqueFP_Id value</param>
		public int DeleteByDidactiqueFP_Id(System.Int64? DidactiqueFP_Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Link_FP_DidactiqueFP] WHERE DidactiqueFP_Id=@DidactiqueFP_Id";
				command.Parameters.Add("@DidactiqueFP_Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@DidactiqueFP_Id"].Value = DidactiqueFP_Id != null ? (object)DidactiqueFP_Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Link_FP_DidactiqueFP]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(Link_FP_DidactiqueFP item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Link_FP_DidactiqueFP] SET DidactiqueFP_Id = @DidactiqueFP_Id WHERE FP_id = @FP_id";

				command.Parameters.Add("@FP_id", System.Data.SqlDbType.BigInt);
				command.Parameters["@FP_id"].Value = item.FP_id != null ? (object)item.FP_id : System.DBNull.Value;
				command.Parameters.Add("@DidactiqueFP_Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@DidactiqueFP_Id"].Value = item.DidactiqueFP_Id != null ? (object)item.DidactiqueFP_Id : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<Link_FP_DidactiqueFP> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Link_FP_DidactiqueFP] SET DidactiqueFP_Id = @DidactiqueFP_Id WHERE FP_id = @FP_id";
				command.Parameters.Add("@FP_id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@DidactiqueFP_Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@FP_id"].Value = item.FP_id != null ? (object)item.FP_id : System.DBNull.Value;
					command.Parameters["@DidactiqueFP_Id"].Value = item.DidactiqueFP_Id != null ? (object)item.DidactiqueFP_Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [Link_FP_DidactiqueFP]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM Link_FP_DidactiqueFP";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region INiveau Repository

	/// <summary>
	/// Represents the Niveau repository
	/// </summary>
	public partial interface INiveauRepository : IRepository<Niveau>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<Niveau> SelectById(System.Int64? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Niveau> SelectById(System.Int64? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		System.Collections.Generic.List<Niveau> SelectByIntitule(System.String Intitule);

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Niveau> SelectByIntitule(System.String Intitule, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int64? Id);

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		int DeleteByIntitule(System.String Intitule);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.String Intitule);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Id, System.String Intitule);
	}

	#endregion

	#region Niveau Repository

	/// <summary>
	/// Default INiveauRepository implementation 
	/// </summary>
	public partial class NiveauRepository : INiveauRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<Niveau> ToList()
		{
			var list = new System.Collections.Generic.List<Niveau>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM Niveau";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Niveau();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Niveau[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Niveau> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Niveau>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Niveau", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Niveau();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Niveau[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<Niveau> SelectById(System.Int64? Id)
		{
			var list = new System.Collections.Generic.List<Niveau>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM Niveau WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Niveau WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Niveau();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Intitule=?

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public System.Collections.Generic.List<Niveau> SelectByIntitule(System.String Intitule)
		{
			var list = new System.Collections.Generic.List<Niveau>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Intitule != null)
				{
					command.CommandText = "SELECT * FROM Niveau WHERE Intitule=@Intitule";
					command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Niveau WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Niveau();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Niveau> SelectById(System.Int64? Id, int count)
		{
			var list = new System.Collections.Generic.List<Niveau>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Niveau WHERE Id=@Id";					command.CommandText = "SELECT * FROM Niveau WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Niveau WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Niveau();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Intitule=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Niveau> SelectByIntitule(System.String Intitule, int count)
		{
			var list = new System.Collections.Generic.List<Niveau>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Intitule != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Niveau WHERE Intitule=@Intitule";					command.CommandText = "SELECT * FROM Niveau WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Niveau WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Niveau();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [Niveau]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(Niveau item)
		{
			Create(item.Intitule);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > 3)
				throw new System.ArgumentException("Max length for Intitule is 3");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Niveau] (Intitule)  VALUES (@Intitule)";

				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [Niveau] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.Int64? Id, System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > Niveau.Intitule_Max_Length)
				throw new System.ArgumentException("Max length for Intitule is 3");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Niveau] (Id, Intitule)  VALUES (@Id, @Intitule)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<Niveau> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "Niveau";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.Intitule);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(Niveau item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Niveau] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<Niveau> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Niveau] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int64? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Niveau] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Intitule

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public int DeleteByIntitule(System.String Intitule)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Niveau] WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Niveau]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(Niveau item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Niveau] SET Intitule = @Intitule WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<Niveau> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Niveau] SET Intitule = @Intitule WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [Niveau]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM Niveau";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region IPhaseApprentissage Repository

	/// <summary>
	/// Represents the PhaseApprentissage repository
	/// </summary>
	public partial interface IPhaseApprentissageRepository : IRepository<PhaseApprentissage>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<PhaseApprentissage> SelectById(System.Int64? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<PhaseApprentissage> SelectById(System.Int64? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		System.Collections.Generic.List<PhaseApprentissage> SelectByIntitule(System.String Intitule);

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<PhaseApprentissage> SelectByIntitule(System.String Intitule, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int64? Id);

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		int DeleteByIntitule(System.String Intitule);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.String Intitule);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int64? Id, System.String Intitule);
	}

	#endregion

	#region PhaseApprentissage Repository

	/// <summary>
	/// Default IPhaseApprentissageRepository implementation 
	/// </summary>
	public partial class PhaseApprentissageRepository : IPhaseApprentissageRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<PhaseApprentissage> ToList()
		{
			var list = new System.Collections.Generic.List<PhaseApprentissage>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM PhaseApprentissage";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new PhaseApprentissage();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public PhaseApprentissage[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<PhaseApprentissage> ToList(int count)
		{
			var list = new System.Collections.Generic.List<PhaseApprentissage>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM PhaseApprentissage", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new PhaseApprentissage();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public PhaseApprentissage[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<PhaseApprentissage> SelectById(System.Int64? Id)
		{
			var list = new System.Collections.Generic.List<PhaseApprentissage>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM PhaseApprentissage WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM PhaseApprentissage WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new PhaseApprentissage();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Intitule=?

		/// <summary>
		/// Retrieves a collection of items by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public System.Collections.Generic.List<PhaseApprentissage> SelectByIntitule(System.String Intitule)
		{
			var list = new System.Collections.Generic.List<PhaseApprentissage>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Intitule != null)
				{
					command.CommandText = "SELECT * FROM PhaseApprentissage WHERE Intitule=@Intitule";
					command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM PhaseApprentissage WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new PhaseApprentissage();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<PhaseApprentissage> SelectById(System.Int64? Id, int count)
		{
			var list = new System.Collections.Generic.List<PhaseApprentissage>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM PhaseApprentissage WHERE Id=@Id";					command.CommandText = "SELECT * FROM PhaseApprentissage WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM PhaseApprentissage WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new PhaseApprentissage();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Intitule=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<PhaseApprentissage> SelectByIntitule(System.String Intitule, int count)
		{
			var list = new System.Collections.Generic.List<PhaseApprentissage>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Intitule != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM PhaseApprentissage WHERE Intitule=@Intitule";					command.CommandText = "SELECT * FROM PhaseApprentissage WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM PhaseApprentissage WHERE Intitule IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new PhaseApprentissage();
						item.Id = (System.Int64?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Intitule = (reader.IsDBNull(1) ? null : reader["Intitule"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [PhaseApprentissage]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(PhaseApprentissage item)
		{
			Create(item.Intitule);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > 100)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [PhaseApprentissage] (Intitule)  VALUES (@Intitule)";

				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [PhaseApprentissage] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="Intitule">Intitule value</param>
		public void Create(System.Int64? Id, System.String Intitule)
		{
			if (Intitule != null && Intitule.Length > PhaseApprentissage.Intitule_Max_Length)
				throw new System.ArgumentException("Max length for Intitule is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [PhaseApprentissage] (Id, Intitule)  VALUES (@Id, @Intitule)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<PhaseApprentissage> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "PhaseApprentissage";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.Intitule);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(PhaseApprentissage item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [PhaseApprentissage] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<PhaseApprentissage> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [PhaseApprentissage] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int64? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [PhaseApprentissage] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Intitule

		/// <summary>
		/// Delete records by Intitule
		/// </summary>
		/// <param name="Intitule">Intitule value</param>
		public int DeleteByIntitule(System.String Intitule)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [PhaseApprentissage] WHERE Intitule=@Intitule";
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = Intitule != null ? (object)Intitule : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [PhaseApprentissage]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(PhaseApprentissage item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [PhaseApprentissage] SET Intitule = @Intitule WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<PhaseApprentissage> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [PhaseApprentissage] SET Intitule = @Intitule WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.BigInt);
				command.Parameters.Add("@Intitule", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@Intitule"].Value = item.Intitule != null ? (object)item.Intitule : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [PhaseApprentissage]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM PhaseApprentissage";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

	#region IVersion Repository

	/// <summary>
	/// Represents the Version repository
	/// </summary>
	public partial interface IVersionRepository : IRepository<Version>
	{
		/// <summary>
		/// Transaction instance created from <see="IDataRepository">
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Date
		/// </summary>
		/// <param name="Date">Date value</param>
		System.Collections.Generic.List<Version> SelectByDate(System.DateTime? Date);

		/// <summary>
		/// Retrieves the first set of items specified by count by Date
		/// </summary>
		/// <param name="Date">Date value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Version> SelectByDate(System.DateTime? Date, int count);

		/// <summary>
		/// Retrieves a collection of items by Numero
		/// </summary>
		/// <param name="Numero">Numero value</param>
		System.Collections.Generic.List<Version> SelectByNumero(System.String Numero);

		/// <summary>
		/// Retrieves the first set of items specified by count by Numero
		/// </summary>
		/// <param name="Numero">Numero value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Version> SelectByNumero(System.String Numero, int count);

		/// <summary>
		/// Retrieves a collection of items by Description
		/// </summary>
		/// <param name="Description">Description value</param>
		System.Collections.Generic.List<Version> SelectByDescription(System.String Description);

		/// <summary>
		/// Retrieves the first set of items specified by count by Description
		/// </summary>
		/// <param name="Description">Description value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Version> SelectByDescription(System.String Description, int count);

		/// <summary>
		/// Delete records by Date
		/// </summary>
		/// <param name="Date">Date value</param>
		int DeleteByDate(System.DateTime? Date);

		/// <summary>
		/// Delete records by Numero
		/// </summary>
		/// <param name="Numero">Numero value</param>
		int DeleteByNumero(System.String Numero);

		/// <summary>
		/// Delete records by Description
		/// </summary>
		/// <param name="Description">Description value</param>
		int DeleteByDescription(System.String Description);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.DateTime? Date, System.String Description);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.DateTime? Date, System.String Numero, System.String Description);
	}

	#endregion

	#region Version Repository

	/// <summary>
	/// Default IVersionRepository implementation 
	/// </summary>
	public partial class VersionRepository : IVersionRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }
		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<Version> ToList()
		{
			var list = new System.Collections.Generic.List<Version>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM Version";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Version();
						item.Date = (System.DateTime?) (reader.IsDBNull(0) ? null : reader["Date"]);
						item.Numero = (reader.IsDBNull(1) ? null : reader["Numero"] as System.String);
						item.Description = (reader.IsDBNull(2) ? null : reader["Description"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Version[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Version> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Version>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Version", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Version();
						item.Date = (System.DateTime?) (reader.IsDBNull(0) ? null : reader["Date"]);
						item.Numero = (reader.IsDBNull(1) ? null : reader["Numero"] as System.String);
						item.Description = (reader.IsDBNull(2) ? null : reader["Description"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Version[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Date=?

		/// <summary>
		/// Retrieves a collection of items by Date
		/// </summary>
		/// <param name="Date">Date value</param>
		public System.Collections.Generic.List<Version> SelectByDate(System.DateTime? Date)
		{
			var list = new System.Collections.Generic.List<Version>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Date != null)
				{
					command.CommandText = "SELECT * FROM Version WHERE Date=@Date";
					command.Parameters.Add("@Date", System.Data.SqlDbType.DateTime);
					command.Parameters["@Date"].Value = Date != null ? (object)Date : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Version WHERE Date IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Version();
						item.Date = (System.DateTime?) (reader.IsDBNull(0) ? null : reader["Date"]);
						item.Numero = (reader.IsDBNull(1) ? null : reader["Numero"] as System.String);
						item.Description = (reader.IsDBNull(2) ? null : reader["Description"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Numero=?

		/// <summary>
		/// Retrieves a collection of items by Numero
		/// </summary>
		/// <param name="Numero">Numero value</param>
		public System.Collections.Generic.List<Version> SelectByNumero(System.String Numero)
		{
			var list = new System.Collections.Generic.List<Version>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Numero != null)
				{
					command.CommandText = "SELECT * FROM Version WHERE Numero=@Numero";
					command.Parameters.Add("@Numero", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Numero"].Value = Numero != null ? (object)Numero : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Version WHERE Numero IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Version();
						item.Date = (System.DateTime?) (reader.IsDBNull(0) ? null : reader["Date"]);
						item.Numero = (reader.IsDBNull(1) ? null : reader["Numero"] as System.String);
						item.Description = (reader.IsDBNull(2) ? null : reader["Description"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Description=?

		/// <summary>
		/// Retrieves a collection of items by Description
		/// </summary>
		/// <param name="Description">Description value</param>
		public System.Collections.Generic.List<Version> SelectByDescription(System.String Description)
		{
			var list = new System.Collections.Generic.List<Version>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Description != null)
				{
					command.CommandText = "SELECT * FROM Version WHERE Description=@Description";
					command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Description"].Value = Description != null ? (object)Description : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Version WHERE Description IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Version();
						item.Date = (System.DateTime?) (reader.IsDBNull(0) ? null : reader["Date"]);
						item.Numero = (reader.IsDBNull(1) ? null : reader["Numero"] as System.String);
						item.Description = (reader.IsDBNull(2) ? null : reader["Description"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Date=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Date
		/// </summary>
		/// <param name="Date">Date value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Version> SelectByDate(System.DateTime? Date, int count)
		{
			var list = new System.Collections.Generic.List<Version>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Date != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Version WHERE Date=@Date";					command.CommandText = "SELECT * FROM Version WHERE Date=@Date";
				command.Parameters.Add("@Date", System.Data.SqlDbType.DateTime);
				command.Parameters["@Date"].Value = Date != null ? (object)Date : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Version WHERE Date IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Version();
						item.Date = (System.DateTime?) (reader.IsDBNull(0) ? null : reader["Date"]);
						item.Numero = (reader.IsDBNull(1) ? null : reader["Numero"] as System.String);
						item.Description = (reader.IsDBNull(2) ? null : reader["Description"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Numero=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Numero
		/// </summary>
		/// <param name="Numero">Numero value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Version> SelectByNumero(System.String Numero, int count)
		{
			var list = new System.Collections.Generic.List<Version>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Numero != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Version WHERE Numero=@Numero";					command.CommandText = "SELECT * FROM Version WHERE Numero=@Numero";
				command.Parameters.Add("@Numero", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Numero"].Value = Numero != null ? (object)Numero : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Version WHERE Numero IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Version();
						item.Date = (System.DateTime?) (reader.IsDBNull(0) ? null : reader["Date"]);
						item.Numero = (reader.IsDBNull(1) ? null : reader["Numero"] as System.String);
						item.Description = (reader.IsDBNull(2) ? null : reader["Description"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Description=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Description
		/// </summary>
		/// <param name="Description">Description value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Version> SelectByDescription(System.String Description, int count)
		{
			var list = new System.Collections.Generic.List<Version>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Description != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Version WHERE Description=@Description";					command.CommandText = "SELECT * FROM Version WHERE Description=@Description";
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Description"].Value = Description != null ? (object)Description : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Version WHERE Description IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Version();
						item.Date = (System.DateTime?) (reader.IsDBNull(0) ? null : reader["Date"]);
						item.Numero = (reader.IsDBNull(1) ? null : reader["Numero"] as System.String);
						item.Description = (reader.IsDBNull(2) ? null : reader["Description"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [Version]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(Version item)
		{
			Create(item.Date, item.Numero, item.Description);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="Date">Date value</param>
		/// <param name="Description">Description value</param>
		public void Create(System.DateTime? Date, System.String Description)
		{
			if (Description != null && Description.Length > 1000)
				throw new System.ArgumentException("Max length for Description is 1000");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Version] (Date, Description)  VALUES (@Date, @Description)";

				command.Parameters.Add("@Date", System.Data.SqlDbType.DateTime);
				command.Parameters["@Date"].Value = Date != null ? (object)Date : System.DBNull.Value;
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Description"].Value = Description != null ? (object)Description : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [Version] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Date">Date value</param>
		/// <param name="Numero">Numero value</param>
		/// <param name="Description">Description value</param>
		public void Create(System.DateTime? Date, System.String Numero, System.String Description)
		{
			if (Description != null && Description.Length > Version.Description_Max_Length)
				throw new System.ArgumentException("Max length for Description is 1000");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Version] (Date, Numero, Description)  VALUES (@Date, @Numero, @Description)";

				command.Parameters.Add("@Date", System.Data.SqlDbType.DateTime);
				command.Parameters["@Date"].Value = Date != null ? (object)Date : System.DBNull.Value;
				command.Parameters.Add("@Numero", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Numero"].Value = Numero != null ? (object)Numero : System.DBNull.Value;
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Description"].Value = Description != null ? (object)Description : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<Version> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "Version";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(0, item.Date);
						record.SetValue(1, item.Numero);
						record.SetValue(2, item.Description);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(Version item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Version] WHERE Numero = @Numero";

				command.Parameters.Add("@Numero", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Numero"].Value = item.Numero != null ? (object)item.Numero : System.DBNull.Value;				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<Version> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Version] WHERE Numero = @Numero";
				command.Parameters.Add("@Numero", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Numero"].Value = item.Numero != null ? (object)item.Numero : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Date

		/// <summary>
		/// Delete records by Date
		/// </summary>
		/// <param name="Date">Date value</param>
		public int DeleteByDate(System.DateTime? Date)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Version] WHERE Date=@Date";
				command.Parameters.Add("@Date", System.Data.SqlDbType.DateTime);
				command.Parameters["@Date"].Value = Date != null ? (object)Date : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Numero

		/// <summary>
		/// Delete records by Numero
		/// </summary>
		/// <param name="Numero">Numero value</param>
		public int DeleteByNumero(System.String Numero)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Version] WHERE Numero=@Numero";
				command.Parameters.Add("@Numero", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Numero"].Value = Numero != null ? (object)Numero : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Description

		/// <summary>
		/// Delete records by Description
		/// </summary>
		/// <param name="Description">Description value</param>
		public int DeleteByDescription(System.String Description)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Version] WHERE Description=@Description";
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Description"].Value = Description != null ? (object)Description : System.DBNull.Value;
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Version]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(Version item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Version] SET Date = @Date, Description = @Description WHERE Numero = @Numero";

				command.Parameters.Add("@Date", System.Data.SqlDbType.DateTime);
				command.Parameters["@Date"].Value = item.Date != null ? (object)item.Date : System.DBNull.Value;
				command.Parameters.Add("@Numero", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Numero"].Value = item.Numero != null ? (object)item.Numero : System.DBNull.Value;
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Description"].Value = item.Description != null ? (object)item.Description : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<Version> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Version] SET Date = @Date, Description = @Description WHERE Numero = @Numero";
				command.Parameters.Add("@Date", System.Data.SqlDbType.DateTime);
				command.Parameters.Add("@Numero", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Date"].Value = item.Date != null ? (object)item.Date : System.DBNull.Value;
					command.Parameters["@Numero"].Value = item.Numero != null ? (object)item.Numero : System.DBNull.Value;
					command.Parameters["@Description"].Value = item.Description != null ? (object)item.Description : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [Version]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM Version";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}

	#endregion

}
